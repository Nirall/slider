!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t,n){"use strict";n.r(t);var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)r[i]=s[a];return r},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.forEach((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t+=1){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(e,t){r(this.observers).map((function(n){return n(e,t)}))},e}();t.default=i},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,n){"use strict";n.r(t);var r=n(7),i=n(8),s=n(0),a=function(e,t){var n=this;this.getPosition=function(){return n.knob.getPosition()},this.setPosition=function(e,t){n.tooltip.setPosition(e+n.knob.getWidth()/2,t),n.knob.setPosition(e)},this.update=function(e){n.isVertical=e,n.knob.update(n.isVertical),n.tooltip.update(n.isVertical)},this.getWidth=function(){return n.knob.getWidth()},this.hideRunner=function(){n.knob.elem.style.display="none",n.tooltip.elem.style.display="none"},this.hideLabel=function(){n.tooltip.elem.style.display="none"},this.showLabel=function(){n.tooltip.elem.style.display="block"},this.showRunner=function(){n.knob.elem.style.display="block"},this.appendToNode=function(e){[n.knob.elem,n.tooltip.elem].forEach((function(t){e.appendChild(t),t.onmousedown=n.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",n.handleRunnerMouseMove),document.addEventListener("mouseup",n.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){n.observers.notifyObservers("MovingRunner",{event:e,runner:n})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",n.handleRunnerMouseUp),document.removeEventListener("mousemove",n.handleRunnerMouseMove)},this.isVertical=e,this.knob=new r.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(4),i=n(12),s=n(0),a={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1},o=function(e,t){var n=this;void 0===e&&(e=a),this.update=function(e){n.observers.notifyObservers("UpdatingConfig",e),n.observers.notifyObservers("GettingConfig")},this.setValues=function(e){n.observers.notifyObservers("ChangingCurrentValueFromPanel",e)},this.renew=function(){n.observers.notifyObservers("GettingConfig"),n.observers.notifyObservers("GettingValues")},this.init=function(e){n.observers.addObserver(n.view.observeControllerFromView),n.observers.addObserver(n.model.observeControllerFromModel),n.observers.notifyObservers("AppendingToNode",e.get(0))},this.handleViewChangingValue=function(e,t){"ChangingCurrentValueFromView"===e&&n.observers.notifyObservers("ChangingCurrentValueFromView",t),"SendingConfig"===e&&n.observers.notifyObservers("SendingConfig",t)},this.handleModelSendingValues=function(e,t){"SendingCurrentValues"===e&&(n.observers.notifyObservers("SendingCurrentValues",t),n.observers.notifyObservers("GettingValues")),"SendingCurrentValuesForTracking"===e&&n.observers.notifyObservers("SendingCurrentValuesForTracking",t)},this.view=new r.default(e,this.handleViewChangingValue),this.model=new i.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.handleModelSendingValues),this.observers=new s.default,this.init(t)};t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n(5),s=function(e,t){switch(t){case"step":return e.parameters.maxValue%1!=0||e.parameters.minValue%1!=0;case"maxValue":return e.parameters.step%1!=0||e.parameters.minValue%1!=0;case"minValue":return e.parameters.step%1!=0||e.parameters.maxValue%1!=0;default:return!1}},a={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1},o=function(e,t){var n=this;void 0===e&&(e=a),this.update=function(e){var t=n.validateConfig(e);n.parameters=t,n.observers.notifyObservers("UpdatingConfig",n.parameters)},this.handleTrackValueChanging=function(e,t){"ChangingCurrentValueFromTrack"===e&&n.observers.notifyObservers("ChangingCurrentValueFromView",t)},this.observeControllerFromView=function(e,t){"SendingCurrentValues"===e&&n.observers.notifyObservers("SendingCurrentValues",t),"UpdatingConfig"===e&&n.update(t),"GettingConfig"===e&&n.observers.notifyObservers("SendingConfig",n.parameters),"AppendingToNode"===e&&n.observers.notifyObservers("AppendingToNode",t)},this.init=function(e){n.observers.addObserver(e),n.observers.addObserver(n.track.observeViewFromTrack)},this.validateConfig=function(e){var t=Object.keys(e)[0],r=n.parameters;switch(t){case"step":r.step=n.checkStep(e.step);break;case"maxValue":r.maxValue=n.checkMaxValue(e.maxValue);break;case"minValue":r.minValue=n.checkMinValue(e.minValue);break;case"isRange":"toggle"===e.isRange&&(!0===n.parameters.isRange?r.isRange=!1:r.isRange=!0);break;case"isVertical":"toggle"===e.isVertical&&(!0===n.parameters.isVertical?r.isVertical=!1:r.isVertical=!0);break;case"showLabel":"toggle"===e.showLabel&&(!0===n.parameters.showLabel?r.showLabel=!1:r.showLabel=!0)}return r},this.checkStep=function(e){return!e||e>(n.parameters.maxValue-n.parameters.minValue)/2?n.parameters.step:(e%1!=0?n.parameters.isFloat=!0:s(n,"step")||(n.parameters.isFloat=!1),e)},this.checkMaxValue=function(e){return Number.isNaN(e)||e<=n.parameters.minValue?n.parameters.maxValue:(e%1!=0?n.parameters.isFloat=!0:s(n,"maxValue")||(n.parameters.isFloat=!1),e)},this.checkMinValue=function(e){return Number.isNaN(e)||e>=n.parameters.maxValue?n.parameters.minValue:(e%1!=0?n.parameters.isFloat=!0:s(n,"minValue")||(n.parameters.isFloat=!1),e)},this.observers=new r.default,this.track=new i.default(e,this.handleTrackValueChanging),this.parameters=e,this.init(t)};t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(6),i=n(2),s=n(9),a=n(11),o=n(0),u=function(){function e(e,t){var n=this;this.update=function(e){n.parameters=e,n.bar.update(n.parameters.isVertical),n.progressBar.update(n.parameters.isVertical),n.runnerAdditional.update(n.parameters.isVertical),n.runnerMain.update(n.parameters.isVertical),n.scale.update(n.parameters),n.runnerAdditional.hideRunner(),n.parameters.showLabel?(n.runnerAdditional.showLabel(),n.runnerMain.showLabel()):(n.runnerAdditional.hideLabel(),n.runnerMain.hideLabel()),n.parameters.isRange?n.runnerAdditional.showRunner():n.runnerAdditional.hideRunner(),n.runnerAdditional.setPosition(-n.runnerAdditional.getWidth()/2,n.parameters.minValue),n.runnerMain.setPosition(n.bar.getDimension()-n.runnerMain.getWidth()/2,n.parameters.maxValue)},this.observeViewFromTrack=function(e,t){"SendingCurrentValues"===e&&n.renewRunners(t),"UpdatingConfig"===e&&n.update(t),"AppendingToNode"===e&&n.appendToNode(t)},this.appendToNode=function(e){e.appendChild(n.bar.elem).appendChild(n.progressBar.elem),n.runnerMain.appendToNode(e),n.runnerAdditional.appendToNode(e),n.scale.appendToNode(e),n.update(n.parameters),n.updateProgressBar()},this.convertOffsetToValue=function(e){return(e-n.parameters.minValue)*n.bar.getDimension()/(n.parameters.maxValue-n.parameters.minValue)-n.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=n.runnerMain.getPosition()-n.bar.getPosition()+n.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return n.parameters.isRange?n.runnerAdditional.getPosition()-n.bar.getPosition()+n.runnerMain.getWidth()/2:0},this.handleRunnerMove=function(e,t){var r=t.event,i=t.runner;"MovingRunner"===e&&n.moveRunner(n.processRunnerMouseEvent(r,i))},this.moveRunner=function(e){e.runner.setPosition(e.offset,e.value),e.runner===n.runnerAdditional&&n.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMinValue:e.value}),e.runner===n.runnerMain&&n.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMaxValue:e.value}),n.updateProgressBar()},this.processRunnerMouseEvent=function(e,t){var r=(n.parameters.isVertical?e.clientY:e.clientX)-n.bar.getPosition()-n.runnerMain.getWidth()/2;return n.processRunnerOffset(r,t)},this.processRunnerOffset=function(e,t){var r,i;return i=n.checkRunnerOffset(e,t),{runner:t,offset:i=(r=n.roundOffsetRunner(i))[0],value:r[1]}},this.checkRunnerOffset=function(e,t){var r=n.parameters.step*n.bar.getDimension()/(n.parameters.maxValue-n.parameters.minValue),i=r/1.5>n.runnerMain.getWidth()?r/1.5:n.runnerMain.getWidth(),s=e;return t===n.runnerAdditional?e>n.runnerMain.getPosition()-n.bar.getPosition()-i&&(s=n.runnerMain.getPosition()-n.bar.getPosition()-i):t===n.runnerMain&&e<n.runnerAdditional.getPosition()-n.bar.getPosition()+i&&(s=n.runnerAdditional.getPosition()-n.bar.getPosition()+i),s},this.roundOffsetRunner=function(e){var t=n.parameters.minValue+(e+n.runnerMain.getWidth()/2)*(n.parameters.maxValue-n.parameters.minValue)/n.bar.getDimension(),r=n.round(t,n.parameters.step);n.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=n.convertOffsetToValue(r);return i<-n.runnerMain.getWidth()/2&&(i=-n.runnerMain.getWidth()/2,r=n.parameters.minValue),i>n.bar.getDimension()-n.runnerMain.getWidth()/2&&(i=n.bar.getDimension()-n.runnerMain.getWidth()/2,r=n.parameters.maxValue),[i,r]},this.round=function(e,t){var r=Math.trunc(e/t),i=+(e-r*t).toFixed(2);return e<0?Math.abs(i)<t/2?r*t:(r-1)*t:e<=n.parameters.minValue?n.parameters.minValue:e>=n.parameters.maxValue?n.parameters.maxValue:i<t/2?r*t:(r+1)*t},this.handleScaleClick=function(e,t){if("ClickOnScale"===e){var r=n.convertOffsetToValue(t),i=void 0;i=n.parameters.isRange?n.checkRunnerCloser(r):n.runnerMain,n.moveRunner(n.processRunnerOffset(r,i))}},this.checkRunnerCloser=function(e){return Math.abs(e-n.getMainRunnerOffset())<Math.abs(e-n.getAdditionalRunnerOffset())?n.runnerMain:n.runnerAdditional},this.handleBarClick=function(e,t){if("ClickOnBar"===e){var r=(n.parameters.isVertical?t.clientY:t.clientX)-n.bar.getPosition()-n.runnerMain.getWidth()/2;n.parameters.isRange?n.moveRunner(n.processRunnerOffset(r,n.checkRunnerCloser(r))):n.moveRunner(n.processRunnerOffset(r,n.runnerMain))}},this.updateProgressBar=function(){n.progressBar.update(n.parameters.isVertical),n.progressBar.setPosition(n.getAdditionalRunnerOffset()),n.progressBar.setDimension(n.getMainRunnerOffset()-n.getAdditionalRunnerOffset())},this.parameters=e,this.runnerMain=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.runnerAdditional=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.progressBar=new a.default(this.parameters.isVertical),this.bar=new r.default(this.parameters.isVertical,this.handleBarClick),this.scale=new s.default(this.parameters,this.handleScaleClick),this.observers=new o.default,this.observers.addObserver(t)}return e.prototype.renewRunners=function(e){this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMaxValue),this.runnerMain)),this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMinValue),this.runnerAdditional))},e}();t.default=u},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(0),s=function(e,t){var n=this;this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.update=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__bar_position_vertical"):n.elem.classList.remove("slider__bar_position_vertical")},this.init=function(e){n.elem.onclick=n.handleBarClick,n.observers.addObserver(e)},this.handleBarClick=function(e){n.observers.notifyObservers("ClickOnBar",e)},this.elem=Object(r.default)("slider__bar"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__knob_position_vertical"):t.elem.classList.remove("slider__knob_position_vertical")},this.elem=Object(r.default)("slider__knob"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,n){t.elem.innerHTML=n+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__tooltip_position_vertical"):t.elem.classList.remove("slider__tooltip_position_vertical")},this.elem=Object(r.default)("slider__tooltip"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(10),i=n(0),s=function(e,t){var n=this;this.update=function(e){n.parameters=e,n.removeMarks(),n.appendToNode(n.node)},this.appendToNode=function(e){n.node=e,n.marks.forEach((function(t){e.appendChild(t.elem)})),n.moveMarks()},this.removeMarks=function(){n.node.querySelectorAll(".slider__mark").forEach((function(e){n.node.removeChild(e)}))},this.removeMark=function(e){n.node.removeChild(e)},this.moveMarks=function(){n.marks.forEach((function(e,t){if(e.update(n.parameters.isVertical),0===t)e.setPosition(0,n.parameters.minValue);else if(t===n.marks.length-1)e.setPosition(100,n.parameters.maxValue);else{var r=n.round(n.parameters.minValue+(n.parameters.maxValue-n.parameters.minValue)*t/(n.marks.length-1));if(n.parameters.isFloat&&(r=parseFloat(r.toFixed(2))),r===n.marks[t-1].value)n.removeMark(e.elem);else{var i=(r-n.parameters.minValue)/(n.parameters.maxValue-n.parameters.minValue);e.setPosition(100*i,r)}}}))},this.init=function(e){n.createMarks(),n.observers.addObserver(e)},this.handleScaleClick=function(e,t){"ClickOnMark"===e&&n.observers.notifyObservers("ClickOnScale",t)},this.createMarks=function(){for(var e=0;e<6;e+=1){var t=new r.default(n.parameters.isVertical,n.handleScaleClick);n.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/n.parameters.step),r=+(e-t*n.parameters.step).toFixed(2);return e<0?Math.abs(r)<n.parameters.step/2?t*n.parameters.step:(t-1)*n.parameters.step:r<n.parameters.step/2?t*n.parameters.step:(t+1)*n.parameters.step},this.parameters=e,this.marks=[],this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(0),s=function(e,t){var n=this;this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.setPosition=function(e,t){n.elem.innerHTML=t+"",n.value=t,n.isVertical?(n.elem.style.left="50%",n.elem.style.top=e+"%",n.elem.style.marginTop=-n.getDimension()/2+"px",n.elem.style.marginLeft="-45px"):(n.elem.style.top="50%",n.elem.style.left=e+"%",n.elem.style.marginLeft=-n.getDimension()/2+"px",n.elem.style.marginTop="15px")},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.update=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__mark_position_vertical"):n.elem.classList.remove("slider__mark_position_vertical")},this.init=function(e){n.elem.onclick=n.handleMarkClick,n.observers.addObserver(e)},this.handleMarkClick=function(){n.observers.notifyObservers("ClickOnMark",n.value)},this.elem=Object(r.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.update=function(e){t.isVertical=e},this.elem=Object(r.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e,t){var n=this;this.setCurrentValues=function(e,t){var r=e.currentMaxValue||0===e.currentMaxValue,i=e.currentMinValue||0===e.currentMinValue;r&&e.currentMaxValue!==n.currentValues.currentMaxValue&&(n.currentValues.currentMaxValue=e.currentMaxValue),i&&e.currentMinValue!==n.currentValues.currentMinValue&&(n.currentValues.currentMinValue=e.currentMinValue),"fromPanel"===t&&n.observers.notifyObservers("SendingCurrentValues",n.currentValues)},this.observeControllerFromModel=function(e,t){"UpdatingConfig"===e&&n.observers.notifyObservers("SendingCurrentValues",n.currentValues),"ChangingCurrentValueFromView"===e&&(n.setCurrentValues(t,"fromView"),n.observers.notifyObservers("SendingCurrentValuesForTracking",n.currentValues)),"ChangingCurrentValueFromPanel"===e&&n.setCurrentValues(t,"fromPanel"),"GettingValues"===e&&n.observers.notifyObservers("SendingCurrentValuesForTracking",n.currentValues)},this.currentValues=e,this.observers=new r.default,this.observers.addObserver(t)};t.default=i},function(e,t,n){"use strict";function r(e){e.keys().forEach(e)}n.r(t),n.d(t,"importAll",(function(){return r})),r(n(14)),r(n(18))},function(e,t,n){var r={"./Controller/Controller.ts":3,"./Model/Model.ts":12,"./View/View.ts":4,"./View/blocks/Bar/Bar.ts":6,"./View/blocks/Knob/Knob.ts":7,"./View/blocks/ProgressBar/ProgressBar.ts":11,"./View/blocks/Runner/Runner.ts":2,"./View/blocks/Scale/Mark/Mark.ts":10,"./View/blocks/Scale/Scale.ts":9,"./View/blocks/Tooltip/Tooltip.ts":8,"./View/blocks/Track/Track.ts":5,"./View/blocks/createElem/createElem.ts":1,"./makeObservableObject/MakeObservableObject.ts":0,"./slider.ts":15,"./style.scss":16,"./types.ts":17};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=14},function(e,t,n){"use strict";n.r(t);var r=n(3),i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},s={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1};!function(e){var t={init:function(t){if(!e(this).data("slider")){var n=i({},s),a=new r.default(e.extend(n,t),e(this));e(this).data("slider",a)}},update:function(t){e(this).data("slider").update(t)},renew:function(){return e(this).data("slider").renew()},setValues:function(t){e(this).data("slider").setValues(t)},inputsAttach:function(t){e(this).data("slider").observers.addObserver((function(e,n){"SendingCurrentValuesForTracking"===e&&(t.minValueInput.val(n.currentMinValue),t.maxValueInput.val(n.currentMaxValue)),"SendingConfig"===e&&(t.maxValue.val(n.maxValue),t.minValue.val(n.minValue),t.step.val(n.step))}))}};e.fn.omfgslider=function(n){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];return t[n]?t[n].apply(this,r):"object"!=typeof n&&n?(e.error("Метод "+n+" не найден в плагине jQuery.omfgslider"),null):t.init.apply(this,[n])}}(jQuery)},function(e,t,n){},function(e,t){},function(e,t,n){var r={"./blocks/Panel/panel.scss":19,"./index.scss":20};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=18},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=function(e,t){var n=this;this.init=function(e){var t=$(n.node).siblings(".js-slider"),r=n.node.find(".js-panel__current-minvalue"),i=n.node.find(".js-panel__current-maxvalue"),s=n.node.find(".js-panel__minValue"),a=n.node.find(".js-panel__maxValue"),o=n.node.find(".js-panel__step"),u=n.node.find(".js-panel__range"),l=n.node.find(".js-panel__orientation"),c=n.node.find(".js-panel__showing-labels");n.inputs={slider:t,currentMinValueInput:r,currentMaxValueInput:i,minValueInput:s,maxValueInput:a,stepInput:o,rangeInput:u,orientationInput:l,showingLabelsInput:c},t.omfgslider(e),t.omfgslider("inputsAttach",{minValueInput:r,maxValueInput:i,maxValue:a,minValue:s,step:o}),t.omfgslider("renew"),r.on("focusout",n.handleCurrentMinValueInputFocusout),i.on("focusout",n.handleCurrentMaxValueInputFocusout),s.on("focusout",n.handleMinValueInputFocusout),a.on("focusout",n.handleMaxValueInputFocusout),o.on("focusout",n.handleStepInputFocusout),u.on("change",n.handleRangeButtonChange),l.on("change",n.handleVerticalButtonChange),c.on("change",n.handleLabelButtonChange)},this.handleCurrentMinValueInputFocusout=function(){n.inputs.slider.omfgslider("setValues",{currentMinValue:parseFloat(n.inputs.currentMinValueInput.val())})},this.handleCurrentMaxValueInputFocusout=function(){n.inputs.slider.omfgslider("setValues",{currentMaxValue:parseFloat(n.inputs.currentMaxValueInput.val())})},this.handleMinValueInputFocusout=function(){n.inputs.slider.omfgslider("update",{minValue:parseFloat(n.inputs.minValueInput.val())})},this.handleMaxValueInputFocusout=function(){n.inputs.slider.omfgslider("update",{maxValue:parseFloat(n.inputs.maxValueInput.val())})},this.handleStepInputFocusout=function(){n.inputs.slider.omfgslider("update",{step:parseFloat(n.inputs.stepInput.val())})},this.handleRangeButtonChange=function(){n.inputs.slider.omfgslider("update",{isRange:"toggle"})},this.handleVerticalButtonChange=function(){n.inputs.slider.omfgslider("update",{isVertical:"toggle"})},this.handleLabelButtonChange=function(){n.inputs.slider.omfgslider("update",{showLabel:"toggle"})},this.node=$(e),this.init(t)};t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(13);Object(r.importAll)(n(23))},function(e,t,n){var r={"./blocks/Panel/Panel.ts":21,"./blocks/Panel/index.ts":24,"./favicon/android-chrome-192x192.png":25,"./favicon/android-chrome-256x256.png":26,"./favicon/apple-touch-icon.png":27,"./favicon/favicon-16x16.png":28,"./favicon/favicon-32x32.png":29,"./favicon/favicon.ico":30,"./favicon/mstile-150x150.png":31,"./favicon/safari-pinned-tab.svg":32,"./init.ts":22};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=23},function(e,t,n){"use strict";n.r(t);var r=n(21),i=[{minValue:0,maxValue:1e3,step:1,isVertical:!1,isRange:!1,showLabel:!0,isFloat:!1},{minValue:-1e3,maxValue:0,step:100,isVertical:!1,isRange:!0,showLabel:!0,isFloat:!1},{minValue:0,maxValue:1,step:.05,isVertical:!0,isRange:!1,showLabel:!0,isFloat:!0},{minValue:-3,maxValue:0,step:.1,isRange:!0,isVertical:!0,showLabel:!0,isFloat:!0}];$(".js-panel").each((function(e,t){new r.default(t,i[e])}))},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/android-chrome-192x192.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/android-chrome-256x256.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/apple-touch-icon.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon-16x16.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon-32x32.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon.ico"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/mstile-150x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/safari-pinned-tab.svg"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,