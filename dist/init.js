!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=22)}([function(e,t,n){"use strict";n.r(t);var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)r[i]=s[a];return r},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.forEach((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t+=1){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(e,t){r(this.observers).map((function(n){return n(e,t)}))},e}();t.default=i},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,n){"use strict";n.r(t),n.d(t,"defaultParameters",(function(){return r}));var r={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1}},function(e,t,n){"use strict";n.r(t);var r=n(8),i=n(9),s=n(0),a=function(e,t){var n=this;this.getPosition=function(){return n.knob.getPosition()},this.setPosition=function(e,t){n.tooltip.setPosition(e+n.knob.getWidth()/2,t),n.knob.setPosition(e)},this.update=function(e){n.knob.update(e),n.tooltip.update(e)},this.getWidth=function(){return n.knob.getWidth()},this.hideRunner=function(){n.knob.elem.style.display="none",n.tooltip.elem.style.display="none"},this.hideLabel=function(){n.tooltip.elem.style.display="none"},this.showLabel=function(){n.tooltip.elem.style.display="block"},this.showRunner=function(){n.knob.elem.style.display="block"},this.appendToNode=function(e){[n.knob.elem,n.tooltip.elem].forEach((function(t){e.appendChild(t),t.onmousedown=n.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",n.handleRunnerMouseMove),document.addEventListener("mouseup",n.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){n.observers.notifyObservers("MovingRunner",{event:e,runner:n})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",n.handleRunnerMouseUp),document.removeEventListener("mousemove",n.handleRunnerMouseMove)},this.isVertical=e,this.knob=new r.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(5),s=n(13),a=n(0),o=function(e,t){var n=this;void 0===e&&(e=r.defaultParameters),this.update=function(e){n.observers.notifyObservers("UpdatingConfig",e),n.observers.notifyObservers("GettingConfig")},this.setValues=function(e){n.observers.notifyObservers("ChangingCurrentValueFromPanel",e)},this.renew=function(){n.observers.notifyObservers("GettingConfig"),n.observers.notifyObservers("GettingValues")},this.init=function(e){n.observers.addObserver(n.view.observeControllerFromView),n.observers.addObserver(n.model.observeControllerFromModel),n.observers.notifyObservers("AppendingToNode",e.get(0))},this.handleViewChangingValue=function(e,t){"ChangingCurrentValueFromView"===e&&n.observers.notifyObservers("ChangingCurrentValueFromView",t),"SendingConfig"===e&&n.observers.notifyObservers("SendingConfig",t)},this.handleModelSendingValues=function(e,t){"SendingCurrentValues"===e&&(n.observers.notifyObservers("SendingCurrentValues",t),n.observers.notifyObservers("GettingValues")),"SendingCurrentValuesForTracking"===e&&n.observers.notifyObservers("SendingCurrentValuesForTracking",t)},this.view=new i.default(e,this.handleViewChangingValue),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.handleModelSendingValues),this.observers=new a.default,this.init(t)};t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(0),s=n(6),a=function(e,t){switch(t){case"step":return e.parameters.maxValue%1!=0||e.parameters.minValue%1!=0;case"maxValue":return e.parameters.step%1!=0||e.parameters.minValue%1!=0;case"minValue":return e.parameters.step%1!=0||e.parameters.maxValue%1!=0;default:return!1}},o=function(e,t){var n=this;void 0===e&&(e=r.defaultParameters),this.update=function(e){var t=n.validateConfig(e);n.parameters=t,n.observers.notifyObservers("UpdatingConfig",n.parameters)},this.handleTrackValueChanging=function(e,t){"ChangingCurrentValueFromTrack"===e&&n.observers.notifyObservers("ChangingCurrentValueFromView",t)},this.observeControllerFromView=function(e,t){"SendingCurrentValues"===e&&n.observers.notifyObservers("SendingCurrentValues",t),"UpdatingConfig"===e&&n.update(t),"GettingConfig"===e&&n.observers.notifyObservers("SendingConfig",n.parameters),"AppendingToNode"===e&&n.observers.notifyObservers("AppendingToNode",t)},this.init=function(e){n.observers.addObserver(e),n.observers.addObserver(n.track.observeViewFromTrack)},this.validateConfig=function(e){var t=Object.keys(e)[0],r=n.parameters;switch(t){case"step":r.step=n.checkStep(e.step);break;case"maxValue":r.maxValue=n.checkMaxValue(e.maxValue);break;case"minValue":r.minValue=n.checkMinValue(e.minValue);break;case"isRange":"toggle"===e.isRange&&(!0===n.parameters.isRange?r.isRange=!1:r.isRange=!0);break;case"isVertical":"toggle"===e.isVertical&&(!0===n.parameters.isVertical?r.isVertical=!1:r.isVertical=!0);break;case"showLabel":"toggle"===e.showLabel&&(!0===n.parameters.showLabel?r.showLabel=!1:r.showLabel=!0)}return r},this.checkStep=function(e){return!e||e>(n.parameters.maxValue-n.parameters.minValue)/2?n.parameters.step:(e%1!=0?n.parameters.isFloat=!0:a(n,"step")||(n.parameters.isFloat=!1),e)},this.checkMaxValue=function(e){return Number.isNaN(e)||e<=n.parameters.minValue?n.parameters.maxValue:(e%1!=0?n.parameters.isFloat=!0:a(n,"maxValue")||(n.parameters.isFloat=!1),e)},this.checkMinValue=function(e){return Number.isNaN(e)||e>=n.parameters.maxValue?n.parameters.minValue:(e%1!=0?n.parameters.isFloat=!0:a(n,"minValue")||(n.parameters.isFloat=!1),e)},this.observers=new i.default,this.track=new s.default(e,this.handleTrackValueChanging),this.parameters=e,this.init(t)};t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(7),i=n(3),s=n(10),a=n(12),o=n(0),u=function(){function e(e,t){var n=this;this.update=function(e){n.parameters=e,n.bar.update(n.parameters.isVertical),n.progressBar.update(n.parameters.isVertical),n.runnerAdditional.update(n.parameters.isVertical),n.runnerMain.update(n.parameters.isVertical),n.scale.update(n.parameters),n.runnerAdditional.hideRunner(),n.parameters.showLabel?(n.runnerAdditional.showLabel(),n.runnerMain.showLabel()):(n.runnerAdditional.hideLabel(),n.runnerMain.hideLabel()),n.parameters.isRange?n.runnerAdditional.showRunner():n.runnerAdditional.hideRunner(),n.runnerAdditional.setPosition(-n.runnerAdditional.getWidth()/2,n.parameters.minValue),n.runnerMain.setPosition(n.bar.getDimension()-n.runnerMain.getWidth()/2,n.parameters.maxValue)},this.observeViewFromTrack=function(e,t){"SendingCurrentValues"===e&&n.renewRunners(t),"UpdatingConfig"===e&&n.update(t),"AppendingToNode"===e&&n.appendToNode(t)},this.appendToNode=function(e){e.appendChild(n.bar.elem).appendChild(n.progressBar.elem),n.runnerMain.appendToNode(e),n.runnerAdditional.appendToNode(e),n.scale.marks.forEach((function(t){e.appendChild(t.elem)})),n.scale.moveMarks(),n.update(n.parameters),n.updateProgressBar()},this.convertOffsetToValue=function(e){return(e-n.parameters.minValue)*n.bar.getDimension()/(n.parameters.maxValue-n.parameters.minValue)-n.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=n.runnerMain.getPosition()-n.bar.getPosition()+n.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return n.parameters.isRange?n.runnerAdditional.getPosition()-n.bar.getPosition()+n.runnerMain.getWidth()/2:0},this.handleRunnerMove=function(e,t){var r=t.event,i=t.runner;"MovingRunner"===e&&n.moveRunner(n.processRunnerMouseEvent(r,i))},this.moveRunner=function(e){e.runner.setPosition(e.offset,e.value),e.runner===n.runnerAdditional&&n.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMinValue:e.value}),e.runner===n.runnerMain&&n.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMaxValue:e.value}),n.updateProgressBar()},this.processRunnerMouseEvent=function(e,t){var r=(n.parameters.isVertical?e.clientY:e.clientX)-n.bar.getPosition()-n.runnerAdditional.getWidth()/2;return n.processRunnerOffset(r,t)},this.processRunnerOffset=function(e,t){var r,i;return i=n.checkRunnerOffset(e,t),{runner:t,offset:i=(r=n.roundOffsetRunner(i))[0],value:r[1]}},this.checkRunnerOffset=function(e,t){var r=n.parameters.step*n.bar.getDimension()/(n.parameters.maxValue-n.parameters.minValue),i=r/1.5>n.runnerMain.getWidth()?r/1.5:n.runnerMain.getWidth(),s=e;return t===n.runnerAdditional?e>n.runnerMain.getPosition()-n.bar.getPosition()-i&&(s=n.runnerMain.getPosition()-n.bar.getPosition()-i):t===n.runnerMain&&e<n.runnerAdditional.getPosition()-n.bar.getPosition()+i&&(s=n.runnerAdditional.getPosition()-n.bar.getPosition()+i),s},this.roundOffsetRunner=function(e){var t=n.parameters.minValue+(e+n.runnerMain.getWidth()/2)*(n.parameters.maxValue-n.parameters.minValue)/n.bar.getDimension(),r=n.round(t,n.parameters.step);n.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=n.convertOffsetToValue(r);return i<-n.runnerMain.getWidth()/2&&(i=-n.runnerMain.getWidth()/2,r=n.parameters.minValue),i>n.bar.getDimension()-n.runnerMain.getWidth()/2&&(i=n.bar.getDimension()-n.runnerMain.getWidth()/2,r=n.parameters.maxValue),[i,r]},this.round=function(e,t){var r=Math.trunc(e/t),i=+(e-r*t).toFixed(2);return e<0?Math.abs(i)<t/2?r*t:(r-1)*t:e<=n.parameters.minValue?n.parameters.minValue:e>=n.parameters.maxValue?n.parameters.maxValue:i<t/2?r*t:(r+1)*t},this.handleScaleClick=function(e,t){if("ClickOnScale"===e){var r=n.convertOffsetToValue(t),i=void 0;i=n.parameters.isRange?n.checkRunnerCloser(r):n.runnerMain,n.moveRunner(n.processRunnerOffset(r,i))}},this.checkRunnerCloser=function(e){return Math.abs(e-n.getMainRunnerOffset())<Math.abs(e-n.getAdditionalRunnerOffset())?n.runnerMain:n.runnerAdditional},this.handleBarClick=function(e,t){if("ClickOnBar"===e){var r=(n.parameters.isVertical?t.clientY:t.clientX)-n.bar.getPosition()-n.runnerMain.getWidth()/2;n.moveRunner(n.processRunnerOffset(r,n.checkRunnerCloser(r)))}},this.updateProgressBar=function(){n.progressBar.update(n.parameters.isVertical),n.progressBar.setPosition(n.getAdditionalRunnerOffset()),n.progressBar.setDimension(n.getMainRunnerOffset()-n.getAdditionalRunnerOffset())},this.parameters=e,this.runnerMain=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.runnerAdditional=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.progressBar=new a.default(this.parameters.isVertical),this.bar=new r.default(this.parameters.isVertical,this.handleBarClick),this.scale=new s.default(this.parameters,this.handleScaleClick),this.observers=new o.default,this.observers.addObserver(t)}return e.prototype.renewRunners=function(e){this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMaxValue),this.runnerMain)),this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMinValue),this.runnerAdditional))},e}();t.default=u},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(0),s=function(e,t){var n=this;this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.update=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__bar_position_vertical"):n.elem.classList.remove("slider__bar_position_vertical")},this.init=function(e){n.elem.onclick=n.handleBarClick,n.observers.addObserver(e)},this.handleBarClick=function(e){n.observers.notifyObservers("ClickOnBar",e)},this.elem=Object(r.default)("slider__bar"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__knob_position_vertical"):t.elem.classList.remove("slider__knob_position_vertical")},this.elem=Object(r.default)("slider__knob"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,n){t.elem.innerHTML=n+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__tooltip_position_vertical"):t.elem.classList.remove("slider__tooltip_position_vertical")},this.elem=Object(r.default)("slider__tooltip"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(11),i=n(0),s=function(e,t){var n=this;this.update=function(e){n.parameters=e,n.moveMarks()},this.moveMarks=function(){n.marks.forEach((function(e,t){if(e.update(n.parameters.isVertical),0===t)e.setPosition(0,n.parameters.minValue);else if(t===n.marks.length-1)e.setPosition(100,n.parameters.maxValue);else{var r=n.round(n.parameters.minValue+(n.parameters.maxValue-n.parameters.minValue)*t/(n.marks.length-1));n.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=(r-n.parameters.minValue)/(n.parameters.maxValue-n.parameters.minValue);e.setPosition(100*i,r)}}))},this.init=function(e){n.moveMarks(),n.createMarks(),n.observers.addObserver(e)},this.handleScaleClick=function(e,t){"ClickOnMark"===e&&n.observers.notifyObservers("ClickOnScale",t)},this.createMarks=function(){for(var e=0;e<5;e+=1){var t=new r.default(n.parameters.isVertical,n.handleScaleClick);n.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/n.parameters.step),r=+(e-t*n.parameters.step).toFixed(2);return e<0?Math.abs(r)<n.parameters.step/2?t*n.parameters.step:(t-1)*n.parameters.step:r<n.parameters.step/2?t*n.parameters.step:(t+1)*n.parameters.step},this.parameters=e,this.marks=[],this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(0),s=function(e,t){var n=this;this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.setPosition=function(e,t){n.elem.innerHTML=t+"",n.value=t,n.isVertical?(n.elem.style.left="50%",n.elem.style.top=e+"%",n.elem.style.marginTop=-n.getDimension()/2+"px",n.elem.style.marginLeft="-45px"):(n.elem.style.top="50%",n.elem.style.left=e+"%",n.elem.style.marginLeft=-n.getDimension()/2+"px",n.elem.style.marginTop="15px")},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.update=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__mark_position_vertical"):n.elem.classList.remove("slider__mark_position_vertical")},this.init=function(e){n.elem.onclick=n.handleMarkClick,n.observers.addObserver(e)},this.handleMarkClick=function(){n.observers.notifyObservers("ClickOnMark",n.value)},this.elem=Object(r.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.update=function(e){t.isVertical=e},this.elem=Object(r.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e,t){var n=this;this.setCurrentValues=function(e,t){var r=e.currentMaxValue||0===e.currentMaxValue,i=e.currentMinValue||0===e.currentMinValue;r&&e.currentMaxValue!==n.currentValues.currentMaxValue&&(n.currentValues.currentMaxValue=e.currentMaxValue),i&&e.currentMinValue!==n.currentValues.currentMinValue&&(n.currentValues.currentMinValue=e.currentMinValue),"fromPanel"===t&&n.observers.notifyObservers("SendingCurrentValues",n.currentValues)},this.observeControllerFromModel=function(e,t){"UpdatingConfig"===e&&n.observers.notifyObservers("SendingCurrentValues",n.currentValues),"ChangingCurrentValueFromView"===e&&(n.setCurrentValues(t,"fromView"),n.observers.notifyObservers("SendingCurrentValuesForTracking",n.currentValues)),"ChangingCurrentValueFromPanel"===e&&n.setCurrentValues(t,"fromPanel"),"GettingValues"===e&&n.observers.notifyObservers("SendingCurrentValuesForTracking",n.currentValues)},this.currentValues=e,this.observers=new r.default,this.observers.addObserver(t)};t.default=i},function(e,t,n){"use strict";function r(e){e.keys().forEach(e)}n.r(t),n.d(t,"importAll",(function(){return r})),r(n(15)),r(n(18))},function(e,t,n){var r={"./Controller/Controller.ts":4,"./Model/Model.ts":13,"./View/View.ts":5,"./View/blocks/Bar/Bar.ts":7,"./View/blocks/Knob/Knob.ts":8,"./View/blocks/ProgressBar/ProgressBar.ts":12,"./View/blocks/Runner/Runner.ts":3,"./View/blocks/Scale/Mark/Mark.ts":11,"./View/blocks/Scale/Scale.ts":10,"./View/blocks/Tooltip/Tooltip.ts":9,"./View/blocks/Track/Track.ts":6,"./View/blocks/createElem/createElem.ts":1,"./makeObservableObject/MakeObservableObject.ts":0,"./slider.ts":16,"./style.scss":17,"./types.ts":2};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=15},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(4),s=function(){return(s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};!function(e){var t={init:function(t){if(!e(this).data("slider")){var n=s({},r.defaultParameters),a=new i.default(e.extend(n,t),e(this));e(this).data("slider",a)}},update:function(t){e(this).data("slider").update(t)},renew:function(){return e(this).data("slider").renew()},setValues:function(t){e(this).data("slider").setValues(t)},inputsAttach:function(t){e(this).data("slider").observers.addObserver((function(e,n){"SendingCurrentValuesForTracking"===e&&(t.minValueInput.val(n.currentMinValue),t.maxValueInput.val(n.currentMaxValue)),"SendingConfig"===e&&(t.maxValue.val(n.maxValue),t.minValue.val(n.minValue),t.step.val(n.step))}))}};e.fn.omfgslider=function(n){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];return t[n]?t[n].apply(this,r):"object"!=typeof n&&n?(e.error("Метод "+n+" не найден в плагине jQuery.omfgslider"),null):t.init.apply(this,[n])}}(jQuery)},function(e,t,n){},function(e,t,n){var r={"./blocks/Panel/panel.scss":19,"./index.scss":20};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=18},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=function(e,t){var n=this;this.init=function(e){var t=$(n.node).siblings(".js-slider"),r=n.node.find(".js-panel__current-minvalue"),i=n.node.find(".js-panel__current-maxvalue"),s=n.node.find(".js-panel__minValue"),a=n.node.find(".js-panel__maxValue"),o=n.node.find(".js-panel__step"),u=n.node.find(".js-panel__range"),l=n.node.find(".js-panel__orientation"),c=n.node.find(".js-panel__showing-labels");n.inputs={slider:t,currentMinValueInput:r,currentMaxValueInput:i,minValueInput:s,maxValueInput:a,stepInput:o,rangeInput:u,orientationInput:l,showingLabelsInput:c},t.omfgslider(e),t.omfgslider("inputsAttach",{minValueInput:r,maxValueInput:i,maxValue:a,minValue:s,step:o}),t.omfgslider("renew"),r.on("focusout",n.handleCurrentMinValueInputFocusout),i.on("focusout",n.handleCurrentMaxValueInputFocusout),s.on("focusout",n.handleMinValueInputFocusout),a.on("focusout",n.handleMaxValueInputFocusout),o.on("focusout",n.handleStepInputFocusout),u.on("change",n.handleRangeButtonChange),l.on("change",n.handleVerticalButtonChange),c.on("change",n.handleLabelButtonChange)},this.handleCurrentMinValueInputFocusout=function(){n.inputs.slider.omfgslider("setValues",{currentMinValue:parseFloat(n.inputs.currentMinValueInput.val())})},this.handleCurrentMaxValueInputFocusout=function(){n.inputs.slider.omfgslider("setValues",{currentMaxValue:parseFloat(n.inputs.currentMaxValueInput.val())})},this.handleMinValueInputFocusout=function(){n.inputs.slider.omfgslider("update",{minValue:parseFloat(n.inputs.minValueInput.val())})},this.handleMaxValueInputFocusout=function(){n.inputs.slider.omfgslider("update",{maxValue:parseFloat(n.inputs.maxValueInput.val())})},this.handleStepInputFocusout=function(){n.inputs.slider.omfgslider("update",{step:parseFloat(n.inputs.stepInput.val())})},this.handleRangeButtonChange=function(){n.inputs.slider.omfgslider("update",{isRange:"toggle"})},this.handleVerticalButtonChange=function(){n.inputs.slider.omfgslider("update",{isVertical:"toggle"})},this.handleLabelButtonChange=function(){n.inputs.slider.omfgslider("update",{showLabel:"toggle"})},this.node=$(e),this.init(t)};t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(14);Object(r.importAll)(n(23))},function(e,t,n){var r={"./blocks/Panel/Panel.ts":21,"./blocks/Panel/index.js":24,"./favicon/android-chrome-192x192.png":25,"./favicon/android-chrome-256x256.png":26,"./favicon/apple-touch-icon.png":27,"./favicon/favicon-16x16.png":28,"./favicon/favicon-32x32.png":29,"./favicon/favicon.ico":30,"./favicon/mstile-150x150.png":31,"./favicon/safari-pinned-tab.svg":32,"./init.ts":22};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=23},function(e,t,n){"use strict";n.r(t);var r=n(21);const i=[{showLabel:!0},{minValue:-1e3,maxValue:0,step:100,isRange:!0,showLabel:!0},{minValue:0,maxValue:1,step:.05,isVertical:!0,showLabel:!0,isFloat:!0},{minValue:-3,maxValue:0,step:.1,isRange:!0,isVertical:!0,showLabel:!0,isFloat:!0}];$(".js-panel").each((e,t)=>{new r.default(t,i[e])})},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/android-chrome-192x192.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/android-chrome-256x256.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/apple-touch-icon.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon-16x16.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon-32x32.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/favicon.ico"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/mstile-150x150.png"},function(e,t,n){"use strict";n.r(t),t.default=n.p+"favicon/safari-pinned-tab.svg"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL3R5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvUnVubmVyL1J1bm5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL0NvbnRyb2xsZXIvQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1RyYWNrL1RyYWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvQmFyL0Jhci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL0tub2IvS25vYi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1Rvb2x0aXAvVG9vbHRpcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1NjYWxlL1NjYWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvU2NhbGUvTWFyay9NYXJrLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvUHJvZ3Jlc3NCYXIvUHJvZ3Jlc3NCYXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9Nb2RlbC9Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL1xcLmQpXFwuKGpzfHRzfHNjc3MpJC8iLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9zbGlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8tcGFnZSBzeW5jIFxcLnNjc3MkLyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2Jsb2Nrcy9QYW5lbC9QYW5lbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2luaXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8tcGFnZSBzeW5jIFxcLihqc3x0c3xpY298cG5nfHN2ZykkLyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2Jsb2Nrcy9QYW5lbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2Zhdmljb24vYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8tcGFnZS9mYXZpY29uL2FuZHJvaWQtY2hyb21lLTI1NngyNTYucG5nIiwid2VicGFjazovLy8uL3NyYy9kZW1vLXBhZ2UvZmF2aWNvbi9hcHBsZS10b3VjaC1pY29uLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2Zhdmljb24vZmF2aWNvbi0xNngxNi5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8tcGFnZS9mYXZpY29uL2Zhdmljb24tMzJ4MzIucG5nIiwid2VicGFjazovLy8uL3NyYy9kZW1vLXBhZ2UvZmF2aWNvbi9mYXZpY29uLmljbyIsIndlYnBhY2s6Ly8vLi9zcmMvZGVtby1wYWdlL2Zhdmljb24vbXN0aWxlLTE1MHgxNTAucG5nIiwid2VicGFjazovLy8uL3NyYy9kZW1vLXBhZ2UvZmF2aWNvbi9zYWZhcmktcGlubmVkLXRhYi5zdmciXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ0aGlzIiwib2JzZXJ2ZXJzIiwiYWRkT2JzZXJ2ZXIiLCJmbiIsIkVycm9yIiwiZm9yRWFjaCIsIm9ic2VydmVyIiwicHVzaCIsInJlbW92ZU9ic2VydmVyIiwibGVuZ3RoIiwic3BsaWNlIiwibm90aWZ5T2JzZXJ2ZXJzIiwiZXZlbnROYW1lIiwiZGF0YSIsIm1hcCIsImNsYXNzTmFtZSIsImVsZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJvbmRyYWdzdGFydCIsImNsYXNzTGlzdCIsImFkZCIsImRlZmF1bHRQYXJhbWV0ZXJzIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInN0ZXAiLCJpc1JhbmdlIiwiaXNWZXJ0aWNhbCIsInNob3dMYWJlbCIsImlzRmxvYXQiLCJtb3ZlT2JzZXJ2ZXIiLCJnZXRQb3NpdGlvbiIsImtub2IiLCJzZXRQb3NpdGlvbiIsIm9mZnNldCIsInRvb2x0aXAiLCJnZXRXaWR0aCIsInVwZGF0ZSIsImhpZGVSdW5uZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJoaWRlTGFiZWwiLCJzaG93UnVubmVyIiwiYXBwZW5kVG9Ob2RlIiwiZW50cnkiLCJhcHBlbmRDaGlsZCIsIm9ubW91c2Vkb3duIiwiaGFuZGxlUnVubmVyTW91c2VEb3duIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVSdW5uZXJNb3VzZU1vdmUiLCJoYW5kbGVSdW5uZXJNb3VzZVVwIiwicnVubmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInBhcmFtZXRlcnMiLCJzZXRWYWx1ZXMiLCJjdXJyZW50VmFsdWVzIiwicmVuZXciLCJpbml0IiwidmlldyIsIm9ic2VydmVDb250cm9sbGVyRnJvbVZpZXciLCJtb2RlbCIsIm9ic2VydmVDb250cm9sbGVyRnJvbU1vZGVsIiwiaGFuZGxlVmlld0NoYW5naW5nVmFsdWUiLCJoYW5kbGVNb2RlbFNlbmRpbmdWYWx1ZXMiLCJjdXJyZW50TWluVmFsdWUiLCJjdXJyZW50TWF4VmFsdWUiLCJpc090aGVyc1ZhbHVlc0Zsb2F0IiwiaXRlbSIsInBhcmFtZXRlciIsImNoZWNrZWRQYXJhbWV0ZXJzIiwidmFsaWRhdGVDb25maWciLCJoYW5kbGVUcmFja1ZhbHVlQ2hhbmdpbmciLCJ0cmFjayIsIm9ic2VydmVWaWV3RnJvbVRyYWNrIiwia2V5cyIsImNoZWNrU3RlcCIsImNoZWNrTWF4VmFsdWUiLCJjaGVja01pblZhbHVlIiwiTnVtYmVyIiwiaXNOYU4iLCJiYXIiLCJwcm9ncmVzc0JhciIsInJ1bm5lckFkZGl0aW9uYWwiLCJydW5uZXJNYWluIiwic2NhbGUiLCJnZXREaW1lbnNpb24iLCJyZW5ld1J1bm5lcnMiLCJtYXJrcyIsIm1hcmsiLCJtb3ZlTWFya3MiLCJ1cGRhdGVQcm9ncmVzc0JhciIsImNvbnZlcnRPZmZzZXRUb1ZhbHVlIiwiZ2V0TWFpblJ1bm5lck9mZnNldCIsImdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQiLCJoYW5kbGVSdW5uZXJNb3ZlIiwibW92ZVJ1bm5lciIsInByb2Nlc3NSdW5uZXJNb3VzZUV2ZW50Iiwib2JqIiwiZXZlbnRNbSIsImNsaWVudFkiLCJjbGllbnRYIiwicHJvY2Vzc1J1bm5lck9mZnNldCIsInJvdW5kT2Zmc2V0IiwiY2hlY2tSdW5uZXJPZmZzZXQiLCJyb3VuZE9mZnNldFJ1bm5lciIsInN0ZXBXaWR0aCIsIm1pbk9mZnNldCIsIm5ld09mZnNldCIsImN1cnJlbnRPZmZzZXQiLCJjdXJyZW50VmFsdWUiLCJyb3VuZFZhbHVlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIndob2xlIiwiTWF0aCIsInRydW5jIiwicmVtaW5kZXIiLCJhYnMiLCJoYW5kbGVTY2FsZUNsaWNrIiwiY2hlY2tSdW5uZXJDbG9zZXIiLCJoYW5kbGVCYXJDbGljayIsInNldERpbWVuc2lvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsImxlZnQiLCJoZWlnaHQiLCJ3aWR0aCIsInJlbW92ZSIsIm9uY2xpY2siLCJpbm5lckhUTUwiLCJvcHRpb25zIiwiaW5kZXgiLCJjcmVhdGVNYXJrcyIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJoYW5kbGVNYXJrQ2xpY2siLCJkaW1lbnNpb24iLCJzZXRDdXJyZW50VmFsdWVzIiwic291cmNlT2ZDaGFuZ2luZyIsImlzQ3VycmVudE1heFZhbHVlUmVhbCIsImlzQ3VycmVudE1pblZhbHVlUmVhbCIsImltcG9ydEFsbCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwiaWQiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJlIiwiY29kZSIsInJlc29sdmUiLCIkIiwibWV0aG9kcyIsIm9wdCIsIm5ld0NvbmZpZyIsInNsaWRlciIsImV4dGVuZCIsImlucHV0c0F0dGFjaCIsIm1pblZhbHVlSW5wdXQiLCJ2YWwiLCJtYXhWYWx1ZUlucHV0Iiwib21mZ3NsaWRlciIsIm1ldGhvZCIsImFwcGx5IiwiYXJncyIsImVycm9yIiwialF1ZXJ5Iiwibm9kZSIsInNpYmxpbmdzIiwiY3VycmVudE1pblZhbHVlSW5wdXQiLCJmaW5kIiwiY3VycmVudE1heFZhbHVlSW5wdXQiLCJzdGVwSW5wdXQiLCJyYW5nZUlucHV0Iiwib3JpZW50YXRpb25JbnB1dCIsInNob3dpbmdMYWJlbHNJbnB1dCIsImlucHV0cyIsIm9uIiwiaGFuZGxlQ3VycmVudE1pblZhbHVlSW5wdXRGb2N1c291dCIsImhhbmRsZUN1cnJlbnRNYXhWYWx1ZUlucHV0Rm9jdXNvdXQiLCJoYW5kbGVNaW5WYWx1ZUlucHV0Rm9jdXNvdXQiLCJoYW5kbGVNYXhWYWx1ZUlucHV0Rm9jdXNvdXQiLCJoYW5kbGVTdGVwSW5wdXRGb2N1c291dCIsImhhbmRsZVJhbmdlQnV0dG9uQ2hhbmdlIiwiaGFuZGxlVmVydGljYWxCdXR0b25DaGFuZ2UiLCJoYW5kbGVMYWJlbEJ1dHRvbkNo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Q2IsQ0FDRUwsVUFBVyxJQUNYQyxTQUFVLEVBQ1ZDLEtBQU0sSUFDTkMsU0FBUyxFQUNURSxXQUFXLEdBRWIsQ0FDRUwsU0FBVSxFQUNWQyxTQUFVLEVBQ1ZDLEtBQU0sSUFDTkUsWUFBWSxFQUNaQyxXQUFXLEVBQ1hDLFNBQVMsR0FFWCxDQUNFTixVQUFXLEVBQ1hDLFNBQVUsRUFDVkMsS0FBTSxHQUNOQyxTQUFTLEVBQ1RDLFlBQVksRUFDWkMsV0FBVyxFQUNYQyxTQUFTLElBSWIySCxFQUFFLGFBQWFtQyxLQUFLLENBQUNyRCxFQUFPdEgsS0FDMUIsSUFBSSxVQUFNQSxFQUFNdUMsRUFBVytFLE8sNkJDakM3QixPQUFlLGNBQTBCLHNDLDZCQ0F6QyxPQUFlLGNBQTBCLHNDLDZCQ0F6QyxPQUFlLGNBQTBCLGdDLDZCQ0F6QyxPQUFlLGNBQTBCLDZCLDZCQ0F6QyxPQUFlLGNBQTBCLDZCLDZCQ0F6QyxPQUFlLGNBQTBCLHVCLDZCQ0F6QyxPQUFlLGNBQTBCLDhCLDZCQ0F6QyxPQUFlLGNBQTBCIiwiZmlsZSI6ImluaXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjIpO1xuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5cclxuY2xhc3MgTWFrZU9ic2VydmFibGVPYmplY3Qge1xyXG4gIG9ic2VydmVyczogQXJyYXk8dHlwZXMuRnVuY3Rpb25DYWxsYmFja0RhdGE+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgfVxyXG5cclxuICBhZGRPYnNlcnZlcihmbjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29ic2VydmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgaWYgKG9ic2VydmVyID09PSBmbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb2JzZXJ2ZXIgYWxyZWFkeSBpbiB0aGUgbGlzdCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goZm4pO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlT2JzZXJ2ZXIoZm46IHR5cGVzLk9ic2VydmVyRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgaWYgKG9ic2VydmVyID09PSBmbikge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgb2JzZXJ2ZXIgaW4gbGlzdCBvZiBvYnNlcnZlcnMnKTtcclxuICB9XHJcblxyXG4gIG5vdGlmeU9ic2VydmVycyhldmVudE5hbWU/OiBzdHJpbmcsIGRhdGE/OiBhbnkpOiB2b2lkIHtcclxuICAgIGNvbnN0IG9ic2VydmVyc1NuYXBzaG90ID0gWy4uLnRoaXMub2JzZXJ2ZXJzXTtcclxuICAgIG9ic2VydmVyc1NuYXBzaG90Lm1hcCgob2JzZXJ2ZXIpID0+IG9ic2VydmVyKGV2ZW50TmFtZSwgZGF0YSkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcbiIsImZ1bmN0aW9uIGNyZWF0ZUVsZW0oY2xhc3NOYW1lOiBzdHJpbmcpIDpIVE1MRWxlbWVudCB7XHJcbiAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGVsZW0ub25kcmFnc3RhcnQgPSAoKSA9PiBmYWxzZTtcclxuICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICByZXR1cm4gZWxlbTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRWxlbTtcclxuIiwiaW1wb3J0IFJ1bm5lciBmcm9tICcuL1ZpZXcvYmxvY2tzL1J1bm5lci9SdW5uZXInO1xyXG5cclxuZXhwb3J0IHR5cGUgRnVuY3Rpb25DYWxsYmFja0RhdGEgPSAoZGF0YTogYW55LCBldmVudE5hbWU/OiBzdHJpbmcpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgdHlwZSBPYnNlcnZlckZ1bmN0aW9uID0gKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhPzogYW55LCkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCB0eXBlIE9ic2VydmVyVGVzdFJlc3VsdCA9IHtcclxuICBldmVudE5hbWU6IHN0cmluZyxcclxuICBkYXRhPzogYW55LFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBjb25maWdVcGRhdGVEYXRhID0ge1xyXG4gIFtpbmRleDogc3RyaW5nXTogbnVtYmVyfHN0cmluZ3xib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBJbnB1dHNPYmplY3QgPSB7XHJcbiAgW2luZGV4OiBzdHJpbmddOiBKUXVlcnk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJ1bm5lck1vdmVEYXRhID0ge1xyXG4gIHJ1bm5lcjogUnVubmVyLFxyXG4gIG9mZnNldDogbnVtYmVyLFxyXG4gIHZhbHVlOiBudW1iZXIsXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEN1cnJlbnRWYWx1ZXMgPSB7XHJcbiAgY3VycmVudE1pblZhbHVlOiBudW1iZXIsXHJcbiAgY3VycmVudE1heFZhbHVlOiBudW1iZXIsXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJ1bm5lck9ic2VydmVyRGF0YSA9IHtcclxuICBldmVudDogTW91c2VFdmVudCxcclxuICBydW5uZXI6IFJ1bm5lcixcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUGFyYW1ldGVycyA9IHtcclxuICBtaW5WYWx1ZTogbnVtYmVyLFxyXG4gIG1heFZhbHVlOiBudW1iZXIsXHJcbiAgc3RlcDogbnVtYmVyLFxyXG4gIGlzUmFuZ2U6IGJvb2xlYW4sXHJcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbixcclxuICBzaG93TGFiZWw6IGJvb2xlYW4sXHJcbiAgaXNGbG9hdDogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSYXdQYXJhbWV0ZXJzID0ge1xyXG4gIG1pblZhbHVlOiBudW1iZXIsXHJcbiAgbWF4VmFsdWU6IG51bWJlcixcclxuICBzdGVwOiBudW1iZXIsXHJcbiAgaXNSYW5nZTogc3RyaW5nLFxyXG4gIGlzVmVydGljYWw6IHN0cmluZyxcclxuICBzaG93TGFiZWw6IHN0cmluZyxcclxuICBpc0Zsb2F0OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYXJhbWV0ZXJzID0ge1xyXG4gIG1pblZhbHVlOiAwLFxyXG4gIG1heFZhbHVlOiAxMDAwLFxyXG4gIHN0ZXA6IDEsXHJcbiAgaXNSYW5nZTogZmFsc2UsXHJcbiAgaXNWZXJ0aWNhbDogZmFsc2UsXHJcbiAgc2hvd0xhYmVsOiB0cnVlLFxyXG4gIGlzRmxvYXQ6IGZhbHNlXHJcbn07XHJcbiIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uLy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IEtub2IgZnJvbSAnLi4vS25vYi9Lbm9iJztcclxuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vVG9vbHRpcC9Ub29sdGlwJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIFJ1bm5lciB7XHJcbiAga25vYjogS25vYjtcclxuXHJcbiAgdG9vbHRpcDogVG9vbHRpcDtcclxuXHJcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbjtcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IoaXNWZXJ0aWNhbDogYm9vbGVhbiwgbW92ZU9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgdGhpcy5rbm9iID0gbmV3IEtub2IoaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChpc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihtb3ZlT2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9zaXRpb24gPSAoKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB0aGlzLmtub2IuZ2V0UG9zaXRpb24oKTtcclxuICB9XHJcblxyXG4gIHNldFBvc2l0aW9uID0gKG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnRvb2x0aXAuc2V0UG9zaXRpb24ob2Zmc2V0ICsgdGhpcy5rbm9iLmdldFdpZHRoKCkgLyAyLCB2YWx1ZSk7XHJcbiAgICB0aGlzLmtub2Iuc2V0UG9zaXRpb24ob2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSA9IChpc1ZlcnRpY2FsOiBib29sZWFuKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmtub2IudXBkYXRlKGlzVmVydGljYWwpO1xyXG4gICAgdGhpcy50b29sdGlwLnVwZGF0ZShpc1ZlcnRpY2FsKTtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5rbm9iLmdldFdpZHRoKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlUnVubmVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5rbm9iLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHRoaXMudG9vbHRpcC5lbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgfVxyXG5cclxuICBoaWRlTGFiZWwgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnRvb2x0aXAuZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2hvd0xhYmVsID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy50b29sdGlwLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgfVxyXG5cclxuICBzaG93UnVubmVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5rbm9iLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgfVxyXG5cclxuICBhcHBlbmRUb05vZGUgPSAoZW50cnk6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICBbdGhpcy5rbm9iLmVsZW0sIHRoaXMudG9vbHRpcC5lbGVtXS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGVsZW0pO1xyXG4gICAgICBlbGVtLm9ubW91c2Vkb3duID0gdGhpcy5oYW5kbGVSdW5uZXJNb3VzZURvd247IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVSdW5uZXJNb3VzZURvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZVJ1bm5lck1vdXNlTW92ZSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSdW5uZXJNb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlUnVubmVyTW91c2VNb3ZlID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ01vdmluZ1J1bm5lcicsIHsgZXZlbnQ6IGV2ZW50LCBydW5uZXI6IHRoaXMgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVJ1bm5lck1vdXNlVXAgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSdW5uZXJNb3VzZVVwKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlUnVubmVyTW91c2VNb3ZlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJ1bm5lcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgVmlldyBmcm9tICcuLi9WaWV3L1ZpZXcnO1xyXG5pbXBvcnQgTW9kZWwgZnJvbSAnLi4vTW9kZWwvTW9kZWwnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5cclxuY2xhc3MgQ29udHJvbGxlciB7XHJcbiAgcHJpdmF0ZSB2aWV3OiBWaWV3O1xyXG5cclxuICBwcml2YXRlIG1vZGVsOiBNb2RlbDtcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHR5cGVzLmRlZmF1bHRQYXJhbWV0ZXJzLCBlbnRyeTogSlF1ZXJ5KSB7XHJcbiAgICB0aGlzLnZpZXcgPSBuZXcgVmlldyhwYXJhbWV0ZXJzLCB0aGlzLmhhbmRsZVZpZXdDaGFuZ2luZ1ZhbHVlKTtcclxuICAgIHRoaXMubW9kZWwgPSBuZXcgTW9kZWwoe1xyXG4gICAgICBjdXJyZW50TWluVmFsdWU6IHBhcmFtZXRlcnMubWluVmFsdWUsXHJcbiAgICAgIGN1cnJlbnRNYXhWYWx1ZTogcGFyYW1ldGVycy5tYXhWYWx1ZVxyXG4gICAgfSwgdGhpcy5oYW5kbGVNb2RlbFNlbmRpbmdWYWx1ZXMpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChlbnRyeSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAocGFyYW1ldGVyczogdHlwZXMuUmF3UGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdVcGRhdGluZ0NvbmZpZycsIHBhcmFtZXRlcnMpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdHZXR0aW5nQ29uZmlnJyk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZXMgPSAoY3VycmVudFZhbHVlczogdHlwZXMuQ3VycmVudFZhbHVlcyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21QYW5lbCcsIGN1cnJlbnRWYWx1ZXMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZXcgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0dldHRpbmdDb25maWcnKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnR2V0dGluZ1ZhbHVlcycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKGVudHJ5OiBKUXVlcnkpOnZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy52aWV3Lm9ic2VydmVDb250cm9sbGVyRnJvbVZpZXcpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy5tb2RlbC5vYnNlcnZlQ29udHJvbGxlckZyb21Nb2RlbCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0FwcGVuZGluZ1RvTm9kZScsIGVudHJ5LmdldCgwKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVZpZXdDaGFuZ2luZ1ZhbHVlID0gKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3Jykge1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0NoYW5naW5nQ3VycmVudFZhbHVlRnJvbVZpZXcnLCBkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDb25maWcnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0NvbmZpZycsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVNb2RlbFNlbmRpbmdWYWx1ZXMgPSAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdTZW5kaW5nQ3VycmVudFZhbHVlcycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIGRhdGEpO1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0dldHRpbmdWYWx1ZXMnKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDdXJyZW50VmFsdWVzRm9yVHJhY2tpbmcnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5pbXBvcnQgVHJhY2sgZnJvbSAnLi9ibG9ja3MvVHJhY2svVHJhY2snO1xyXG5cclxuY29uc3QgaXNPdGhlcnNWYWx1ZXNGbG9hdCA9IChpdGVtOiBWaWV3LCBwYXJhbWV0ZXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIHN3aXRjaCAocGFyYW1ldGVyKSB7XHJcbiAgICBjYXNlICdzdGVwJzpcclxuICAgICAgcmV0dXJuIChpdGVtLnBhcmFtZXRlcnMubWF4VmFsdWUgJSAxICE9PSAwIHx8IGl0ZW0ucGFyYW1ldGVycy5taW5WYWx1ZSAlIDEgIT09IDApO1xyXG4gICAgY2FzZSAnbWF4VmFsdWUnOlxyXG4gICAgICByZXR1cm4gKGl0ZW0ucGFyYW1ldGVycy5zdGVwICUgMSAhPT0gMCB8fCBpdGVtLnBhcmFtZXRlcnMubWluVmFsdWUgJSAxICE9PSAwKTtcclxuICAgIGNhc2UgJ21pblZhbHVlJzpcclxuICAgICAgcmV0dXJuIChpdGVtLnBhcmFtZXRlcnMuc3RlcCAlIDEgIT09IDAgfHwgaXRlbS5wYXJhbWV0ZXJzLm1heFZhbHVlICUgMSAhPT0gMCk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuY2xhc3MgVmlldyB7XHJcbiAgcGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycztcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgcHJpdmF0ZSB0cmFjazogVHJhY2s7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB0eXBlcy5kZWZhdWx0UGFyYW1ldGVycywgb2JzZXJ2ZXI6IHR5cGVzLk9ic2VydmVyRnVuY3Rpb24pIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLnRyYWNrID0gbmV3IFRyYWNrKHBhcmFtZXRlcnMsIHRoaXMuaGFuZGxlVHJhY2tWYWx1ZUNoYW5naW5nKTtcclxuICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICB0aGlzLmluaXQob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKHBhcmFtZXRlcnM6IHR5cGVzLlJhd1BhcmFtZXRlcnMpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IGNoZWNrZWRQYXJhbWV0ZXJzID0gdGhpcy52YWxpZGF0ZUNvbmZpZyhwYXJhbWV0ZXJzKTtcclxuICAgIHRoaXMucGFyYW1ldGVycyA9IGNoZWNrZWRQYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdVcGRhdGluZ0NvbmZpZycsIHRoaXMucGFyYW1ldGVycyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVUcmFja1ZhbHVlQ2hhbmdpbmcgPSAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21UcmFjaycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3JywgZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlQ29udHJvbGxlckZyb21WaWV3ID0gKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdTZW5kaW5nQ3VycmVudFZhbHVlcycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIGRhdGEpO1xyXG4gICAgfSBpZiAoZXZlbnROYW1lID09PSAnVXBkYXRpbmdDb25maWcnKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlKGRhdGEpO1xyXG4gICAgfSBpZiAoZXZlbnROYW1lID09PSAnR2V0dGluZ0NvbmZpZycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ29uZmlnJywgdGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0FwcGVuZGluZ1RvTm9kZScpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdBcHBlbmRpbmdUb05vZGUnLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IChvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy50cmFjay5vYnNlcnZlVmlld0Zyb21UcmFjayk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlQ29uZmlnID0gKHBhcmFtZXRlcnM6IHR5cGVzLlJhd1BhcmFtZXRlcnMpOiB0eXBlcy5QYXJhbWV0ZXJzID0+IHtcclxuICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpWzBdO1xyXG4gICAgY29uc3QgY2hlY2tlZFBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICBjYXNlICdzdGVwJzpcclxuICAgICAgICBjaGVja2VkUGFyYW1ldGVycy5zdGVwID0gdGhpcy5jaGVja1N0ZXAocGFyYW1ldGVycy5zdGVwKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWF4VmFsdWUnOlxyXG4gICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLm1heFZhbHVlID0gdGhpcy5jaGVja01heFZhbHVlKHBhcmFtZXRlcnMubWF4VmFsdWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdtaW5WYWx1ZSc6XHJcbiAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMubWluVmFsdWUgPSB0aGlzLmNoZWNrTWluVmFsdWUocGFyYW1ldGVycy5taW5WYWx1ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2lzUmFuZ2UnOlxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmlzUmFuZ2UgPT09ICd0b2dnbGUnKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMuaXNSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMuaXNSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdpc1ZlcnRpY2FsJzpcclxuICAgICAgICBpZiAocGFyYW1ldGVycy5pc1ZlcnRpY2FsID09PSAndG9nZ2xlJykge1xyXG4gICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLmlzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLmlzVmVydGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc2hvd0xhYmVsJzpcclxuICAgICAgICBpZiAocGFyYW1ldGVycy5zaG93TGFiZWwgPT09ICd0b2dnbGUnKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnNob3dMYWJlbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjaGVja2VkUGFyYW1ldGVycy5zaG93TGFiZWwgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLnNob3dMYWJlbCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaGVja2VkUGFyYW1ldGVycztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tTdGVwID0gKHN0ZXA6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoIXN0ZXAgfHwgc3RlcCA+ICh0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUgLSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpIC8gMikge1xyXG4gICAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJzLnN0ZXA7XHJcbiAgICB9XHJcbiAgICBpZiAoc3RlcCAlIDEgIT09IDApIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmICghaXNPdGhlcnNWYWx1ZXNGbG9hdCh0aGlzLCAnc3RlcCcpKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0ZXA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTWF4VmFsdWUgPSAobWF4VmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1heFZhbHVlKSB8fCBtYXhWYWx1ZSA8PSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWF4VmFsdWUgJSAxICE9PSAwKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoIWlzT3RoZXJzVmFsdWVzRmxvYXQodGhpcywgJ21heFZhbHVlJykpIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWF4VmFsdWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTWluVmFsdWUgPSAobWluVmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1pblZhbHVlKSB8fCBtaW5WYWx1ZSA+PSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWluVmFsdWUgJSAxICE9PSAwKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoIWlzT3RoZXJzVmFsdWVzRmxvYXQodGhpcywgJ21pblZhbHVlJykpIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWluVmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBCYXIgZnJvbSAnLi4vQmFyL0Jhcic7XHJcbmltcG9ydCBSdW5uZXIgZnJvbSAnLi4vUnVubmVyL1J1bm5lcic7XHJcbmltcG9ydCBTY2FsZSBmcm9tICcuLi9TY2FsZS9TY2FsZSc7XHJcbmltcG9ydCBQcm9ncmVzc0JhciBmcm9tICcuLi9Qcm9ncmVzc0Jhci9Qcm9ncmVzc0Jhcic7XHJcbmltcG9ydCBNYWtlT2JzZXJ2YWJsZU9iamVjdCBmcm9tICcuLi8uLi8uLi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdCc7XHJcblxyXG5jbGFzcyBUcmFjayB7XHJcbiAgcGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycztcclxuXHJcbiAgcHJpdmF0ZSBydW5uZXJNYWluOiBSdW5uZXI7XHJcblxyXG4gIHByaXZhdGUgcnVubmVyQWRkaXRpb25hbDogUnVubmVyO1xyXG5cclxuICBwcml2YXRlIHByb2dyZXNzQmFyOiBQcm9ncmVzc0JhcjtcclxuXHJcbiAgcHJpdmF0ZSBiYXI6IEJhcjtcclxuXHJcbiAgcHJpdmF0ZSBzY2FsZTogU2NhbGU7XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IHR5cGVzLlBhcmFtZXRlcnMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5ydW5uZXJNYWluID0gbmV3IFJ1bm5lcih0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVSdW5uZXJNb3ZlKTtcclxuICAgIHRoaXMucnVubmVyQWRkaXRpb25hbCA9IG5ldyBSdW5uZXIodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwsIHRoaXMuaGFuZGxlUnVubmVyTW92ZSk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyID0gbmV3IFByb2dyZXNzQmFyKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMuYmFyID0gbmV3IEJhcih0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVCYXJDbGljayk7XHJcbiAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKHRoaXMucGFyYW1ldGVycywgdGhpcy5oYW5kbGVTY2FsZUNsaWNrKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAocGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcclxuICAgIHRoaXMuYmFyLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwudXBkYXRlKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMucnVubmVyTWFpbi51cGRhdGUodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwpO1xyXG4gICAgdGhpcy5zY2FsZS51cGRhdGUodGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgIHRoaXMucnVubmVyQWRkaXRpb25hbC5oaWRlUnVubmVyKCk7XHJcblxyXG4gICAgaWYgKHRoaXMucGFyYW1ldGVycy5zaG93TGFiZWwpIHtcclxuICAgICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNob3dMYWJlbCgpO1xyXG4gICAgICB0aGlzLnJ1bm5lck1haW4uc2hvd0xhYmVsKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuaGlkZUxhYmVsKCk7XHJcbiAgICAgIHRoaXMucnVubmVyTWFpbi5oaWRlTGFiZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UpIHtcclxuICAgICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNob3dSdW5uZXIoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucnVubmVyQWRkaXRpb25hbC5oaWRlUnVubmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNldFBvc2l0aW9uKFxyXG4gICAgICAtdGhpcy5ydW5uZXJBZGRpdGlvbmFsLmdldFdpZHRoKCkgLyAyLFxyXG4gICAgICB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWVcclxuICAgICk7XHJcbiAgICB0aGlzLnJ1bm5lck1haW4uc2V0UG9zaXRpb24oXHJcbiAgICAgIHRoaXMuYmFyLmdldERpbWVuc2lvbigpIC0gdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyLFxyXG4gICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWVcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlVmlld0Zyb21UcmFjayA9IChldmVudE5hbWU6IHN0cmluZywgZGF0YT86IGFueSk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDdXJyZW50VmFsdWVzJykge1xyXG4gICAgICB0aGlzLnJlbmV3UnVubmVycyhkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1VwZGF0aW5nQ29uZmlnJykge1xyXG4gICAgICB0aGlzLnVwZGF0ZShkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0FwcGVuZGluZ1RvTm9kZScpIHtcclxuICAgICAgdGhpcy5hcHBlbmRUb05vZGUoZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhcHBlbmRUb05vZGUgPSAoZW50cnk6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICBlbnRyeS5hcHBlbmRDaGlsZCh0aGlzLmJhci5lbGVtKS5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzQmFyLmVsZW0pO1xyXG4gICAgdGhpcy5ydW5uZXJNYWluLmFwcGVuZFRvTm9kZShlbnRyeSk7XHJcbiAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuYXBwZW5kVG9Ob2RlKGVudHJ5KTtcclxuXHJcbiAgICB0aGlzLnNjYWxlLm1hcmtzLmZvckVhY2goKG1hcmspID0+IHtcclxuICAgICAgZW50cnkuYXBwZW5kQ2hpbGQobWFyay5lbGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2NhbGUubW92ZU1hcmtzKCk7XHJcbiAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMpO1xyXG4gICAgdGhpcy51cGRhdGVQcm9ncmVzc0JhcigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5ld1J1bm5lcnMoY3VycmVudFZhbHVlczogdHlwZXMuQ3VycmVudFZhbHVlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5tb3ZlUnVubmVyKFxyXG4gICAgICB0aGlzLnByb2Nlc3NSdW5uZXJPZmZzZXQoXHJcbiAgICAgICAgdGhpcy5jb252ZXJ0T2Zmc2V0VG9WYWx1ZShjdXJyZW50VmFsdWVzLmN1cnJlbnRNYXhWYWx1ZSksXHJcbiAgICAgICAgdGhpcy5ydW5uZXJNYWluXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICB0aGlzLm1vdmVSdW5uZXIoXHJcbiAgICAgIHRoaXMucHJvY2Vzc1J1bm5lck9mZnNldChcclxuICAgICAgICB0aGlzLmNvbnZlcnRPZmZzZXRUb1ZhbHVlKGN1cnJlbnRWYWx1ZXMuY3VycmVudE1pblZhbHVlKSxcclxuICAgICAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWxcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydE9mZnNldFRvVmFsdWUgPSAodmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gKCgodmFsdWUgLSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpICogdGhpcy5iYXIuZ2V0RGltZW5zaW9uKCkpXHJcbiAgICAgIC8gKHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZSAtIHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZSlcclxuICAgICAgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRNYWluUnVubmVyT2Zmc2V0ID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnJ1bm5lck1haW4uZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKClcclxuICAgICAgKyB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICByZXR1cm4gb2Zmc2V0IDwgMCA/IDAgOiBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQgPSAoKTogbnVtYmVyID0+IHtcclxuICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuaXNSYW5nZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ydW5uZXJBZGRpdGlvbmFsLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgKyB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVJ1bm5lck1vdmUgPSAoZXZlbnROYW1lOiBzdHJpbmcsXHJcbiAgICB7IGV2ZW50LCBydW5uZXIgfTogdHlwZXMuUnVubmVyT2JzZXJ2ZXJEYXRhKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoZXZlbnROYW1lID09PSAnTW92aW5nUnVubmVyJykge1xyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyTW91c2VFdmVudChldmVudCwgcnVubmVyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1vdmVSdW5uZXIgPSAob2JqOiB0eXBlcy5SdW5uZXJNb3ZlRGF0YSk6IHZvaWQgPT4ge1xyXG4gICAgb2JqLnJ1bm5lci5zZXRQb3NpdGlvbihvYmoub2Zmc2V0LCBvYmoudmFsdWUpO1xyXG5cclxuICAgIGlmIChvYmoucnVubmVyID09PSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21UcmFjaycsIHsgY3VycmVudE1pblZhbHVlOiBvYmoudmFsdWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9iai5ydW5uZXIgPT09IHRoaXMucnVubmVyTWFpbikge1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0NoYW5naW5nQ3VycmVudFZhbHVlRnJvbVRyYWNrJywgeyBjdXJyZW50TWF4VmFsdWU6IG9iai52YWx1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVwZGF0ZVByb2dyZXNzQmFyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NSdW5uZXJNb3VzZUV2ZW50ID0gKGV2ZW50TW06IE1vdXNlRXZlbnQsIHJ1bm5lcjogUnVubmVyKTogdHlwZXMuUnVubmVyTW92ZURhdGEgPT4ge1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsID8gZXZlbnRNbS5jbGllbnRZIDogZXZlbnRNbS5jbGllbnRYO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29vcmRpbmF0ZSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgLSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0V2lkdGgoKSAvIDI7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc1J1bm5lck9mZnNldChvZmZzZXQsIHJ1bm5lcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NSdW5uZXJPZmZzZXQgPSAob2Zmc2V0OiBudW1iZXIsIHJ1bm5lcjogUnVubmVyKTogdHlwZXMuUnVubmVyTW92ZURhdGEgPT4ge1xyXG4gICAgbGV0IHJvdW5kVmFsdWUgPSAwO1xyXG4gICAgbGV0IHJvdW5kT2Zmc2V0O1xyXG4gICAgcm91bmRPZmZzZXQgPSB0aGlzLmNoZWNrUnVubmVyT2Zmc2V0KG9mZnNldCwgcnVubmVyKTtcclxuICAgIFtyb3VuZE9mZnNldCwgcm91bmRWYWx1ZV0gPSB0aGlzLnJvdW5kT2Zmc2V0UnVubmVyKHJvdW5kT2Zmc2V0KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBydW5uZXI6IHJ1bm5lcixcclxuICAgICAgb2Zmc2V0OiByb3VuZE9mZnNldCxcclxuICAgICAgdmFsdWU6IHJvdW5kVmFsdWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrUnVubmVyT2Zmc2V0ID0gKG9mZnNldDogbnVtYmVyLCBydW5uZXI6IFJ1bm5lcik6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCBzdGVwV2lkdGggPSAodGhpcy5wYXJhbWV0ZXJzLnN0ZXAgKiB0aGlzLmJhci5nZXREaW1lbnNpb24oKSlcclxuICAgICAgLyAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKTtcclxuICAgIGNvbnN0IG1pbk9mZnNldCA9IHN0ZXBXaWR0aCAvIDEuNSA+IHRoaXMucnVubmVyTWFpbi5nZXRXaWR0aCgpXHJcbiAgICAgID8gc3RlcFdpZHRoIC8gMS41XHJcbiAgICAgIDogdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCk7XHJcbiAgICBsZXQgbmV3T2Zmc2V0ID0gb2Zmc2V0O1xyXG5cclxuICAgIGlmIChydW5uZXIgPT09IHRoaXMucnVubmVyQWRkaXRpb25hbCkge1xyXG4gICAgICBpZiAob2Zmc2V0ID4gdGhpcy5ydW5uZXJNYWluLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpIC0gbWluT2Zmc2V0KSB7XHJcbiAgICAgICAgbmV3T2Zmc2V0ID0gdGhpcy5ydW5uZXJNYWluLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpIC0gbWluT2Zmc2V0O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJ1bm5lciA9PT0gdGhpcy5ydW5uZXJNYWluKSB7XHJcbiAgICAgIGlmIChvZmZzZXQgPCB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgKyBtaW5PZmZzZXQpIHtcclxuICAgICAgICBuZXdPZmZzZXQgPSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgKyBtaW5PZmZzZXQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3T2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByb3VuZE9mZnNldFJ1bm5lciA9IChjdXJyZW50T2Zmc2V0OiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZVxyXG4gICAgICArICgoY3VycmVudE9mZnNldCArIHRoaXMucnVubmVyTWFpbi5nZXRXaWR0aCgpIC8gMilcclxuICAgICAgKiAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSlcclxuICAgICAgLyB0aGlzLmJhci5nZXREaW1lbnNpb24oKTtcclxuICAgIGxldCByb3VuZFZhbHVlID0gdGhpcy5yb3VuZChjdXJyZW50VmFsdWUsIHRoaXMucGFyYW1ldGVycy5zdGVwKTtcclxuXHJcbiAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQpIHtcclxuICAgICAgcm91bmRWYWx1ZSA9IHBhcnNlRmxvYXQocm91bmRWYWx1ZS50b0ZpeGVkKDIpKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcm91bmRPZmZzZXQgPSB0aGlzLmNvbnZlcnRPZmZzZXRUb1ZhbHVlKHJvdW5kVmFsdWUpO1xyXG5cclxuICAgIGlmIChyb3VuZE9mZnNldCA8IC10aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDIpIHtcclxuICAgICAgcm91bmRPZmZzZXQgPSAtdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyO1xyXG4gICAgICByb3VuZFZhbHVlID0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyb3VuZE9mZnNldCA+IHRoaXMuYmFyLmdldERpbWVuc2lvbigpIC0gdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyKSB7XHJcbiAgICAgIHJvdW5kT2Zmc2V0ID0gdGhpcy5iYXIuZ2V0RGltZW5zaW9uKCkgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICAgIHJvdW5kVmFsdWUgPSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtyb3VuZE9mZnNldCwgcm91bmRWYWx1ZV07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdW5kID0gKHZhbHVlOiBudW1iZXIsIHN0ZXA6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCB3aG9sZSA9IE1hdGgudHJ1bmModmFsdWUgLyBzdGVwKTtcclxuICAgIGNvbnN0IHJlbWluZGVyID0gKyh2YWx1ZSAtIHdob2xlICogc3RlcCkudG9GaXhlZCgyKTtcclxuXHJcbiAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFicyhyZW1pbmRlcikgPCBzdGVwIC8gMiA/IHdob2xlICogc3RlcCA6ICh3aG9sZSAtIDEpICogc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsdWUgPD0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWU7XHJcbiAgICB9IGlmICh2YWx1ZSA+PSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVtaW5kZXIgPCBzdGVwIC8gMiA/IHdob2xlICogc3RlcCA6ICh3aG9sZSArIDEpICogc3RlcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlU2NhbGVDbGljayA9IChldmVudE5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ0NsaWNrT25TY2FsZScpIHtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jb252ZXJ0T2Zmc2V0VG9WYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIGxldCBydW5uZXI7XHJcblxyXG4gICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UpIHtcclxuICAgICAgICBydW5uZXIgPSB0aGlzLmNoZWNrUnVubmVyQ2xvc2VyKG9mZnNldCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcnVubmVyID0gdGhpcy5ydW5uZXJNYWluO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyT2Zmc2V0KG9mZnNldCwgcnVubmVyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrUnVubmVyQ2xvc2VyID0gKG9mZnNldDogbnVtYmVyKTogUnVubmVyID0+IHtcclxuICAgIGlmIChNYXRoLmFicyhvZmZzZXQgLSB0aGlzLmdldE1haW5SdW5uZXJPZmZzZXQoKSlcclxuICAgICAgPCBNYXRoLmFicyhvZmZzZXQgLSB0aGlzLmdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQoKSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucnVubmVyTWFpbjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ydW5uZXJBZGRpdGlvbmFsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVCYXJDbGljayA9IChldmVudE5hbWU6IHN0cmluZywgZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDbGlja09uQmFyJykge1xyXG4gICAgICBjb25zdCBjb29yZGluYXRlID0gdGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwgPyBldmVudC5jbGllbnRZIDogZXZlbnQuY2xpZW50WDtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gY29vcmRpbmF0ZSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcblxyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyT2Zmc2V0KG9mZnNldCwgdGhpcy5jaGVja1J1bm5lckNsb3NlcihvZmZzZXQpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVByb2dyZXNzQmFyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wcm9ncmVzc0Jhci51cGRhdGUodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwpO1xyXG4gICAgdGhpcy5wcm9ncmVzc0Jhci5zZXRQb3NpdGlvbih0aGlzLmdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQoKSk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyLnNldERpbWVuc2lvbih0aGlzLmdldE1haW5SdW5uZXJPZmZzZXQoKSAtIHRoaXMuZ2V0QWRkaXRpb25hbFJ1bm5lck9mZnNldCgpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYWNrO1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBjcmVhdGVFbGVtIGZyb20gJy4uL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbSc7XHJcbmltcG9ydCBNYWtlT2JzZXJ2YWJsZU9iamVjdCBmcm9tICcuLi8uLi8uLi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdCc7XHJcblxyXG5jbGFzcyBCYXIge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICBvYnNlcnZlcnM6IE1ha2VPYnNlcnZhYmxlT2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuLCBvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbikge1xyXG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbSgnc2xpZGVyX19iYXInKTtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgICB0aGlzLm9ic2VydmVycyA9IG5ldyBNYWtlT2JzZXJ2YWJsZU9iamVjdCgpO1xyXG4gICAgdGhpcy5pbml0KG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICB9XHJcblxyXG4gIGdldERpbWVuc2lvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19iYXJfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2Jhcl9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKG9ic2VydmVyOiB0eXBlcy5GdW5jdGlvbkNhbGxiYWNrRGF0YSk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5lbGVtLm9uY2xpY2sgPSB0aGlzLmhhbmRsZUJhckNsaWNrO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVCYXJDbGljayA9IChldmVudDogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDbGlja09uQmFyJywgZXZlbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFyO1xyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbSBmcm9tICcuLi9jcmVhdGVFbGVtL2NyZWF0ZUVsZW0nO1xyXG5cclxuY2xhc3MgS25vYiB7XHJcbiAgZWxlbTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGlzVmVydGljYWw6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlzVmVydGljYWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW0oJ3NsaWRlcl9fa25vYicpO1xyXG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9zaXRpb24gPSAoKTogbnVtYmVyID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG4gIH1cclxuXHJcbiAgc2V0UG9zaXRpb24gPSAob2Zmc2V0OiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmxlZnQgPSAnNTAlJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9IG9mZnNldCArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gJzUwJSc7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5sZWZ0ID0gb2Zmc2V0ICsgJ3B4JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSA9IChpc1ZlcnRpY2FsOiBib29sZWFuKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG5cclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fa25vYl9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlcl9fa25vYl9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgS25vYjtcclxuIiwiaW1wb3J0IGNyZWF0ZUVsZW0gZnJvbSAnLi4vY3JlYXRlRWxlbS9jcmVhdGVFbGVtJztcclxuXHJcbmNsYXNzIFRvb2x0aXAge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtKCdzbGlkZXJfX3Rvb2x0aXAnKTtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgfVxyXG5cclxuICBzZXRQb3NpdGlvbiA9IChvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHZhbHVlICsgJyc7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gb2Zmc2V0IC0gdGhpcy5nZXREaW1lbnNpb24oKSAvIDIgKyAncHgnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9IG9mZnNldCAtIHRoaXMuZ2V0RGltZW5zaW9uKCkgLyAyICsgJ3B4JztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERpbWVuc2lvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX190b29sdGlwX3Bvc2l0aW9uX3ZlcnRpY2FsJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX190b29sdGlwX3Bvc2l0aW9uX3ZlcnRpY2FsJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBNYXJrIGZyb20gJy4vTWFyay9NYXJrJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIFNjYWxlIHtcclxuICBwYXJhbWV0ZXJzOiB0eXBlcy5QYXJhbWV0ZXJzO1xyXG5cclxuICBtYXJrczogQXJyYXk8TWFyaz47XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IHR5cGVzLlBhcmFtZXRlcnMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5tYXJrcyA9IFtdO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAob3B0aW9uczogdHlwZXMuUGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gb3B0aW9ucztcclxuICAgIHRoaXMubW92ZU1hcmtzKCk7XHJcbiAgfVxyXG5cclxuICBtb3ZlTWFya3MgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm1hcmtzLmZvckVhY2goKG1hcmssIGluZGV4KSA9PiB7XHJcbiAgICAgIG1hcmsudXBkYXRlKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgbWFyay5zZXRQb3NpdGlvbigwLCB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSB0aGlzLm1hcmtzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBtYXJrLnNldFBvc2l0aW9uKDEwMCwgdGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcm91bmRWYWx1ZSA9IHRoaXMucm91bmQodGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlXHJcbiAgICAgICAgICArICgodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSAqIGluZGV4KVxyXG4gICAgICAgICAgLyAodGhpcy5tYXJrcy5sZW5ndGggLSAxKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuaXNGbG9hdCkge1xyXG4gICAgICAgICAgcm91bmRWYWx1ZSA9IHBhcnNlRmxvYXQocm91bmRWYWx1ZS50b0ZpeGVkKDIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChyb3VuZFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKVxyXG4gICAgICAgICAgLyAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKTtcclxuICAgICAgICBtYXJrLnNldFBvc2l0aW9uKG9mZnNldCAqIDEwMCwgcm91bmRWYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm1vdmVNYXJrcygpO1xyXG4gICAgdGhpcy5jcmVhdGVNYXJrcygpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVTY2FsZUNsaWNrID0gKGV2ZW50TmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoZXZlbnROYW1lID09PSAnQ2xpY2tPbk1hcmsnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnQ2xpY2tPblNjYWxlJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNYXJrcyA9ICgpOiB2b2lkID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IG1hcmsgPSBuZXcgTWFyayh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVTY2FsZUNsaWNrKTtcclxuICAgICAgdGhpcy5tYXJrcy5wdXNoKG1hcmspO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByb3VuZCA9ICh2YWx1ZTogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICAgIGNvbnN0IHdob2xlID0gTWF0aC50cnVuYyh2YWx1ZSAvIHRoaXMucGFyYW1ldGVycy5zdGVwKTtcclxuXHJcbiAgICBjb25zdCByZW1pbmRlciA9ICsodmFsdWUgLSB3aG9sZSAqIHRoaXMucGFyYW1ldGVycy5zdGVwKS50b0ZpeGVkKDIpO1xyXG4gICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnMocmVtaW5kZXIpIDwgdGhpcy5wYXJhbWV0ZXJzLnN0ZXAgLyAyXHJcbiAgICAgICAgPyB3aG9sZSAqIHRoaXMucGFyYW1ldGVycy5zdGVwXHJcbiAgICAgICAgOiAod2hvbGUgLSAxKSAqIHRoaXMucGFyYW1ldGVycy5zdGVwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZW1pbmRlciA8IHRoaXMucGFyYW1ldGVycy5zdGVwIC8gMlxyXG4gICAgICA/IHdob2xlICogdGhpcy5wYXJhbWV0ZXJzLnN0ZXBcclxuICAgICAgOiAod2hvbGUgKyAxKSAqIHRoaXMucGFyYW1ldGVycy5zdGVwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2NhbGU7XHJcbiIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW0gZnJvbSAnLi4vLi4vY3JlYXRlRWxlbS9jcmVhdGVFbGVtJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIE1hcmsge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICBvYnNlcnZlcnM6IE1ha2VPYnNlcnZhYmxlT2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuLCBvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbikge1xyXG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbSgnc2xpZGVyX19tYXJrJyk7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgfVxyXG5cclxuICBzZXRQb3NpdGlvbiA9IChvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHZhbHVlICsgJyc7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gb2Zmc2V0ICsgJyUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubWFyZ2luVG9wID0gLXRoaXMuZ2V0RGltZW5zaW9uKCkgLyAyICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLm1hcmdpbkxlZnQgPSAnLTQ1cHgnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9IG9mZnNldCArICclJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLm1hcmdpbkxlZnQgPSAtdGhpcy5nZXREaW1lbnNpb24oKSAvIDIgKyAncHgnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubWFyZ2luVG9wID0gJzE1cHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGltZW5zaW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAoaXNWZXJ0aWNhbDogYm9vbGVhbik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuXHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX21hcmtfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX21hcmtfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IChvYnNlcnZlcjogdHlwZXMuRnVuY3Rpb25DYWxsYmFja0RhdGEpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuZWxlbS5vbmNsaWNrID0gdGhpcy5oYW5kbGVNYXJrQ2xpY2s7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZU1hcmtDbGljayA9ICgpOiB2b2lkID0+IHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnQ2xpY2tPbk1hcmsnLCB0aGlzLnZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hcms7XHJcbiIsImltcG9ydCBjcmVhdGVFbGVtIGZyb20gJy4uL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbSc7XHJcblxyXG5jbGFzcyBQcm9ncmVzc0JhciB7XHJcbiAgZWxlbTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGlzVmVydGljYWw6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlzVmVydGljYWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW0oJ3NsaWRlcl9fcHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gIH1cclxuXHJcbiAgc2V0UG9zaXRpb24gPSAob2Zmc2V0OiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9IG9mZnNldCArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gJzAnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9IG9mZnNldCArICdweCc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXREaW1lbnNpb24gPSAoZGltZW5zaW9uOiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmhlaWdodCA9IGRpbWVuc2lvbiArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUud2lkdGggPSBkaW1lbnNpb24gKyAncHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc0JhcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5cclxuY2xhc3MgTW9kZWwge1xyXG4gIGN1cnJlbnRWYWx1ZXM6IHR5cGVzLkN1cnJlbnRWYWx1ZXM7XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGN1cnJlbnRWYWx1ZXM6IHR5cGVzLkN1cnJlbnRWYWx1ZXMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZXMgPSBjdXJyZW50VmFsdWVzO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLmFkZE9ic2VydmVyKG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIHNldEN1cnJlbnRWYWx1ZXMgPSAoZGF0YTogdHlwZXMuQ3VycmVudFZhbHVlcywgc291cmNlT2ZDaGFuZ2luZz86IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgaXNDdXJyZW50TWF4VmFsdWVSZWFsID0gZGF0YS5jdXJyZW50TWF4VmFsdWUgfHwgZGF0YS5jdXJyZW50TWF4VmFsdWUgPT09IDA7XHJcbiAgICBjb25zdCBpc0N1cnJlbnRNaW5WYWx1ZVJlYWwgPSBkYXRhLmN1cnJlbnRNaW5WYWx1ZSB8fCBkYXRhLmN1cnJlbnRNaW5WYWx1ZSA9PT0gMDtcclxuICAgIGlmIChpc0N1cnJlbnRNYXhWYWx1ZVJlYWwgJiYgZGF0YS5jdXJyZW50TWF4VmFsdWUgIT09IHRoaXMuY3VycmVudFZhbHVlcy5jdXJyZW50TWF4VmFsdWUpIHtcclxuICAgICAgdGhpcy5jdXJyZW50VmFsdWVzLmN1cnJlbnRNYXhWYWx1ZSA9IGRhdGEuY3VycmVudE1heFZhbHVlO1xyXG4gICAgfSBpZiAoaXNDdXJyZW50TWluVmFsdWVSZWFsICYmIGRhdGEuY3VycmVudE1pblZhbHVlICE9PSB0aGlzLmN1cnJlbnRWYWx1ZXMuY3VycmVudE1pblZhbHVlKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFZhbHVlcy5jdXJyZW50TWluVmFsdWUgPSBkYXRhLmN1cnJlbnRNaW5WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc291cmNlT2ZDaGFuZ2luZyA9PT0gJ2Zyb21QYW5lbCcpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlQ29udHJvbGxlckZyb21Nb2RlbCA9IChldmVudE5hbWU6IHN0cmluZywgZGF0YT86IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdVcGRhdGluZ0NvbmZpZycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9IGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3Jykge1xyXG4gICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZXMoZGF0YSwgJ2Zyb21WaWV3Jyk7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9IGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21QYW5lbCcpIHtcclxuICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWVzKGRhdGEsICdmcm9tUGFuZWwnKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0dldHRpbmdWYWx1ZXMnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2RlbDtcclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGltcG9ydEFsbChyOiBfX1dlYnBhY2tNb2R1bGVBcGkuUmVxdWlyZUNvbnRleHQpOiB2b2lkIHtcclxuICByLmtleXMoKS5mb3JFYWNoKHIpO1xyXG59XHJcblxyXG5pbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuL3BsdWdpbicsIHRydWUsIC8oPzwhXFwuZClcXC4oanN8dHN8c2NzcykkL2kpKTtcclxuaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi9kZW1vLXBhZ2UnLCB0cnVlLCAvXFwuc2NzcyQvaSkpO1xyXG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vQ29udHJvbGxlci9Db250cm9sbGVyLnRzXCI6IDQsXG5cdFwiLi9Nb2RlbC9Nb2RlbC50c1wiOiAxMyxcblx0XCIuL1ZpZXcvVmlldy50c1wiOiA1LFxuXHRcIi4vVmlldy9ibG9ja3MvQmFyL0Jhci50c1wiOiA3LFxuXHRcIi4vVmlldy9ibG9ja3MvS25vYi9Lbm9iLnRzXCI6IDgsXG5cdFwiLi9WaWV3L2Jsb2Nrcy9Qcm9ncmVzc0Jhci9Qcm9ncmVzc0Jhci50c1wiOiAxMixcblx0XCIuL1ZpZXcvYmxvY2tzL1J1bm5lci9SdW5uZXIudHNcIjogMyxcblx0XCIuL1ZpZXcvYmxvY2tzL1NjYWxlL01hcmsvTWFyay50c1wiOiAxMSxcblx0XCIuL1ZpZXcvYmxvY2tzL1NjYWxlL1NjYWxlLnRzXCI6IDEwLFxuXHRcIi4vVmlldy9ibG9ja3MvVG9vbHRpcC9Ub29sdGlwLnRzXCI6IDksXG5cdFwiLi9WaWV3L2Jsb2Nrcy9UcmFjay9UcmFjay50c1wiOiA2LFxuXHRcIi4vVmlldy9ibG9ja3MvY3JlYXRlRWxlbS9jcmVhdGVFbGVtLnRzXCI6IDEsXG5cdFwiLi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdC50c1wiOiAwLFxuXHRcIi4vc2xpZGVyLnRzXCI6IDE2LFxuXHRcIi4vc3R5bGUuc2Nzc1wiOiAxNyxcblx0XCIuL3R5cGVzLnRzXCI6IDJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxNTsiLCIvKiBnbG9iYWwgalF1ZXJ5ICovXHJcbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgQ29udHJvbGxlciBmcm9tICcuL0NvbnRyb2xsZXIvQ29udHJvbGxlcic7XHJcblxyXG4oZnVuY3Rpb24gcGx1Z2luV3JhcHBlcigkKSB7XHJcbiAgY29uc3QgbWV0aG9kczogTWV0aG9kcyA9IHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQob3B0OiB0eXBlcy5QYXJhbWV0ZXJzKSB7XHJcbiAgICAgIGlmICghJCh0aGlzKS5kYXRhKCdzbGlkZXInKSkge1xyXG4gICAgICAgIGNvbnN0IG5ld0NvbmZpZyA9IHsgLi4udHlwZXMuZGVmYXVsdFBhcmFtZXRlcnMgfTtcclxuICAgICAgICBjb25zdCBzbGlkZXIgPSBuZXcgQ29udHJvbGxlcigkLmV4dGVuZChuZXdDb25maWcsIG9wdCksICQodGhpcykpO1xyXG4gICAgICAgICQodGhpcykuZGF0YSgnc2xpZGVyJywgc2xpZGVyKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvcHQ6IHR5cGVzLlBhcmFtZXRlcnMpIHtcclxuICAgICAgY29uc3Qgc2xpZGVyID0gJCh0aGlzKS5kYXRhKCdzbGlkZXInKTtcclxuICAgICAgc2xpZGVyLnVwZGF0ZShvcHQpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZW5ldzogZnVuY3Rpb24gcmVuZXcoKSB7XHJcbiAgICAgIGNvbnN0IHNsaWRlciA9ICQodGhpcykuZGF0YSgnc2xpZGVyJyk7XHJcbiAgICAgIHJldHVybiBzbGlkZXIucmVuZXcoKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0VmFsdWVzOiBmdW5jdGlvbiBzZXRWYWx1ZXMob3B0OiB0eXBlcy5DdXJyZW50VmFsdWVzKSB7XHJcbiAgICAgIGNvbnN0IHNsaWRlciA9ICQodGhpcykuZGF0YSgnc2xpZGVyJyk7XHJcbiAgICAgIHNsaWRlci5zZXRWYWx1ZXMob3B0KTtcclxuICAgIH0sXHJcblxyXG4gICAgaW5wdXRzQXR0YWNoOiBmdW5jdGlvbiBpbnB1dHNBdHRhY2gob3B0OiB0eXBlcy5JbnB1dHNPYmplY3QpIHtcclxuICAgICAgY29uc3Qgc2xpZGVyID0gJCh0aGlzKS5kYXRhKCdzbGlkZXInKTtcclxuICAgICAgc2xpZGVyLm9ic2VydmVycy5hZGRPYnNlcnZlcigoZXZlbnROYW1lPzogc3RyaW5nLCBkYXRhPzogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDdXJyZW50VmFsdWVzRm9yVHJhY2tpbmcnKSB7XHJcbiAgICAgICAgICBvcHQubWluVmFsdWVJbnB1dC52YWwoZGF0YS5jdXJyZW50TWluVmFsdWUpO1xyXG4gICAgICAgICAgb3B0Lm1heFZhbHVlSW5wdXQudmFsKGRhdGEuY3VycmVudE1heFZhbHVlKTtcclxuICAgICAgICB9IGlmIChldmVudE5hbWUgPT09ICdTZW5kaW5nQ29uZmlnJykge1xyXG4gICAgICAgICAgb3B0Lm1heFZhbHVlLnZhbChkYXRhLm1heFZhbHVlKTtcclxuICAgICAgICAgIG9wdC5taW5WYWx1ZS52YWwoZGF0YS5taW5WYWx1ZSk7XHJcbiAgICAgICAgICBvcHQuc3RlcC52YWwoZGF0YS5zdGVwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICQuZm4ub21mZ3NsaWRlciA9IGZ1bmN0aW9uIHByb2Nlc3NNZXRob2QobWV0aG9kOiBzdHJpbmcsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgIC4uLmFyZ3M6IEFycmF5PHR5cGVzLmNvbmZpZ1VwZGF0ZURhdGE+KSB7XHJcbiAgICBpZiAobWV0aG9kc1ttZXRob2RdKSB7XHJcbiAgICAgIHJldHVybiBtZXRob2RzW21ldGhvZF0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9IGlmICh0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyB8fCAhbWV0aG9kKSB7XHJcbiAgICAgIHJldHVybiBtZXRob2RzLmluaXQuYXBwbHkodGhpcywgW21ldGhvZF0pO1xyXG4gICAgfVxyXG4gICAgJC5lcnJvcihg0JzQtdGC0L7QtCAke21ldGhvZH0g0L3QtSDQvdCw0LnQtNC10L0g0LIg0L/Qu9Cw0LPQuNC90LUgalF1ZXJ5Lm9tZmdzbGlkZXJgKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH07XHJcbn0oalF1ZXJ5KSk7XHJcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9ibG9ja3MvUGFuZWwvcGFuZWwuc2Nzc1wiOiAxOSxcblx0XCIuL2luZGV4LnNjc3NcIjogMjBcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxODsiLCIvKiBnbG9iYWwgJCAqL1xyXG5cclxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vLi4vLi4vcGx1Z2luL3R5cGVzJztcclxuXHJcbmNsYXNzIFBhbmVsIHtcclxuICBub2RlOiBKUXVlcnk7XHJcblxyXG4gIGlucHV0czogdHlwZXMuSW5wdXRzT2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihlbGVtOiBIVE1MRWxlbWVudCwgcGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycykge1xyXG4gICAgdGhpcy5ub2RlID0gJChlbGVtKTtcclxuICAgIHRoaXMuaW5pdChwYXJhbWV0ZXJzKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IChwYXJhbWV0ZXJzOiB0eXBlcy5QYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICBjb25zdCBzbGlkZXIgPSAkKHRoaXMubm9kZSkuc2libGluZ3MoJy5qcy1zbGlkZXInKTtcclxuICAgIGNvbnN0IGN1cnJlbnRNaW5WYWx1ZUlucHV0ID0gdGhpcy5ub2RlLmZpbmQoJy5qcy1wYW5lbF9fY3VycmVudC1taW52YWx1ZScpO1xyXG4gICAgY29uc3QgY3VycmVudE1heFZhbHVlSW5wdXQgPSB0aGlzLm5vZGUuZmluZCgnLmpzLXBhbmVsX19jdXJyZW50LW1heHZhbHVlJyk7XHJcbiAgICBjb25zdCBtaW5WYWx1ZUlucHV0ID0gdGhpcy5ub2RlLmZpbmQoJy5qcy1wYW5lbF9fbWluVmFsdWUnKTtcclxuICAgIGNvbnN0IG1heFZhbHVlSW5wdXQgPSB0aGlzLm5vZGUuZmluZCgnLmpzLXBhbmVsX19tYXhWYWx1ZScpO1xyXG4gICAgY29uc3Qgc3RlcElucHV0ID0gdGhpcy5ub2RlLmZpbmQoJy5qcy1wYW5lbF9fc3RlcCcpO1xyXG4gICAgY29uc3QgcmFuZ2VJbnB1dCA9IHRoaXMubm9kZS5maW5kKCcuanMtcGFuZWxfX3JhbmdlJyk7XHJcbiAgICBjb25zdCBvcmllbnRhdGlvbklucHV0ID0gdGhpcy5ub2RlLmZpbmQoJy5qcy1wYW5lbF9fb3JpZW50YXRpb24nKTtcclxuICAgIGNvbnN0IHNob3dpbmdMYWJlbHNJbnB1dCA9IHRoaXMubm9kZS5maW5kKCcuanMtcGFuZWxfX3Nob3dpbmctbGFiZWxzJyk7XHJcblxyXG4gICAgdGhpcy5pbnB1dHMgPSB7XHJcbiAgICAgIHNsaWRlcjogc2xpZGVyLFxyXG4gICAgICBjdXJyZW50TWluVmFsdWVJbnB1dDogY3VycmVudE1pblZhbHVlSW5wdXQsXHJcbiAgICAgIGN1cnJlbnRNYXhWYWx1ZUlucHV0OiBjdXJyZW50TWF4VmFsdWVJbnB1dCxcclxuICAgICAgbWluVmFsdWVJbnB1dDogbWluVmFsdWVJbnB1dCxcclxuICAgICAgbWF4VmFsdWVJbnB1dDogbWF4VmFsdWVJbnB1dCxcclxuICAgICAgc3RlcElucHV0OiBzdGVwSW5wdXQsXHJcbiAgICAgIHJhbmdlSW5wdXQ6IHJhbmdlSW5wdXQsXHJcbiAgICAgIG9yaWVudGF0aW9uSW5wdXQ6IG9yaWVudGF0aW9uSW5wdXQsXHJcbiAgICAgIHNob3dpbmdMYWJlbHNJbnB1dDogc2hvd2luZ0xhYmVsc0lucHV0XHJcbiAgICB9O1xyXG5cclxuICAgIHNsaWRlci5vbWZnc2xpZGVyKHBhcmFtZXRlcnMpO1xyXG5cclxuICAgIHNsaWRlci5vbWZnc2xpZGVyKCdpbnB1dHNBdHRhY2gnLCB7XHJcbiAgICAgIG1pblZhbHVlSW5wdXQ6IGN1cnJlbnRNaW5WYWx1ZUlucHV0LFxyXG4gICAgICBtYXhWYWx1ZUlucHV0OiBjdXJyZW50TWF4VmFsdWVJbnB1dCxcclxuICAgICAgbWF4VmFsdWU6IG1heFZhbHVlSW5wdXQsXHJcbiAgICAgIG1pblZhbHVlOiBtaW5WYWx1ZUlucHV0LFxyXG4gICAgICBzdGVwOiBzdGVwSW5wdXRcclxuICAgIH0pO1xyXG5cclxuICAgIHNsaWRlci5vbWZnc2xpZGVyKCdyZW5ldycpO1xyXG5cclxuICAgIGN1cnJlbnRNaW5WYWx1ZUlucHV0Lm9uKCdmb2N1c291dCcsIHRoaXMuaGFuZGxlQ3VycmVudE1pblZhbHVlSW5wdXRGb2N1c291dCk7XHJcbiAgICBjdXJyZW50TWF4VmFsdWVJbnB1dC5vbignZm9jdXNvdXQnLCB0aGlzLmhhbmRsZUN1cnJlbnRNYXhWYWx1ZUlucHV0Rm9jdXNvdXQpO1xyXG4gICAgbWluVmFsdWVJbnB1dC5vbignZm9jdXNvdXQnLCB0aGlzLmhhbmRsZU1pblZhbHVlSW5wdXRGb2N1c291dCk7XHJcbiAgICBtYXhWYWx1ZUlucHV0Lm9uKCdmb2N1c291dCcsIHRoaXMuaGFuZGxlTWF4VmFsdWVJbnB1dEZvY3Vzb3V0KTtcclxuICAgIHN0ZXBJbnB1dC5vbignZm9jdXNvdXQnLCB0aGlzLmhhbmRsZVN0ZXBJbnB1dEZvY3Vzb3V0KTtcclxuXHJcbiAgICByYW5nZUlucHV0Lm9uKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZVJhbmdlQnV0dG9uQ2hhbmdlKTtcclxuICAgIG9yaWVudGF0aW9uSW5wdXQub24oJ2NoYW5nZScsIHRoaXMuaGFuZGxlVmVydGljYWxCdXR0b25DaGFuZ2UpO1xyXG4gICAgc2hvd2luZ0xhYmVsc0lucHV0Lm9uKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUxhYmVsQnV0dG9uQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlQ3VycmVudE1pblZhbHVlSW5wdXRGb2N1c291dCA9ICgpID0+IHtcclxuICAgIHRoaXMuaW5wdXRzLnNsaWRlci5vbWZnc2xpZGVyKCdzZXRWYWx1ZXMnLCB7IGN1cnJlbnRNaW5WYWx1ZTogcGFyc2VGbG9hdCh0aGlzLmlucHV0cy5jdXJyZW50TWluVmFsdWVJbnB1dC52YWwoKSBhcyBzdHJpbmcpIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlQ3VycmVudE1heFZhbHVlSW5wdXRGb2N1c291dCA9ICgpID0+IHtcclxuICAgIHRoaXMuaW5wdXRzLnNsaWRlci5vbWZnc2xpZGVyKCdzZXRWYWx1ZXMnLCB7IGN1cnJlbnRNYXhWYWx1ZTogcGFyc2VGbG9hdCh0aGlzLmlucHV0cy5jdXJyZW50TWF4VmFsdWVJbnB1dC52YWwoKSBhcyBzdHJpbmcpIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTWluVmFsdWVJbnB1dEZvY3Vzb3V0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pbnB1dHMuc2xpZGVyLm9tZmdzbGlkZXIoJ3VwZGF0ZScsIHsgbWluVmFsdWU6IHBhcnNlRmxvYXQodGhpcy5pbnB1dHMubWluVmFsdWVJbnB1dC52YWwoKSBhcyBzdHJpbmcpIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlTWF4VmFsdWVJbnB1dEZvY3Vzb3V0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pbnB1dHMuc2xpZGVyLm9tZmdzbGlkZXIoJ3VwZGF0ZScsIHsgbWF4VmFsdWU6IHBhcnNlRmxvYXQodGhpcy5pbnB1dHMubWF4VmFsdWVJbnB1dC52YWwoKSBhcyBzdHJpbmcpIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlU3RlcElucHV0Rm9jdXNvdXQgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlucHV0cy5zbGlkZXIub21mZ3NsaWRlcigndXBkYXRlJywgeyBzdGVwOiBwYXJzZUZsb2F0KHRoaXMuaW5wdXRzLnN0ZXBJbnB1dC52YWwoKSBhcyBzdHJpbmcpIH0pO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlUmFuZ2VCdXR0b25DaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICB0aGlzLmlucHV0cy5zbGlkZXIub21mZ3NsaWRlcigndXBkYXRlJywgeyBpc1JhbmdlOiAndG9nZ2xlJyB9KTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGhhbmRsZVZlcnRpY2FsQnV0dG9uQ2hhbmdlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pbnB1dHMuc2xpZGVyLm9tZmdzbGlkZXIoJ3VwZGF0ZScsIHsgaXNWZXJ0aWNhbDogJ3RvZ2dsZScgfSk7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVMYWJlbEJ1dHRvbkNoYW5nZSA9ICgpID0+IHtcclxuICAgIHRoaXMuaW5wdXRzLnNsaWRlci5vbWZnc2xpZGVyKCd1cGRhdGUnLCB7IHNob3dMYWJlbDogJ3RvZ2dsZScgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFuZWw7XHJcbiIsImltcG9ydCB7IGltcG9ydEFsbCB9IGZyb20gJy4uL2luZGV4JztcclxuXHJcbmltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4vJywgdHJ1ZSwgL1xcLihqc3x0c3xpY298cG5nfHN2ZykkL2kpKTtcclxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2Jsb2Nrcy9QYW5lbC9QYW5lbC50c1wiOiAyMSxcblx0XCIuL2Jsb2Nrcy9QYW5lbC9pbmRleC5qc1wiOiAyNCxcblx0XCIuL2Zhdmljb24vYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmdcIjogMjUsXG5cdFwiLi9mYXZpY29uL2FuZHJvaWQtY2hyb21lLTI1NngyNTYucG5nXCI6IDI2LFxuXHRcIi4vZmF2aWNvbi9hcHBsZS10b3VjaC1pY29uLnBuZ1wiOiAyNyxcblx0XCIuL2Zhdmljb24vZmF2aWNvbi0xNngxNi5wbmdcIjogMjgsXG5cdFwiLi9mYXZpY29uL2Zhdmljb24tMzJ4MzIucG5nXCI6IDI5LFxuXHRcIi4vZmF2aWNvbi9mYXZpY29uLmljb1wiOiAzMCxcblx0XCIuL2Zhdmljb24vbXN0aWxlLTE1MHgxNTAucG5nXCI6IDMxLFxuXHRcIi4vZmF2aWNvbi9zYWZhcmktcGlubmVkLXRhYi5zdmdcIjogMzIsXG5cdFwiLi9pbml0LnRzXCI6IDIyXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjM7IiwiLyogZ2xvYmFsICQgKi9cclxuXHJcbmltcG9ydCBQYW5lbCBmcm9tICcuL1BhbmVsJztcclxuXHJcbmNvbnN0IHBhcmFtZXRlcnMgPSBbXHJcbiAgeyBzaG93TGFiZWw6IHRydWUgfSxcclxuICB7XHJcbiAgICBtaW5WYWx1ZTogLTEwMDAsXHJcbiAgICBtYXhWYWx1ZTogMCxcclxuICAgIHN0ZXA6IDEwMCxcclxuICAgIGlzUmFuZ2U6IHRydWUsXHJcbiAgICBzaG93TGFiZWw6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIG1pblZhbHVlOiAwLFxyXG4gICAgbWF4VmFsdWU6IDEsXHJcbiAgICBzdGVwOiAwLjA1LFxyXG4gICAgaXNWZXJ0aWNhbDogdHJ1ZSxcclxuICAgIHNob3dMYWJlbDogdHJ1ZSxcclxuICAgIGlzRmxvYXQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIG1pblZhbHVlOiAtMyxcclxuICAgIG1heFZhbHVlOiAwLFxyXG4gICAgc3RlcDogMC4xLFxyXG4gICAgaXNSYW5nZTogdHJ1ZSxcclxuICAgIGlzVmVydGljYWw6IHRydWUsXHJcbiAgICBzaG93TGFiZWw6IHRydWUsXHJcbiAgICBpc0Zsb2F0OiB0cnVlXHJcbiAgfVxyXG5dO1xyXG5cclxuJCgnLmpzLXBhbmVsJykuZWFjaCgoaW5kZXgsIGVsZW0pID0+IHtcclxuICBuZXcgUGFuZWwoZWxlbSwgcGFyYW1ldGVyc1tpbmRleF0pO1xyXG59KTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi9hbmRyb2lkLWNocm9tZS0yNTZ4MjU2LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uL2FwcGxlLXRvdWNoLWljb24ucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vZmF2aWNvbi0xNngxNi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZmF2aWNvbi9mYXZpY29uLTMyeDMyLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmYXZpY29uL2Zhdmljb24uaWNvXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vbXN0aWxlLTE1MHgxNTAucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24vc2FmYXJpLXBpbm5lZC10YWIuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==