!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e,i){},function(t,e,i){"use strict";i.r(e);i.p,i(0);var s=function(){function t(){this.observers=[]}return t.prototype.addObserver=function(t){if("function"!=typeof t)throw new Error("observer must be a function");for(var e=0,i=this.observers;e<i.length;e++){if(i[e]===t)throw new Error("observer already in the list")}this.observers.push(t)},t.prototype.removeObserver=function(t){for(var e=0;e<this.observers.length;e++){if(this.observers[e]===t)return void this.observers.splice(e,1)}throw new Error("could not find observer in list of observers")},t.prototype.notifyObservers=function(){for(var t=this.observers.slice(0),e=0;e<t.length;e++)t[e]()},t}();function n(t){var e=document.createElement("div");return e.classList.add(t),e}var l=function(){function t(){this.elem=n("slider__scale"),this.elem.ondragstart=function(){return!1}}return t.prototype.getLeft=function(){return this.elem.getBoundingClientRect().left},t.prototype.getWidth=function(){return this.elem.getBoundingClientRect().width},t.prototype.getHeight=function(){return this.elem.getBoundingClientRect().height},t.prototype.getTop=function(){return this.elem.getBoundingClientRect().top},t}(),h=function(){function t(){this.gradElem=n("slider__graduation"),this.mark1=n("slider__graduation__mark"),this.mark2=n("slider__graduation__mark"),this.mark3=n("slider__graduation__mark"),this.mark4=n("slider__graduation__mark"),this.gradElem.appendChild(this.mark1),this.gradElem.appendChild(this.mark2),this.gradElem.appendChild(this.mark3),this.gradElem.appendChild(this.mark4),this.init=this.init.bind(this)}return t.prototype.init=function(t,e,i,s){void 0===s&&(s=!1),this.mark1.innerHTML=t+"",s?(this.mark2.innerHTML=t+parseFloat(((e-t)/3).toFixed(2))+"",this.mark3.innerHTML=t+parseFloat((2*(e-t)/3).toFixed(2))+""):(this.mark2.innerHTML=t+Math.round((e-t)/3)+"",this.mark3.innerHTML=t+Math.round(2*(e-t)/3)+""),this.mark4.innerHTML=e+"",i?(this.mark1.style.marginTop="-9px",this.mark1.style.marginLeft="0",this.mark4.style.marginBottom="-9px",this.mark4.style.marginLeft="0"):(this.mark1.style.marginLeft="-15px",this.mark1.style.marginTop="0",this.mark4.style.marginRight="-15px",this.mark4.style.marginTop="0")},t}(),o=function(){function t(){this.elem=n("slider__button"),this.elem.ondragstart=function(){return!1}}return t.prototype.getLeft=function(){return this.elem.getBoundingClientRect().left},t.prototype.getWidth=function(){return this.elem.getBoundingClientRect().width},t.prototype.getTop=function(){return this.elem.getBoundingClientRect().top},t}(),a=function(){function t(){this.elem=n("slider__button__label"),this.elem.ondragstart=function(){return!1}}return t.prototype.getWidth=function(){return this.elem.getBoundingClientRect().width},t.prototype.getHeight=function(){return this.elem.getBoundingClientRect().height},t}(),r=function(){this.elem=n("slider__scale__filling"),this.elem.ondragstart=function(){return!1}},u=function(){function t(t,e,i,n,u,c,d){var b=this;void 0===t&&(t=0),void 0===e&&(e=1e3),void 0===i&&(i=1),void 0===n&&(n=!1),void 0===u&&(u=!1),void 0===c&&(c=!1),void 0===d&&(d=!1),this.scale=new l,this.button1=new o,this.button2=new o,this.label1=new a,this.label2=new a,this.scaleFilling=new r,this.graduation=new h,this.minValue=t,this.maxValue=e,this.curMinValue=t,this.curMaxValue=e,this.step=i,this.range=n,this.vertical=u,this.showLabel=c,this.float=d,this.observers=new s,this.checkValues(),this.button1.elem.onmousedown=function(t){t.preventDefault(),document.addEventListener("mousemove",b.onMouseMove1),document.addEventListener("mouseup",b.onMouseUp1)},this.button2.elem.onmousedown=function(t){t.preventDefault(),document.addEventListener("mousemove",b.onMouseMove2),document.addEventListener("mouseup",b.onMouseUp2)},this.scale.elem.onclick=this.scaleOnclick,this.graduation.mark1.onclick=this.mark1Onclick,this.graduation.mark2.onclick=this.mark2Onclick,this.graduation.mark3.onclick=this.mark3Onclick,this.graduation.mark4.onclick=this.mark4Onclick,this.getStart=this.getStart.bind(this),this.getEnd=this.getEnd.bind(this),this.updateElems=this.updateElems.bind(this),this.round=this.round.bind(this),this.roundOffsetButt=this.roundOffsetButt.bind(this),this.checkValues=this.checkValues.bind(this),this.offsetValueConv=this.offsetValueConv.bind(this),this.butt1Move=this.butt1Move.bind(this),this.butt1OffsetCheck=this.butt1OffsetCheck.bind(this),this.onMouseMove1=this.onMouseMove1.bind(this),this.onMouseUp1=this.onMouseUp1.bind(this),this.butt2Move=this.butt2Move.bind(this),this.butt2OffsetCheck=this.butt2OffsetCheck.bind(this),this.onMouseMove2=this.onMouseMove2.bind(this),this.onMouseUp2=this.onMouseUp2.bind(this),this.scaleOnclick=this.scaleOnclick.bind(this),this.interMarkHandler=this.interMarkHandler.bind(this),this.mark1Onclick=this.mark1Onclick.bind(this),this.mark2Onclick=this.mark2Onclick.bind(this),this.mark3Onclick=this.mark3Onclick.bind(this),this.mark4Onclick=this.mark4Onclick.bind(this)}return t.prototype.getStart=function(){return this.range?this.vertical?this.button1.getTop()-this.scale.getTop()+this.button1.getWidth()/2:this.button1.getLeft()-this.scale.getLeft()+this.button1.getWidth()/2:0},t.prototype.getEnd=function(){return this.vertical?this.button2.getTop()-this.scale.getTop()+this.button2.getWidth()/2:this.button2.getLeft()-this.scale.getLeft()+this.button2.getWidth()/2},t.prototype.updateElems=function(){this.vertical?(this.scaleFilling.elem.style.top=this.getStart()+"px",this.scaleFilling.elem.style.left="0",this.scaleFilling.elem.style.height=this.getEnd()-this.getStart()+"px",this.scaleFilling.elem.style.width="100%"):(this.scaleFilling.elem.style.left=this.getStart()+"px",this.scaleFilling.elem.style.top="0",this.scaleFilling.elem.style.width=this.getEnd()-this.getStart()+"px",this.scaleFilling.elem.style.height="100%"),this.range||(this.curMinValue=this.minValue),this.observers.notifyObservers()},t.prototype.round=function(t,e){var i=Math.floor(t/e),s=t%e;return t<0?Math.abs(s)>e/2?i*e:(i+1)*e:s<e/2?i*e:(i+1)*e},t.prototype.roundOffsetButt=function(t){var e,i;i=this.vertical?this.scale.getHeight():this.scale.getWidth(),e=this.minValue+(t+this.button2.getWidth()/2)*(this.maxValue-this.minValue)/i;var s=this.round(e,this.step);return this.float&&(s=parseFloat(s.toFixed(2))),s<this.minValue?s=this.minValue:s>this.maxValue&&(s=this.maxValue),[(s-this.minValue)*i/(this.maxValue-this.minValue)-this.button2.getWidth()/2,s]},t.prototype.offsetValueConv=function(t){return this.vertical?(t-this.minValue)/(this.maxValue-this.minValue)*this.scale.getHeight()-this.button2.getWidth()/2:(t-this.minValue)/(this.maxValue-this.minValue)*this.scale.getWidth()-this.button2.getWidth()/2},t.prototype.butt1Move=function(t,e){this.vertical?(this.button1.elem.style.top=t+"px",this.label1.elem.style.top=t-this.label1.getHeight()/2+this.button1.getWidth()/2+"px"):(this.button1.elem.style.left=t+"px",this.label1.elem.style.left=t-this.label1.getWidth()/2+this.button1.getWidth()/2+"px"),e<this.minValue&&(e=this.minValue),this.label1.elem.innerHTML=e+"",this.curMinValue=e,this.updateElems()},t.prototype.butt1OffsetCheck=function(t){var e;if(this.vertical){var i=this.step*this.scale.getHeight()/(this.maxValue-this.minValue);t<-this.button2.getWidth()/2&&(t=-this.button2.getWidth()/2,e=this.minValue),i/1.5>this.button2.getWidth()?t>this.button2.getTop()-this.scale.getTop()-i/1.5&&(t=this.button2.getTop()-this.scale.getTop()-i/1.5):t>this.button2.getTop()-this.scale.getTop()-this.button2.getWidth()&&(t=this.button2.getTop()-this.scale.getTop()-this.button2.getWidth())}else{i=this.step*this.scale.getWidth()/(this.maxValue-this.minValue);t<-this.button1.getWidth()/2&&(t=-this.button1.getWidth()/2,e=this.minValue),i/1.5>this.button1.getWidth()?t>this.button2.getLeft()-this.scale.getLeft()-i/1.5&&(t=this.button2.getLeft()-this.scale.getLeft()-i/1.5):t>this.button2.getLeft()-this.scale.getLeft()-this.button2.getWidth()&&(t=this.button2.getLeft()-this.scale.getLeft()-this.button2.getWidth())}return[t,e]},t.prototype.onMouseMove1=function(t){var e,i,s,n,l;s=this.vertical?t.clientY-this.scale.getTop()-this.button1.getWidth()/2:t.clientX-this.scale.getLeft()-this.button1.getWidth()/2,l=(e=this.butt1OffsetCheck(s))[0],(n=e[1])||(l=(i=this.roundOffsetButt(l))[0],n=i[1]),this.butt1Move(l,n)},t.prototype.onMouseUp1=function(t){document.removeEventListener("mouseup",this.onMouseUp1),document.removeEventListener("mousemove",this.onMouseMove1)},t.prototype.butt2Move=function(t,e){this.vertical?(this.button2.elem.style.top=t+"px",this.label2.elem.style.top=t-this.label2.getHeight()/2+this.button2.getWidth()/2+"px"):(this.button2.elem.style.left=t+"px",this.label2.elem.style.left=t-this.label2.getWidth()/2+this.button2.getWidth()/2+"px"),e<this.minValue?e=this.minValue:e>this.maxValue&&(e=this.maxValue),this.label2.elem.innerHTML=e+"",this.curMaxValue=e,this.updateElems()},t.prototype.butt2OffsetCheck=function(t){var e;if(this.range||t<-this.button2.getWidth()/2&&(t=-this.button2.getWidth()/2,e=this.minValue),this.vertical){var i=this.step*this.scale.getHeight()/(this.maxValue-this.minValue);t>this.scale.getHeight()-this.button2.getWidth()/2&&(t=this.scale.getHeight()-this.button2.getWidth()/2,e=this.maxValue),i/1.5>this.button2.getWidth()?t<this.button1.getTop()-this.scale.getTop()+i/1.5&&(t=this.button1.getTop()-this.scale.getTop()+i/1.5):t<this.button1.getTop()-this.scale.getTop()+this.button2.getWidth()&&(t=this.button1.getTop()-this.scale.getTop()+this.button2.getWidth())}else{i=this.step*this.scale.getWidth()/(this.maxValue-this.minValue);t>this.scale.getWidth()-this.button2.getWidth()/2&&(t=this.scale.getWidth()-this.button2.getWidth()/2,e=this.maxValue),i/1.5>this.button2.getWidth()?t<this.button1.getLeft()-this.scale.getLeft()+i/1.5&&(t=this.button1.getLeft()-this.scale.getLeft()+i/1.5):t<this.button1.getLeft()-this.scale.getLeft()+this.button2.getWidth()&&(t=this.button1.getLeft()-this.scale.getLeft()+this.button2.getWidth())}return[t,e]},t.prototype.onMouseMove2=function(t){var e,i,s,n,l;s=this.vertical?t.clientY-this.scale.getTop()-this.button2.getWidth()/2:t.clientX-this.scale.getLeft()-this.button2.getWidth()/2,l=(e=this.butt2OffsetCheck(s))[0],(n=e[1])||(l=(i=this.roundOffsetButt(l))[0],n=i[1]),this.butt2Move(l,n)},t.prototype.onMouseUp2=function(t){document.removeEventListener("mouseup",this.onMouseUp2),document.removeEventListener("mousemove",this.onMouseMove2)},t.prototype.scaleOnclick=function(t){if(this.range){(this.vertical?Math.abs(t.clientY-this.button1.getTop()-this.button1.getWidth()/2)<Math.abs(t.clientY-this.button2.getTop()-this.button2.getWidth()/2):Math.abs(t.clientX-this.button1.getLeft()-this.button1.getWidth()/2)<Math.abs(t.clientX-this.button2.getLeft()-this.button2.getWidth()/2))?this.onMouseMove1(t):this.onMouseMove2(t)}else this.onMouseMove2(t)},t.prototype.interMarkHandler=function(t){var e,i,s,n;if(this.vertical){var l=(t-this.minValue)/(this.maxValue-this.minValue)*this.scale.getHeight();s=(e=this.roundOffsetButt(l-this.button2.getWidth()/2))[0],n=e[1],this.range&&Math.abs(l+this.scale.getTop()-this.button1.getTop()-this.button2.getWidth()/2)<Math.abs(l+this.scale.getTop()-this.button2.getTop()-this.button2.getWidth()/2)?this.butt1Move(s,n):this.butt2Move(s,n)}else{l=(t-this.minValue)/(this.maxValue-this.minValue)*this.scale.getWidth();s=(i=this.roundOffsetButt(l-this.button2.getWidth()/2))[0],n=i[1],this.range&&Math.abs(l+this.scale.getLeft()-this.button1.getLeft()-this.button2.getWidth()/2)<Math.abs(l+this.scale.getLeft()-this.button2.getLeft()-this.button2.getWidth()/2)?this.butt1Move(s,n):this.butt2Move(s,n)}},t.prototype.mark1Onclick=function(t){var e=-this.button2.getWidth()/2,i=this.minValue;this.range?this.butt1Move(e,i):this.butt2Move(e,i)},t.prototype.mark4Onclick=function(t){if(this.vertical){var e=this.scale.getHeight()-this.button2.getWidth()/2,i=this.maxValue;this.butt2Move(e,i)}else{e=this.scale.getWidth()-this.button2.getWidth()/2,i=this.maxValue;this.butt2Move(e,i)}},t.prototype.mark2Onclick=function(t){var e=this.float?parseFloat(this.graduation.mark2.innerHTML):parseInt(this.graduation.mark2.innerHTML);this.interMarkHandler(e)},t.prototype.mark3Onclick=function(t){var e=this.float?parseFloat(this.graduation.mark3.innerHTML):parseInt(this.graduation.mark3.innerHTML);this.interMarkHandler(e)},t.prototype.init=function(){this.button1.elem.style.display="none",this.label1.elem.style.display="none",this.graduation.init(this.minValue,this.maxValue,this.vertical,this.float),this.checkValues(),this.showLabel?(this.label1.elem.style.display="block",this.label2.elem.style.display="block"):(this.label1.elem.style.display="none",this.label2.elem.style.display="none"),this.range?this.button1.elem.style.display="block":(this.button1.elem.style.display="none",this.label1.elem.style.display="none"),this.vertical?(this.scale.elem.classList.add("slider__scale_vertical"),this.scaleFilling.elem.classList.add("slider__scale__filling_vertical"),this.graduation.gradElem.classList.add("slider__graduation_vertical"),this.graduation.gradElem.style.height=this.scale.getHeight()+"px",this.button1.elem.classList.add("slider__button_vertical"),this.button2.elem.classList.add("slider__button_vertical"),this.label1.elem.classList.add("slider__button__label_vertical"),this.label2.elem.classList.add("slider__button__label_vertical"),this.button1.elem.style.top=-this.button1.getWidth()/2+"px",this.button1.elem.style.left="50%",this.button2.elem.style.top=this.scale.getHeight()-this.button2.getWidth()/2+"px",this.button2.elem.style.left="50%",this.label1.elem.innerHTML=this.minValue+"",this.label2.elem.innerHTML=this.maxValue+"",this.label1.elem.style.top=this.getStart()-this.label1.getHeight()/2+"px",this.label1.elem.style.left="50%",this.label2.elem.style.top=this.getEnd()-this.label2.getHeight()/2+"px",this.label2.elem.style.left="50%"):(this.scale.elem.classList.remove("slider__scale_vertical"),this.scaleFilling.elem.classList.remove("slider__scale__filling_vertical"),this.graduation.gradElem.classList.remove("slider__graduation_vertical"),this.graduation.gradElem.style.height="20px",this.button1.elem.classList.remove("slider__button_vertical"),this.button2.elem.classList.remove("slider__button_vertical"),this.label1.elem.classList.remove("slider__button__label_vertical"),this.label2.elem.classList.remove("slider__button__label_vertical"),this.button1.elem.style.left=-this.button1.getWidth()/2+"px",this.button1.elem.style.top="50%",this.button2.elem.style.left=this.scale.getWidth()-this.button2.getWidth()/2+"px",this.button2.elem.style.top="50%",this.label1.elem.innerHTML=this.minValue+"",this.label2.elem.innerHTML=this.maxValue+"",this.label1.elem.style.left=this.getStart()-this.label1.getWidth()/2+"px",this.label1.elem.style.top="50%",this.label2.elem.style.left=this.getEnd()-this.label2.getWidth()/2+"px",this.label2.elem.style.top="50%"),this.updateElems()},t.prototype.checkValues=function(){"number"!=typeof this.maxValue&&console.error("Maxvalue should be a number"),"number"!=typeof this.minValue&&console.error("Maxvalue should be a number"),"number"!=typeof this.step&&console.error("Step should be a number"),"boolean"!=typeof this.range&&console.error("Range should be a boolean"),"boolean"!=typeof this.vertical&&console.error("Vertical should be a boolean"),"boolean"!=typeof this.showLabel&&console.error("ShowLabel should be a boolean"),this.step>this.maxValue-this.minValue&&(this.step=this.maxValue-this.minValue,console.error("Step is setted to the max"))},t.prototype.append=function(t){t.appendChild(this.scale.elem).appendChild(this.scaleFilling.elem),t.appendChild(this.button1.elem),t.appendChild(this.label1.elem),t.appendChild(this.graduation.gradElem),t.appendChild(this.button2.elem),t.appendChild(this.label2.elem)},t}(),c=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=1e3),this.curMinValue=t,this.curMaxValue=e,this.observers=new s}return t.prototype.setCurMinValue=function(t){this.curMinValue!=t&&(this.curMinValue=t,this.observers.notifyObservers())},t.prototype.setCurMaxValue=function(t){this.curMaxValue!=t&&(this.curMaxValue=t,this.observers.notifyObservers())},t}(),d=function(){function t(t,e,i,n,l,h,o){var a=this;void 0===t&&(t=0),void 0===e&&(e=1e3),void 0===i&&(i=1),void 0===n&&(n=!1),void 0===l&&(l=!1),void 0===h&&(h=!1),void 0===o&&(o=!1),this.view=new u(t,e,i,n,l,h,o),this.model=new c(t,e),this.observers=new s,this.view.observers.addObserver((function(){a.model.curMinValue=a.view.curMinValue,a.model.curMaxValue=a.view.curMaxValue,a.observers.notifyObservers()})),this.model.observers.addObserver((function(){var t=a.model.curMinValue,e=a.model.curMaxValue;a.view.butt1Move(a.view.offsetValueConv(t),t),a.view.butt2Move(a.view.offsetValueConv(e),e),a.observers.notifyObservers()})),this.update=this.update.bind(this),this.getValues=this.getValues.bind(this),this.getConfig=this.getConfig.bind(this),this.addObserver=this.addObserver.bind(this)}return t.prototype.append=function(t){this.view.append(t.get(0)),this.view.init()},t.prototype.update=function(t){var e=this;Object.keys(t).map((function(i){void 0!==e.view[i]&&(e.view[i]=t[i])})),this.view.init(),this.view.butt1Move(this.view.butt1OffsetCheck(this.view.offsetValueConv(this.model.curMinValue))[0],this.model.curMinValue),this.view.butt2Move(this.view.butt2OffsetCheck(this.view.offsetValueConv(this.model.curMaxValue))[0],this.model.curMaxValue)},t.prototype.getValues=function(){return[this.model.curMinValue,this.model.curMaxValue]},t.prototype.setValues=function(t,e){t&&this.model.setCurMinValue(t),e&&this.model.setCurMaxValue(e)},t.prototype.getConfig=function(){return{minValue:this.view.minValue,maxValue:this.view.maxValue,step:this.view.step,range:this.view.range,vertical:this.view.vertical,showLabel:this.view.showLabel,float:this.view.float}},t.prototype.addObserver=function(t){this.observers.addObserver(t)},t}();!function(t){const e={minValue:0,maxValue:1e3,step:1,range:!1,vertical:!1,showLabel:!1,float:!1},i={init:function(i){if(!t(this).data("slider")){const s=JSON.parse(JSON.stringify(e)),n=new d(...Object.values(t.extend(s,i)));t(this).data("slider",n),n.append(t(this))}},update:function(e){t(this).data("slider").update(e)},getConfig:function(){return t(this).data("slider").getConfig()},setValues:function(e){t(this).data("slider").setValues(e.curMinValue,e.curMaxValue)},inputsAttach:function(e){const i=t(this).data("slider");i.addObserver(()=>{e.minValueIn.val(i.getValues()[0]),e.maxValueIn.val(i.getValues()[1])})}};t.fn.omfgslider=function(e){return i[e]?i[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void t.error('Метод "'+e+'" не найден в плагине jQuery.mySimplePlugin'):i.init.apply(this,arguments)}}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,