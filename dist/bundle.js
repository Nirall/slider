!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t,n){"use strict";n.r(t);var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)r[i]=s[a];return r},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.map((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t++){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(){r(this.observers).map((function(e){return e()}))},e.prototype.notifyObserversData=function(e){r(this.observers).map((function(t){return t(e)}))},e}();t.default=i},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,n){"use strict";n.r(t),n.d(t,"defaultParameters",(function(){return r}));var r={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1}},function(e,t,n){"use strict";n.r(t);var r=function(){function e(){}return e.parsing=function(e){if("number"==typeof e)return e;if("string"==typeof e){if(/^-?\d+[.,]\d+$/.test(e))return parseFloat(e);if(/^-?\d+$/.test(e))return parseInt(e)}return null},e}();t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n(10),s=n(0),a=function(e,t){var n=this;this.getPosition=function(){return n.knob.getPosition()},this.setPosition=function(e,t){n.tooltip.setPosition(e+n.knob.getWidth()/2,t),n.knob.setPosition(e)},this.init=function(e){n.knob.init(e),n.tooltip.init(e)},this.getWidth=function(){return n.knob.getWidth()},this.hideRunner=function(){n.knob.elem.style.display="none",n.tooltip.elem.style.display="none"},this.hideLabel=function(){n.tooltip.elem.style.display="none"},this.showLabel=function(){n.tooltip.elem.style.display="block"},this.showRunner=function(){n.knob.elem.style.display="block"},this.appendToNode=function(e){[n.knob.elem,n.tooltip.elem].forEach((function(t){e.appendChild(t),t.onmousedown=n.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",n.handleRunnerMouseMove),document.addEventListener("mouseup",n.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){n.observers.notifyObserversData({event:e,runner:n})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",n.handleRunnerMouseUp),document.removeEventListener("mousemove",n.handleRunnerMouseMove)},this.isVertical=e,this.knob=new r.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(6),s=n(14),a=n(0),o=n(3),u=function(e){var t=this;void 0===e&&(e=r.defaultParameters),this.appendToNode=function(e){t.view.appendToNode(e.get(0)),t.view.init()},this.updateConfig=function(e){Object.keys(e).forEach((function(n){"step"===n?e.step=t.checkStep(e.step):"maxValue"===n?e.maxValue=t.checkMaxValue(e.maxValue):"minValue"===n&&(e.minValue=t.checkMinValue(e.minValue))})),t.view.parameters=Object.assign(t.view.parameters,e),t.view.init()},this.getValues=function(){return t.model.currentValues},this.setValues=function(e,n){(e||0===e)&&t.model.setCurrentMinValue(e),(n||0===n)&&t.model.setCurrentMaxValue(n)},this.getConfig=function(){return t.view.parameters},this.addObserver=function(e){t.observers.addObserver(e)},this.checkStep=function(e){var n=Math.abs(o.default.parsing(e));return t.isStepValueWrong(n)?t.view.parameters.step:(n%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("step")||(t.view.parameters.isFloat=!1),n)},this.isStepValueWrong=function(e){var n=e>(t.view.parameters.maxValue-t.view.parameters.minValue)/2;return null===e||0===e||n},this.isOthersValuesFloat=function(e){switch(e){case"step":return t.view.parameters.maxValue%1!=0||t.view.parameters.minValue%1!=0;case"maxValue":return t.view.parameters.step%1!=0||t.view.parameters.minValue%1!=0;case"minValue":return t.view.parameters.step%1!=0||t.view.parameters.maxValue%1!=0;default:return!1}},this.checkMaxValue=function(e){var n=o.default.parsing(e);return t.isMaxValueWrong(n)?t.view.parameters.maxValue:(n%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("maxValue")||(t.view.parameters.isFloat=!1),n)},this.isMaxValueWrong=function(e){return null===e||e<=t.view.parameters.minValue},this.checkMinValue=function(e){var n=o.default.parsing(e);return t.isMinValueWrong(n)?t.view.parameters.minValue:(n%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("minValue")||(t.view.parameters.isFloat=!1),n)},this.isMinValueWrong=function(e){return null===e||e>=t.view.parameters.maxValue},this.addViewObserver=function(){t.view.observers.addObserver((function(){t.model.currentValues=t.view.currentValues,t.observers.notifyObservers()}))},this.addModelObserver=function(){t.model.observers.addObserver((function(){t.view.currentValues=t.model.currentValues,t.view.init()}))},this.view=new i.default(e),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue}),this.observers=new a.default,this.addViewObserver(),this.addModelObserver()};t.default=u},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(0),s=n(7),a=function(e){var t=this;void 0===e&&(e=r.defaultParameters),this.init=function(){t.track.init(t.parameters),t.track.renewRunners(t.currentValues)},this.handleTrackValueChanging=function(e){"minValue"===e.typeOfValue?t.currentValues.currentMinValue=e.value:"maxValue"===e.typeOfValue&&(t.currentValues.currentMaxValue=e.value),t.observers.notifyObservers()},this.appendToNode=function(e){t.track.appendToNode(e)},this.currentValues={currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.observers=new i.default,this.parameters=e,this.track=new s.default(this.parameters),this.track.observers.addObserver(this.handleTrackValueChanging)};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(8),i=n(4),s=n(11),a=n(13),o=n(0),u=function(){function e(e){var t=this;this.init=function(e){t.parameters=e,t.bar.init(t.parameters.isVertical),t.progressBar.init(t.parameters.isVertical),t.runnerAdditional.init(t.parameters.isVertical),t.runnerMain.init(t.parameters.isVertical),t.scale.init(t.parameters),t.runnerAdditional.hideRunner(),t.parameters.showLabel?(t.runnerAdditional.showLabel(),t.runnerMain.showLabel()):(t.runnerAdditional.hideLabel(),t.runnerMain.hideLabel()),t.parameters.isRange?t.runnerAdditional.showRunner():t.runnerAdditional.hideRunner(),t.runnerAdditional.setPosition(-t.runnerAdditional.getWidth()/2,t.parameters.minValue),t.runnerMain.setPosition(t.bar.getDimension()-t.runnerMain.getWidth()/2,t.parameters.maxValue)},this.appendToNode=function(e){e.appendChild(t.bar.elem).appendChild(t.progressBar.elem),t.bar.elem.onclick=t.handleBarClick,t.runnerMain.appendToNode(e),t.runnerAdditional.appendToNode(e),t.scale.marks.forEach((function(t){e.appendChild(t.elem)})),t.scale.moveMarks()},this.convertOffsetToValue=function(e){return(e-t.parameters.minValue)*t.bar.getDimension()/(t.parameters.maxValue-t.parameters.minValue)-t.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=t.runnerMain.getPosition()-t.bar.getPosition()+t.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return t.parameters.isRange?t.runnerAdditional.getPosition()-t.bar.getPosition()+t.runnerMain.getWidth()/2:0},this.handleRunnerMove=function(e){var n=e.event,r=e.runner;t.moveRunner(t.processRunnerMouseEvent(n,r))},this.moveRunner=function(e){e.runner.setPosition(e.offset,e.value),e.runner===t.runnerAdditional&&t.observers.notifyObserversData({typeOfValue:"minValue",value:e.value}),e.runner===t.runnerMain&&t.observers.notifyObserversData({typeOfValue:"maxValue",value:e.value}),t.updateProgressBar()},this.processRunnerMouseEvent=function(e,n){var r=(t.parameters.isVertical?e.clientY:e.clientX)-t.bar.getPosition()-t.runnerAdditional.getWidth()/2;return t.processRunnerOffset(r,n)},this.processRunnerOffset=function(e,n){var r,i;return i=t.checkRunnerOffset(e,n),{runner:n,offset:i=(r=t.roundOffsetRunner(i))[0],value:r[1]}},this.checkRunnerOffset=function(e,n){var r=t.parameters.step*t.bar.getDimension()/(t.parameters.maxValue-t.parameters.minValue),i=r/1.5>t.runnerMain.getWidth()?r/1.5:t.runnerMain.getWidth(),s=e;return n===t.runnerAdditional?e>t.runnerMain.getPosition()-t.bar.getPosition()-i&&(s=t.runnerMain.getPosition()-t.bar.getPosition()-i):n===t.runnerMain&&e<t.runnerAdditional.getPosition()-t.bar.getPosition()+i&&(s=t.runnerAdditional.getPosition()-t.bar.getPosition()+i),s},this.roundOffsetRunner=function(e){var n=t.parameters.minValue+(e+t.runnerMain.getWidth()/2)*(t.parameters.maxValue-t.parameters.minValue)/t.bar.getDimension(),r=t.round(n,t.parameters.step);t.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=t.convertOffsetToValue(r);return i<-t.runnerMain.getWidth()/2&&(i=-t.runnerMain.getWidth()/2,r=t.parameters.minValue),i>t.bar.getDimension()-t.runnerMain.getWidth()/2&&(i=t.bar.getDimension()-t.runnerMain.getWidth()/2,r=t.parameters.maxValue),[i,r]},this.round=function(e,n){var r=Math.trunc(e/n),i=+(e-r*n).toFixed(2);return e<0?Math.abs(i)<n/2?r*n:(r-1)*n:e<=t.parameters.minValue?t.parameters.minValue:e>=t.parameters.maxValue?t.parameters.maxValue:i<n/2?r*n:(r+1)*n},this.handleScaleClick=function(e){var n,r=t.convertOffsetToValue(e);n=t.parameters.isRange?t.checkRunnerCloser(r):t.runnerMain,t.moveRunner(t.processRunnerOffset(r,n))},this.checkRunnerCloser=function(e){return Math.abs(e-t.getMainRunnerOffset())<Math.abs(e-t.getAdditionalRunnerOffset())?t.runnerMain:t.runnerAdditional},this.handleBarClick=function(e){var n=(t.parameters.isVertical?e.clientY:e.clientX)-t.bar.getPosition()-t.runnerMain.getWidth()/2;t.moveRunner(t.processRunnerOffset(n,t.checkRunnerCloser(n)))},this.updateProgressBar=function(){t.progressBar.init(t.parameters.isVertical),t.progressBar.setPosition(t.getAdditionalRunnerOffset()),t.progressBar.setDimension(t.getMainRunnerOffset()-t.getAdditionalRunnerOffset())},this.parameters=e,this.bar=new r.default(this.parameters.isVertical),this.progressBar=new a.default(this.parameters.isVertical),this.scale=new s.default(this.parameters,this.handleScaleClick),this.runnerAdditional=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.runnerMain=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.observers=new o.default}return e.prototype.renewRunners=function(e){this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMaxValue),this.runnerMain)),this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMinValue),this.runnerAdditional))},e}();t.default=u},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__bar_position_vertical"):t.elem.classList.remove("slider__bar_position_vertical")},this.elem=Object(r.default)("slider__bar"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(r.default)("slider__button"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,n){t.elem.innerHTML=n+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(r.default)("slider__button-label"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(12),i=n(0),s=function(e,t){var n=this;this.init=function(e){n.parameters=e,n.moveMarks()},this.moveMarks=function(){n.marks.forEach((function(e,t){if(e.init(n.parameters.isVertical),0===t)e.setPosition(0,n.parameters.minValue);else if(t===n.marks.length-1)e.setPosition(100,n.parameters.maxValue);else{var r=n.round(n.parameters.minValue+(n.parameters.maxValue-n.parameters.minValue)*t/(n.marks.length-1));n.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=(r-n.parameters.minValue)/(n.parameters.maxValue-n.parameters.minValue);e.setPosition(100*i,r)}}))},this.handleScaleClick=function(e){n.observers.notifyObserversData(e)},this.createMarks=function(){for(var e=0;e<5;e+=1){var t=new r.default(n.parameters.isVertical,n.handleScaleClick);n.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/n.parameters.step),r=+(e-t*n.parameters.step).toFixed(2);return e<0?Math.abs(r)<n.parameters.step/2?t*n.parameters.step:(t-1)*n.parameters.step:r<n.parameters.step/2?t*n.parameters.step:(t+1)*n.parameters.step},this.marks=[],this.parameters=e,this.createMarks(),this.init(e),this.observers=new i.default,this.observers.addObserver(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n(0),s=function(e,t){var n=this;this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.setPosition=function(e,t){n.elem.innerHTML=t+"",n.value=t,n.isVertical?(n.elem.style.left="50%",n.elem.style.top=e+"%",n.elem.style.marginTop=-n.getDimension()/2+"px",n.elem.style.marginLeft="-45px"):(n.elem.style.top="50%",n.elem.style.left=e+"%",n.elem.style.marginLeft=-n.getDimension()/2+"px",n.elem.style.marginTop="15px")},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.init=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__mark_position_vertical"):n.elem.classList.remove("slider__mark_position_vertical")},this.handleMarkClick=function(){n.observers.notifyObserversData(n.value)},this.elem=Object(r.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.observers.addObserver(t),this.elem.onclick=this.handleMarkClick};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.init=function(e){t.isVertical=e},this.elem=Object(r.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(){function e(e){this.currentValues=e,this.observers=new r.default}return e.prototype.setCurrentMinValue=function(e){this.currentValues.currentMinValue!==e&&(this.currentValues.currentMinValue=e,this.observers.notifyObservers())},e.prototype.setCurrentMaxValue=function(e){this.currentValues.currentMaxValue!==e&&(this.currentValues.currentMaxValue=e,this.observers.notifyObservers())},e}();t.default=i},function(e,t,n){var r={"./Controller/Controller.ts":5,"./Controller/blocks/parsingDigits/ParsingDigits.ts":3,"./Model/Model.ts":14,"./View/View.ts":6,"./View/blocks/Bar/Bar.ts":8,"./View/blocks/Knob/Knob.ts":9,"./View/blocks/ProgressBar/ProgressBar.ts":13,"./View/blocks/Runner/Runner.ts":4,"./View/blocks/Scale/Mark/Mark.ts":12,"./View/blocks/Scale/Scale.ts":11,"./View/blocks/Tooltip/Tooltip.ts":10,"./View/blocks/Track/Track.ts":7,"./View/blocks/createElem/createElem.ts":1,"./makeObservableObject/MakeObservableObject.ts":0,"./slider.ts":16,"./style.scss":17,"./types.ts":2};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=15},function(e,t,n){"use strict";n.r(t);var r,i,s,a=n(5),o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};r=jQuery,i={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1},s={init:function(e){if(!r(this).data("slider")){var t=o({},i),n=new a.default(r.extend(t,e));r(this).data("slider",n),n.appendToNode(r(this))}},update:function(e){r(this).data("slider").updateConfig(e)},getConfig:function(){return r(this).data("slider").getConfig()},setValues:function(e){r(this).data("slider").setValues(e.currentMinValue,e.currentMaxValue)},inputsAttach:function(e){var t=r(this).data("slider");t.addObserver((function(){e.minValueInput.val(t.getValues().currentMinValue),e.maxValueInput.val(t.getValues().currentMaxValue),e.maxValue.val(t.getConfig().maxValue),e.minValue.val(t.getConfig().minValue),e.step.val(t.getConfig().step)}))}},r.fn.omfgslider=function(e){return s[e]?s[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void r.error("Метод "+e+" не найден в плагине jQuery.omfgslider"):s.init.apply(this,arguments)}},function(e,t,n){},,function(e,t,n){"use strict";n.r(t);var r;n.p;(r=n(15)).keys().forEach(r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,