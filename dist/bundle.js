!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=19)}([function(e,t,r){"use strict";r.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,r){"use strict";r.r(t);var n=function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)n[i]=s[a];return n},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.map((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t++){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(){n(this.observers).map((function(e){return e()}))},e.prototype.notifyObserversData=function(e){n(this.observers).map((function(t){return t(e)}))},e}();t.default=i},function(e,t,r){"use strict";r.r(t),r.d(t,"defaultParameters",(function(){return n}));var n={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1}},function(e,t,r){"use strict";r.r(t);var n=function(){function e(){}return e.parsing=function(e){if("number"==typeof e)return e;if("string"==typeof e){if(/^-?\d+[\.,]\d+$/.test(e))return parseFloat(e);if(/^-?\d+$/.test(e))return parseInt(e)}return null},e}();t.default=n},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__bar_position_vertical"):t.elem.classList.remove("slider__bar_position_vertical")},this.elem=Object(n.default)("slider__bar"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(9),i=r(1),s=function(e,t){var r=this;this.init=function(e){r.parameters=e,r.moveMarks()},this.moveMarks=function(){r.marks.map((function(e,t){if(e.init(r.parameters.isVertical),0===t)e.setPosition(0,r.parameters.minValue);else if(t===r.marks.length-1)e.setPosition(100,r.parameters.maxValue);else{var n=r.round(r.parameters.minValue+(r.parameters.maxValue-r.parameters.minValue)/(r.marks.length-1)*t);r.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=(n-r.parameters.minValue)/(r.parameters.maxValue-r.parameters.minValue);e.setPosition(100*i,n)}}))},this.handleScaleClick=function(e){r.observers.notifyObserversData(e)},this.createMarks=function(){for(var e=0;e<5;e++){var t=new n.default(r.parameters.isVertical,r.handleScaleClick);r.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/r.parameters.step),n=+(e-t*r.parameters.step).toFixed(2);return e<0?Math.abs(n)<r.parameters.step/2?t*r.parameters.step:(t-1)*r.parameters.step:n<r.parameters.step/2?t*r.parameters.step:(t+1)*r.parameters.step},this.marks=[],this.parameters=e,this.createMarks(),this.init(e),this.observers=new i.default,this.observers.addObserver(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(10),i=r(11),s=r(1),a=function(e,t){var r=this;this.getPosition=function(){return r.knob.getPosition()},this.setPosition=function(e,t){r.tooltip.setPosition(e+r.knob.getWidth()/2,t),r.knob.setPosition(e)},this.init=function(e){r.knob.init(e),r.tooltip.init(e)},this.getWidth=function(){return r.knob.getWidth()},this.hideRunner=function(){r.knob.elem.style.display="none",r.tooltip.elem.style.display="none"},this.hideLabel=function(){r.tooltip.elem.style.display="none"},this.showLabel=function(){r.tooltip.elem.style.display="block"},this.showRunner=function(){r.knob.elem.style.display="block"},this.appendToNode=function(e){[r.knob.elem,r.tooltip.elem].map((function(t){e.appendChild(t),t.onmousedown=r.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",r.handleRunnerMouseMove),document.addEventListener("mouseup",r.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){r.observers.notifyObserversData({event:e,runner:r})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",r.handleRunnerMouseUp),document.removeEventListener("mousemove",r.handleRunnerMouseMove)},this.isVertical=e,this.knob=new n.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r(8),s=r(14),a=r(1),o=r(3),u=function(e){var t=this;void 0===e&&(e=n.defaultParameters),this.appendToNode=function(e){t.view.appendToNode(e.get(0)),t.view.init()},this.updateConfig=function(e){Object.keys(e).map((function(r){"step"===r?e.step=t.checkStep(e.step):"maxValue"===r?e.maxValue=t.checkMaxValue(e.maxValue):"minValue"===r&&(e.minValue=t.checkMinValue(e.minValue))})),t.view.parameters=Object.assign(t.view.parameters,e),t.view.init()},this.getValues=function(){return t.model.currentValues},this.setValues=function(e,r){(e||0===e)&&t.model.setCurrentMinValue(e),(r||0===r)&&t.model.setCurrentMaxValue(r)},this.getConfig=function(){return t.view.parameters},this.addObserver=function(e){t.observers.addObserver(e)},this.checkStep=function(e){var r=Math.abs(o.default.parsing(e));return t.isStepValueWrong(r)?t.view.parameters.step:(r%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("step")||(t.view.parameters.isFloat=!1),r)},this.isStepValueWrong=function(e){var r=e>(t.view.parameters.maxValue-t.view.parameters.minValue)/2;return null===e||0===e||r},this.isOthersValuesFloat=function(e){switch(e){case"step":return t.view.parameters.maxValue%1!=0||t.view.parameters.minValue%1!=0;case"maxValue":return t.view.parameters.step%1!=0||t.view.parameters.minValue%1!=0;case"minValue":return t.view.parameters.step%1!=0||t.view.parameters.maxValue%1!=0}},this.checkMaxValue=function(e){var r=o.default.parsing(e);return t.isMaxValueWrong(r)?t.view.parameters.maxValue:(r%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("maxValue")||(t.view.parameters.isFloat=!1),r)},this.isMaxValueWrong=function(e){return null===e||e<=t.view.parameters.minValue},this.checkMinValue=function(e){var r=o.default.parsing(e);return t.isMinValueWrong(r)?t.view.parameters.minValue:(r%1!=0?t.view.parameters.isFloat=!0:t.isOthersValuesFloat("minValue")||(t.view.parameters.isFloat=!1),r)},this.isMinValueWrong=function(e){return null===e||e>=t.view.parameters.maxValue},this.addViewObserver=function(){t.view.observers.addObserver((function(){t.model.currentValues=t.view.currentValues,t.observers.notifyObservers()}))},this.addModelObserver=function(){t.model.observers.addObserver((function(){t.view.currentValues=t.model.currentValues,t.view.renewRunners()}))},this.view=new i.View(e),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue}),this.observers=new a.default,this.addViewObserver(),this.addModelObserver()};t.default=u},function(e,t,r){"use strict";r.r(t),r.d(t,"View",(function(){return d}));var n=r(2),i=r(1),s=r(0);r.d(t,"createElem",(function(){return s.default}));var a=r(4);r.d(t,"Bar",(function(){return a.default}));var o=r(5);r.d(t,"Scale",(function(){return o.default}));var u=r(6),l=r(12),c=r(13),d=function(){function e(e){var t=this;void 0===e&&(e=n.defaultParameters),this.init=function(){t.bar.init(t.parameters.isVertical),t.progressBar.init(t.parameters.isVertical),t.runnerAdditional.init(t.parameters.isVertical),t.runnerMain.init(t.parameters.isVertical),t.track.init(t.parameters),t.scale.init(t.parameters),t.runnerAdditional.hideRunner(),t.parameters.showLabel?(t.runnerAdditional.showLabel(),t.runnerMain.showLabel()):(t.runnerAdditional.hideLabel(),t.runnerMain.hideLabel()),t.parameters.isRange?t.runnerAdditional.showRunner():t.runnerAdditional.hideRunner(),t.runnerAdditional.setPosition(-t.runnerAdditional.getWidth()/2,t.parameters.minValue),t.runnerMain.setPosition(t.bar.getDimension()-t.runnerMain.getWidth()/2,t.parameters.maxValue),t.renewRunners()},this.appendToNode=function(e){e.appendChild(t.bar.elem).appendChild(t.progressBar.elem),t.runnerMain.appendToNode(e),t.runnerAdditional.appendToNode(e),t.scale.marks.map((function(t){e.appendChild(t.elem)})),t.scale.moveMarks(),t.bar.elem.onclick=t.handleBarClick},this.onClickScaleObserver=function(e){var r,n=t.track.convertOffsetToValue(e);r=t.parameters.isRange?t.checkRunnerCloser(n):t.runnerMain,t.handleRunnerMove(t.track.offsetProcessing(n,r))},this.onMoveRunnerObserver=function(e){var r=e.event,n=e.runner;t.handleRunnerMove(t.track.onMoveRunner(r,n))},this.handleRunnerMove=function(e){e.runner.setPosition(e.offset,e.value),e.runner===t.runnerAdditional&&(t.currentValues.currentMinValue=e.value),e.runner===t.runnerMain&&(t.currentValues.currentMaxValue=e.value),t.track.updateProgressBar(),t.observers.notifyObservers()},this.checkRunnerCloser=function(e){return Math.abs(e-t.track.getMainRunnerOffset())<Math.abs(e-t.track.getAdditionalRunnerOffset())?t.runnerMain:t.runnerAdditional},this.handleBarClick=function(e){var r=(t.parameters.isVertical?e.clientY:e.clientX)-t.bar.getPosition()-t.runnerMain.getWidth()/2;t.handleRunnerMove(t.track.offsetProcessing(r,t.checkRunnerCloser(r)))},this.bar=new a.default(e.isVertical),this.progressBar=new c.default(e.isVertical),this.currentValues={currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.observers=new i.default,this.parameters=e,this.scale=new o.default(e,this.onClickScaleObserver),this.runnerAdditional=new u.default(e.isVertical,this.onMoveRunnerObserver),this.runnerMain=new u.default(e.isVertical,this.onMoveRunnerObserver),this.track=new l.default({runnerMain:this.runnerMain,runnerAdditional:this.runnerAdditional,progressBar:this.progressBar,bar:this.bar,parameters:this.parameters})}return e.prototype.renewRunners=function(){this.handleRunnerMove(this.track.offsetProcessing(this.track.convertOffsetToValue(this.currentValues.currentMaxValue),this.runnerMain)),this.handleRunnerMove(this.track.offsetProcessing(this.track.convertOffsetToValue(this.currentValues.currentMinValue),this.runnerAdditional))},e}()},function(e,t,r){"use strict";r.r(t);var n=r(0),i=r(1),s=function(e,t){var r=this;this.getPosition=function(){return r.isVertical?r.elem.getBoundingClientRect().top:r.elem.getBoundingClientRect().left},this.setPosition=function(e,t){r.elem.innerHTML=t+"",r.value=t,r.isVertical?(r.elem.style.left="50%",r.elem.style.top=e+"%",r.elem.style.marginTop=-r.getDimension()/2+"px",r.elem.style.marginLeft="-45px"):(r.elem.style.top="50%",r.elem.style.left=e+"%",r.elem.style.marginLeft=-r.getDimension()/2+"px",r.elem.style.marginTop="15px")},this.getDimension=function(){return r.isVertical?r.elem.getBoundingClientRect().height:r.elem.getBoundingClientRect().width},this.init=function(e){r.isVertical=e,r.isVertical?r.elem.classList.add("slider__mark_position_vertical"):r.elem.classList.remove("slider__mark_position_vertical")},this.handleMarkClick=function(){r.observers.notifyObserversData(r.value)},this.elem=Object(n.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.observers.addObserver(t),this.elem.onclick=this.handleMarkClick};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(n.default)("slider__button"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,r){t.elem.innerHTML=r+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(n.default)("slider__button-label"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=function(e){var t=this;this.onMoveRunner=function(e,r){var n=(t.parameters.isVertical?e.clientY:e.clientX)-t.bar.getPosition()-t.runnerAdditional.getWidth()/2;return t.offsetProcessing(n,r)},this.offsetProcessing=function(e,r){var n,i;return i=t.checkRunnerOffset(e,r),{runner:r,offset:i=(n=t.roundOffsetButt(i))[0],value:n[1]}},this.convertOffsetToValue=function(e){return(e-t.parameters.minValue)/(t.parameters.maxValue-t.parameters.minValue)*t.bar.getDimension()-t.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=t.runnerMain.getPosition()-t.bar.getPosition()+t.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return t.parameters.isRange?t.runnerAdditional.getPosition()-t.bar.getPosition()+t.runnerMain.getWidth()/2:0},this.updateProgressBar=function(){t.progressBar.init(t.parameters.isVertical),t.progressBar.setPosition(t.getAdditionalRunnerOffset()),t.progressBar.setDimension(t.getMainRunnerOffset()-t.getAdditionalRunnerOffset())},this.init=function(e){t.parameters=e},this.checkRunnerOffset=function(e,r){var n=t.parameters.step*t.bar.getDimension()/(t.parameters.maxValue-t.parameters.minValue),i=n/1.5>t.runnerMain.getWidth()?n/1.5:t.runnerMain.getWidth();return r===t.runnerAdditional?e>t.runnerMain.getPosition()-t.bar.getPosition()-i&&(e=t.runnerMain.getPosition()-t.bar.getPosition()-i):r===t.runnerMain&&e<t.runnerAdditional.getPosition()-t.bar.getPosition()+i&&(e=t.runnerAdditional.getPosition()-t.bar.getPosition()+i),e},this.roundOffsetButt=function(e){var r=t.parameters.minValue+(e+t.runnerMain.getWidth()/2)*(t.parameters.maxValue-t.parameters.minValue)/t.bar.getDimension(),n=t.round(r,t.parameters.step);t.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=t.convertOffsetToValue(n);return i<-t.runnerMain.getWidth()/2&&(i=-t.runnerMain.getWidth()/2,n=t.parameters.minValue),i>t.bar.getDimension()-t.runnerMain.getWidth()/2&&(i=t.bar.getDimension()-t.runnerMain.getWidth()/2,n=t.parameters.maxValue),[i,n]},this.round=function(e,r){var n=Math.trunc(e/r),i=+(e-n*r).toFixed(2);return e<0?Math.abs(i)<r/2?n*r:(n-1)*r:e<=t.parameters.minValue?t.parameters.minValue:e>=t.parameters.maxValue?t.parameters.maxValue:i<r/2?n*r:(n+1)*r},this.bar=e.bar,this.runnerMain=e.runnerMain,this.runnerAdditional=e.runnerAdditional,this.progressBar=e.progressBar,this.parameters=e.parameters};t.default=n},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.init=function(e){t.isVertical=e},this.elem=Object(n.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(){function e(e){this.currentValues=e,this.observers=new n.default}return e.prototype.setCurrentMinValue=function(e){this.currentValues.currentMinValue!==e&&(this.currentValues.currentMinValue=e,this.observers.notifyObservers())},e.prototype.setCurrentMaxValue=function(e){this.currentValues.currentMaxValue!==e&&(this.currentValues.currentMaxValue=e,this.observers.notifyObservers())},e}();t.default=i},function(e,t,r){var n={"./Controller/Controller.ts":7,"./Controller/blocks/parsingDigits/ParsingDigits.ts":3,"./Model/Model.ts":14,"./View/View.ts":8,"./View/blocks/Knob/Knob.ts":10,"./View/blocks/Tooltip/Tooltip.ts":11,"./View/blocks/bar/Bar.ts":4,"./View/blocks/createElem/createElem.ts":0,"./View/blocks/progressBar/ProgressBar.ts":13,"./View/blocks/runner/Runner.ts":6,"./View/blocks/scale/Scale.ts":5,"./View/blocks/scale/mark/Mark.ts":9,"./View/blocks/track/Track.ts":12,"./makeObservableObject/MakeObservableObject.ts":1,"./slider.ts":16,"./style.scss":17,"./types.ts":2};function i(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=s,e.exports=i,i.id=15},function(e,t,r){"use strict";r.r(t);var n,i,s,a=r(7),o=function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};n=jQuery,i={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1},s={init:function(e){if(!n(this).data("slider")){var t=o({},i),r=new a.default(n.extend(t,e));n(this).data("slider",r),r.appendToNode(n(this))}},update:function(e){n(this).data("slider").updateConfig(e)},getConfig:function(){return n(this).data("slider").getConfig()},setValues:function(e){n(this).data("slider").setValues(e.currentMinValue,e.currentMaxValue)},inputsAttach:function(e){var t=n(this).data("slider");t.addObserver((function(){e.minValueInput.val(t.getValues().currentMinValue),e.maxValueInput.val(t.getValues().currentMaxValue),e.maxValue.val(t.getConfig().maxValue),e.minValue.val(t.getConfig().minValue),e.step.val(t.getConfig().step)}))}},n.fn.omfgslider=function(e){return s[e]?s[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void n.error("Метод "+e+" не найден в плагине jQuery.omfgslider"):s.init.apply(this,arguments)}},function(e,t,r){},,function(e,t,r){"use strict";r.r(t);var n;r.p;(n=r(15)).keys().forEach(n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,