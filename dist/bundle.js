!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=14)}([function(e,t,i){"use strict";i.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,i){"use strict";i.r(t);var n=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<i;t++)for(var s=arguments[t],a=0,r=s.length;a<r;a++,o++)n[o]=s[a];return n},o=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.map((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t++){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(){n(this.observers).map((function(e){return e()}))},e}();t.default=o},function(e,t,i){"use strict";i.r(t);var n=i(0),o=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(n.default)("slider__button"),this.isVertical=e};t.default=o},function(e,t,i){"use strict";i.r(t);var n=i(0),o=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,i){t.elem.innerHTML=i+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(n.default)("slider__button-label"),this.isVertical=e};t.default=o},function(e,t,i){"use strict";i.r(t);var n=function(){function e(){}return e.parsing=function(e){if("number"==typeof e)return e;if("string"==typeof e){if(/^-?\d+[\.,]\d+$/.test(e))return parseFloat(e);if(/^-?\d+$/.test(e))return parseInt(e)}return null},e}();t.default=n},function(e,t,i){"use strict";i.r(t);var n=i(0),o=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__scale_position_vertical"):t.elem.classList.remove("slider__scale_position_vertical")},this.elem=Object(n.default)("slider__scale"),this.isVertical=e};t.default=o},function(e,t,i){"use strict";i.r(t);var n=i(0),o=function(){var e=this;this.init=function(t,i,n,o){void 0===o&&(o=!1),e.mark1.innerHTML=t+"",e.mark4.innerHTML=i+"",o?(e.mark2.innerHTML=(t+(i-t)/3).toFixed(2),e.mark3.innerHTML=(t+2*(i-t)/3).toFixed(2)):(e.mark2.innerHTML=t+Math.round((i-t)/3)+"",e.mark3.innerHTML=t+Math.round(2*(i-t)/3)+""),n?(e.mark1.classList.remove("slider__graduation-mark_offset_left"),e.mark1.classList.add("slider__graduation-mark_offset_top"),e.mark4.classList.remove("slider__graduation-mark_offset_right"),e.mark4.classList.add("slider__graduation-mark_offset_bottom"),e.gradElem.classList.add("slider__graduation_position_vertical")):(e.mark1.classList.add("slider__graduation-mark_offset_left"),e.mark1.classList.remove("slider__graduation-mark_offset_top"),e.mark4.classList.add("slider__graduation-mark_offset_right"),e.mark4.classList.remove("slider__graduation-mark_offset_bottom"),e.gradElem.classList.remove("slider__graduation_position_vertical"))},this.gradElem=Object(n.default)("slider__graduation"),this.mark1=Object(n.default)("slider__graduation-mark"),this.mark2=Object(n.default)("slider__graduation-mark"),this.mark3=Object(n.default)("slider__graduation-mark"),this.mark4=Object(n.default)("slider__graduation-mark"),this.gradElem.appendChild(this.mark1),this.gradElem.appendChild(this.mark2),this.gradElem.appendChild(this.mark3),this.gradElem.appendChild(this.mark4)};t.default=o},function(e,t,i){"use strict";i.r(t);var n=i(0),o=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.init=function(e){t.isVertical=e},this.elem=Object(n.default)("slider__scale-filling"),this.isVertical=e};t.default=o},function(e,t,i){"use strict";i.r(t);var n=i(9),o=i(10),s=i(1),a=i(4),r=function(e,t,i,r,l,u,c){var d=this;void 0===e&&(e=0),void 0===t&&(t=1e3),void 0===i&&(i=1),void 0===r&&(r=!1),void 0===l&&(l=!1),void 0===u&&(u=!1),void 0===c&&(c=!1),this.append=function(e){d.view.append(e.get(0)),d.view.init()},this.checkStep=function(e){var t=Math.abs(a.default.parsing(e));return null===t||0===t||t>=d.view.maxValue-d.view.minValue?(console.log("Wrong value of the step"),d.view.step):(t%1!=0?d.view.isFloat=!0:d.view.maxValue%1==0&&d.view.minValue%1==0&&(d.view.isFloat=!1),t)},this.checkMaxValue=function(e){var t=a.default.parsing(e);return null===t||t<=d.view.minValue?(console.log("Wrong value of the maxValue"),d.view.maxValue):(t%1!=0?d.view.isFloat=!0:d.view.step%1==0&&d.view.minValue%1==0&&(d.view.isFloat=!1),t)},this.checkMinValue=function(e){var t=a.default.parsing(e);return null===t||t>=d.view.maxValue?(console.log("Wrong value of the minValue"),d.view.minValue):(t%1!=0?d.view.isFloat=!0:d.view.maxValue%1==0&&d.view.step%1==0&&(d.view.isFloat=!1),t)},this.update=function(e){Object.keys(e).map((function(t){void 0!==d.view[t]&&("step"===t?d.view.step=d.checkStep(e[t]):"maxValue"===t?d.view.maxValue=d.checkMaxValue(e[t]):"minValue"===t?d.view.minValue=d.checkMinValue(e[t]):d.view[t]=e[t])})),d.view.init()},this.getValues=function(){return[d.model.curMinValue,d.model.curMaxValue]},this.setValues=function(e,t){e&&d.model.setCurMinValue(e),t&&d.model.setCurMaxValue(t)},this.getConfig=function(){return{minValue:d.view.minValue,maxValue:d.view.maxValue,step:d.view.step,isRange:d.view.isRange,isVertical:d.view.isVertical,showLabel:d.view.showLabel,isFloat:d.view.isFloat}},this.addObserver=function(e){d.observers.addObserver(e)},this.view=new n.View(e,t,i,r,l,u,c),this.model=new o.default(e,t),this.observers=new s.default,this.view.observers.addObserver((function(){d.model.curMinValue=d.view.curMinValue,d.model.curMaxValue=d.view.curMaxValue,d.observers.notifyObservers()})),this.model.observers.addObserver((function(){var e=d.model.curMinValue,t=d.model.curMaxValue;d.view.butt1Move(d.view.offsetValueConv(e),e),d.view.butt2Move(d.view.offsetValueConv(t),t),d.observers.notifyObservers()}))};t.default=r},function(e,t,i){"use strict";i.r(t),i.d(t,"View",(function(){return c}));var n=i(1),o=i(0);i.d(t,"createElem",(function(){return o.default}));var s=i(5);i.d(t,"Scale",(function(){return s.default}));var a=i(6);i.d(t,"Graduation",(function(){return a.default}));var r=i(2);i.d(t,"Button",(function(){return r.default}));var l=i(3);i.d(t,"Label",(function(){return l.default}));var u=i(7);i.d(t,"ScaleFilling",(function(){return u.default}));var c=function(){function e(e,t,i,o,c,d,f){var m=this;void 0===e&&(e=0),void 0===t&&(t=1e3),void 0===i&&(i=1),void 0===o&&(o=!1),void 0===c&&(c=!1),void 0===d&&(d=!1),void 0===f&&(f=!1),this.getStart=function(){return m.isRange?m.button1.getPosition()-m.scale.getPosition()+m.button1.getWidth()/2:0},this.getEnd=function(){return m.button2.getPosition()-m.scale.getPosition()+m.button2.getWidth()/2},this.updateElems=function(){m.scaleFilling.init(m.isVertical),m.scaleFilling.setPosition(m.getStart()),m.scaleFilling.setDimension(m.getEnd()-m.getStart()),m.observers.notifyObservers()},this.round=function(e,t){var i=Math.trunc(e/t),n=+(e-i*t).toFixed(2);return e<0?Math.abs(n)<t/2?i*t:(i-1)*t:e<=m.minValue?m.minValue:e>=m.maxValue?m.maxValue:n<t/2?i*t:(i+1)*t},this.roundOffsetButt=function(e){var t=m.minValue+(e+m.button2.getWidth()/2)*(m.maxValue-m.minValue)/m.scale.getDimension(),i=m.round(t,m.step);return m.isFloat&&(i=parseFloat(i.toFixed(2))),[m.offsetValueConv(i),i]},this.offsetValueConv=function(e){return(e-m.minValue)/(m.maxValue-m.minValue)*m.scale.getDimension()-m.button2.getWidth()/2},this.butt1Move=function(e,t){m.button1.setPosition(e),m.label1.setPosition(e+m.button1.getWidth()/2,t),t<m.minValue&&(t=m.minValue),m.curMinValue=t,m.updateElems()},this.butt1OffsetCheck=function(e){var t;e<-m.button1.getWidth()/2&&(e=-m.button1.getWidth()/2,t=m.minValue);var i=m.step*m.scale.getDimension()/(m.maxValue-m.minValue),n=i/1.5>m.button1.getWidth()?i/1.5:m.button1.getWidth();return e>m.button2.getPosition()-m.scale.getPosition()-n&&(e=m.button2.getPosition()-m.scale.getPosition()-n),[e,t]},this.onMouseMove1=function(e){var t,i,n,o,s=(m.isVertical?e.clientY:e.clientX)-m.scale.getPosition()-m.button2.getWidth()/2;o=(t=m.butt1OffsetCheck(s))[0],void 0===(n=t[1])&&(o=(i=m.roundOffsetButt(o))[0],n=i[1]),m.butt1Move(o,n)},this.onMouseUp1=function(){document.removeEventListener("mouseup",m.onMouseUp1),document.removeEventListener("mousemove",m.onMouseMove1)},this.butt2Move=function(e,t){m.button2.setPosition(e),m.label2.setPosition(e+m.button2.getWidth()/2,t),t<m.minValue?t=m.minValue:t>m.maxValue&&(t=m.maxValue),m.curMaxValue=t,m.updateElems()},this.butt2OffsetCheck=function(e){var t;m.isRange||e<-m.button2.getWidth()/2&&(e=-m.button2.getWidth()/2,t=m.minValue),e>m.scale.getDimension()-m.button2.getWidth()/2&&(e=m.scale.getDimension()-m.button2.getWidth()/2,t=m.maxValue);var i=m.step*m.scale.getDimension()/(m.maxValue-m.minValue),n=i/1.5>m.button1.getWidth()?i/1.5:m.button1.getWidth();return e<m.button1.getPosition()-m.scale.getPosition()+n&&(e=m.button1.getPosition()-m.scale.getPosition()+n),[e,t]},this.onMouseMove2=function(e){var t,i,n,o,s=(m.isVertical?e.clientY:e.clientX)-m.scale.getPosition()-m.button2.getWidth()/2;o=(t=m.butt2OffsetCheck(s))[0],void 0===(n=t[1])&&(o=(i=m.roundOffsetButt(o))[0],n=i[1]),m.butt2Move(o,n)},this.onMouseUp2=function(){document.removeEventListener("mouseup",m.onMouseUp2),document.removeEventListener("mousemove",m.onMouseMove2)},this.butt1CloserCheck=function(e){return Math.abs(e-m.button1.getPosition()-m.button1.getWidth()/2)<Math.abs(e-m.button2.getPosition()-m.button2.getWidth()/2)},this.scaleOnclick=function(e){if(m.isRange){var t=m.isVertical?e.clientY:e.clientX;m.butt1CloserCheck(t)?m.onMouseMove1(e):m.onMouseMove2(e)}else m.onMouseMove2(e)},this.interMarkHandler=function(e){var t,i,n,o=(e-m.minValue)/(m.maxValue-m.minValue)*m.scale.getDimension();if(i=(t=m.roundOffsetButt(o-m.button2.getWidth()/2))[0],n=t[1],m.isRange){var s=o+m.scale.getPosition();m.butt1CloserCheck(s)?m.butt1Move(i,n):m.butt2Move(i,n)}else m.butt2Move(i,n)},this.mark1Onclick=function(){var e=-m.button2.getWidth()/2,t=m.minValue;m.isRange?m.butt1Move(e,t):m.butt2Move(e,t)},this.mark4Onclick=function(){var e=m.scale.getDimension()-m.button2.getWidth()/2;m.butt2Move(e,m.maxValue)},this.mark2Onclick=function(){var e=m.isFloat?parseFloat(m.graduation.mark2.innerHTML):parseInt(m.graduation.mark2.innerHTML);m.interMarkHandler(e)},this.mark3Onclick=function(){var e=m.isFloat?parseFloat(m.graduation.mark3.innerHTML):parseInt(m.graduation.mark3.innerHTML);m.interMarkHandler(e)},this.checkValues=function(){"number"!=typeof m.maxValue&&console.error("Maxvalue should be a number"),"number"!=typeof m.minValue&&console.error("Maxvalue should be a number"),"number"!=typeof m.step&&console.error("Step should be a number"),"boolean"!=typeof m.isRange&&console.error("isRange should be a boolean"),"boolean"!=typeof m.isVertical&&console.error("isVertical should be a boolean"),"boolean"!=typeof m.showLabel&&console.error("ShowLabel should be a boolean"),m.step>m.maxValue-m.minValue&&(m.step=m.maxValue-m.minValue,console.error("Step is setted to the max"))},this.init=function(){m.scale.init(m.isVertical),m.scaleFilling.init(m.isVertical),m.graduation.init(m.minValue,m.maxValue,m.isVertical,m.isFloat),m.button1.init(m.isVertical),m.button2.init(m.isVertical),m.label1.init(m.isVertical),m.label2.init(m.isVertical),m.button1.elem.style.display="none",m.label1.elem.style.display="none",m.showLabel?(m.label1.elem.style.display="block",m.label2.elem.style.display="block"):(m.label1.elem.style.display="none",m.label2.elem.style.display="none"),m.isRange?m.button1.elem.style.display="block":(m.button1.elem.style.display="none",m.label1.elem.style.display="none"),m.button1.setPosition(-m.button1.getWidth()/2),m.button2.setPosition(m.scale.getDimension()-m.button2.getWidth()/2),m.label1.setPosition(m.getStart(),m.minValue),m.label2.setPosition(m.getEnd(),m.maxValue),m.isVertical?m.graduation.gradElem.style.height=m.scale.getDimension()+"px":m.graduation.gradElem.style.height="20px",m.renew(),m.updateElems()},this.append=function(e){e.appendChild(m.scale.elem).appendChild(m.scaleFilling.elem),e.appendChild(m.button1.elem),e.appendChild(m.label1.elem),e.appendChild(m.graduation.gradElem),e.appendChild(m.button2.elem),e.appendChild(m.label2.elem),m.scale.elem.onclick=m.scaleOnclick,m.graduation.mark1.onclick=m.mark1Onclick,m.graduation.mark2.onclick=m.mark2Onclick,m.graduation.mark3.onclick=m.mark3Onclick,m.graduation.mark4.onclick=m.mark4Onclick,m.button1.elem.onmousedown=function(e){e.preventDefault(),document.addEventListener("mousemove",m.onMouseMove1),document.addEventListener("mouseup",m.onMouseUp1)},m.button2.elem.onmousedown=function(e){e.preventDefault(),document.addEventListener("mousemove",m.onMouseMove2),document.addEventListener("mouseup",m.onMouseUp2)}},this.scale=new s.default(c),this.button1=new r.default(c),this.button2=new r.default(c),this.label1=new l.default(c),this.label2=new l.default(c),this.scaleFilling=new u.default(c),this.graduation=new a.default,this.minValue=e,this.maxValue=t,this.curMinValue=e,this.curMaxValue=t,this.step=i,this.isRange=o,this.isVertical=c,this.showLabel=d,this.isFloat=f,this.observers=new n.default}return e.prototype.renew=function(){var e,t,i,n,o,s,a=this.offsetValueConv(this.curMaxValue);if(s=(e=this.butt2OffsetCheck(a))[0],void 0===(o=e[1])&&(s=(t=this.roundOffsetButt(s))[0],o=t[1]),this.butt2Move(s,o),this.isRange){var r,l,u=this.offsetValueConv(this.curMinValue);l=(i=this.butt1OffsetCheck(u))[0],void 0===(r=i[1])&&(l=(n=this.roundOffsetButt(l))[0],r=n[1]),this.butt1Move(l,r)}},e}()},function(e,t,i){"use strict";i.r(t);var n=i(1),o=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=1e3),this.curMinValue=e,this.curMaxValue=t,this.observers=new n.default}return e.prototype.setCurMinValue=function(e){this.curMinValue!=e&&(this.curMinValue=e,this.observers.notifyObservers())},e.prototype.setCurMaxValue=function(e){this.curMaxValue!=e&&(this.curMaxValue=e,this.observers.notifyObservers())},e}();t.default=o},function(e,t,i){var n={"./blocks/button/Button.ts":2,"./blocks/controller/Controller.ts":8,"./blocks/createElem/createElem.ts":0,"./blocks/graduation/Graduation.ts":6,"./blocks/label/Label.ts":3,"./blocks/makeObservableObject/MakeObservableObject.ts":1,"./blocks/model/Model.ts":10,"./blocks/parsingDigits/ParsingDigits.ts":4,"./blocks/scale/Scale.ts":5,"./blocks/scaleFilling/ScaleFilling.ts":7,"./blocks/view/View.ts":9,"./pluginWrapper.ts":12,"./styles/style.scss":13};function o(e){var t=s(e);return i(t)}function s(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=s,e.exports=o,o.id=11},function(e,t,i){"use strict";i.r(t);var n,o,s,a=i(8),r=function(){return(r=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var o in t=arguments[i])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},l=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<i;t++)for(var s=arguments[t],a=0,r=s.length;a<r;a++,o++)n[o]=s[a];return n};n=jQuery,o={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1},s={init:function(e){if(!n(this).data("slider")){var t=r({},o),i=new(a.default.bind.apply(a.default,l([void 0],Object.values(n.extend(t,e)))));n(this).data("slider",i),i.append(n(this))}},update:function(e){n(this).data("slider").update(e)},getConfig:function(){return n(this).data("slider").getConfig()},setValues:function(e){n(this).data("slider").setValues(e.curMinValue,e.curMaxValue)},inputsAttach:function(e){var t=n(this).data("slider");t.addObserver((function(){e.minValueIn.val(t.getValues()[0]),e.maxValueIn.val(t.getValues()[1])}))}},n.fn.omfgslider=function(e){return s[e]?s[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void n.error("Метод "+e+" не найден в плагине jQuery.omfgslider"):s.init.apply(this,arguments)}},function(e,t,i){},function(e,t,i){"use strict";i.r(t);var n;i.p;(n=i(11)).keys().forEach(n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,