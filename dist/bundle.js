!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t,n){"use strict";n.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,n){"use strict";n.r(t);var r=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)r[i]=s[a];return r},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.map((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t++){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(){r(this.observers).map((function(e){return e()}))},e.prototype.notifyObserversData=function(e){r(this.observers).map((function(t){return t(e)}))},e}();t.default=i},function(e,t,n){"use strict";n.r(t),n.d(t,"defaultParameters",(function(){return r}));var r={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1}},function(e,t,n){"use strict";n.r(t);var r=function(){function e(){}return e.parsing=function(e){if("number"==typeof e)return e;if("string"==typeof e){if(/^-?\d+[\.,]\d+$/.test(e))return parseFloat(e);if(/^-?\d+$/.test(e))return parseInt(e)}return null},e}();t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__scale_position_vertical"):t.elem.classList.remove("slider__scale_position_vertical")},this.elem=Object(r.default)("slider__scale"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(9),i=n(1),s=function(e,t){var n=this;this.init=function(e){n.parameters=e,n.moveMarks()},this.createMarks=function(){for(var e=0;e<5;e++){var t=new r.default(n.parameters.isVertical,n.handleScaleClick);n.marks.push(t)}},this.handleScaleClick=function(e){n.observers.notifyObserversData(e)},this.moveMarks=function(){n.marks.map((function(e,t){if(e.init(n.parameters.isVertical),0===t)e.setPosition(0,n.parameters.minValue);else if(t===n.marks.length-1)e.setPosition(100,n.parameters.maxValue);else{var r=n.round(n.parameters.minValue+(n.parameters.maxValue-n.parameters.minValue)/(n.marks.length-1)*t);n.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=(r-n.parameters.minValue)/(n.parameters.maxValue-n.parameters.minValue);e.setPosition(100*i,r)}}))},this.round=function(e){var t=Math.trunc(e/n.parameters.step),r=+(e-t*n.parameters.step).toFixed(2);return e<0?Math.abs(r)<n.parameters.step/2?t*n.parameters.step:(t-1)*n.parameters.step:r<n.parameters.step/2?t*n.parameters.step:(t+1)*n.parameters.step},this.marks=[],this.parameters=e,this.createMarks(),this.init(e),this.observers=new i.default,this.observers.addObserver(t)};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(10),i=n(11),s=n(1),a=function(e,t){var n=this;this.getPosition=function(){return n.button.getPosition()},this.setPosition=function(e,t){n.label.setPosition(e+n.button.getWidth()/2,t),n.button.setPosition(e)},this.init=function(e){n.button.init(e),n.label.init(e)},this.getWidth=function(){return n.button.getWidth()},this.hideRunner=function(){n.button.elem.style.display="none",n.label.elem.style.display="none"},this.hideLabel=function(){n.label.elem.style.display="none"},this.showLabel=function(){n.label.elem.style.display="block"},this.showRunner=function(){n.button.elem.style.display="block"},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",n.handleRunnerMouseMove),document.addEventListener("mouseup",n.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){n.observers.notifyObserversData({event:e,runner:n})},this.handleRunnerMouseUp=function(e){document.removeEventListener("mouseup",n.handleRunnerMouseUp),document.removeEventListener("mousemove",n.handleRunnerMouseMove)},this.appendToNode=function(e){[n.button.elem,n.label.elem].map((function(t){e.appendChild(t),t.onmousedown=n.handleRunnerMouseDown}))},this.isVertical=e,this.button=new r.default(e),this.label=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(2),i=n(8),s=n(14),a=n(1),o=n(3),u=function(e){var t=this;void 0===e&&(e=r.defaultParameters),this.appendToNode=function(e){t.view.appendToNode(e.get(0)),t.view.init()},this.checkStep=function(e){var n=Math.abs(o.default.parsing(e));return null===n||0===n||n>(t.view.parameters.maxValue-t.view.parameters.minValue)/2?t.view.parameters.step:(n%1!=0?t.view.parameters.isFloat=!0:t.view.parameters.maxValue%1==0&&t.view.parameters.minValue%1==0&&(t.view.parameters.isFloat=!1),n)},this.checkMaxValue=function(e){var n=o.default.parsing(e);return null===n||n<=t.view.parameters.minValue?t.view.parameters.maxValue:(n%1!=0?t.view.parameters.isFloat=!0:t.view.parameters.step%1==0&&t.view.parameters.minValue%1==0&&(t.view.parameters.isFloat=!1),n)},this.checkMinValue=function(e){var n=o.default.parsing(e);return null===n||n>=t.view.parameters.maxValue?t.view.parameters.minValue:(n%1!=0?t.view.parameters.isFloat=!0:t.view.parameters.maxValue%1==0&&t.view.parameters.step%1==0&&(t.view.parameters.isFloat=!1),n)},this.updateConfig=function(e){var n=t.view.parameters;Object.keys(e).map((function(r){"step"===r?n.step=t.checkStep(e.step):"maxValue"===r?n.maxValue=t.checkMaxValue(e.maxValue):"minValue"===r?n.minValue=t.checkMinValue(e.minValue):n[r]=e[r]})),t.view.parameters=Object.assign(t.view.parameters,n),t.view.init()},this.getValues=function(){return t.model.currentValues},this.setValues=function(e,n){(e||0===e)&&t.model.setCurrentMinValue(e),(n||0===n)&&t.model.setCurrentMaxValue(n)},this.getConfig=function(){return t.view.parameters},this.addObserver=function(e){t.observers.addObserver(e)},this.view=new i.View(e),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue}),this.observers=new a.default,this.view.observers.addObserver((function(){t.model.currentValues=t.view.currentValues,t.observers.notifyObservers()})),this.model.observers.addObserver((function(){t.view.currentValues=t.model.currentValues,t.view.renewRunners()}))};t.default=u},function(e,t,n){"use strict";n.r(t),n.d(t,"View",(function(){return f}));var r=n(2),i=n(1),s=n(0);n.d(t,"createElem",(function(){return s.default}));var a=n(4);n.d(t,"Bar",(function(){return a.default}));var o=n(5);n.d(t,"Scale",(function(){return o.default}));var u=n(6),l=n(12),c=n(13),f=function(){function e(e){var t=this;void 0===e&&(e=r.defaultParameters),this.onClickScaleObserver=function(e){var n,r=t.track.convertOffsetToValue(e);n=t.parameters.isRange?t.checkRunnerCloser(r):t.runnerMain,t.handleRunnerMove(t.track.offsetProcessing(r,n))},this.onMoveRunnerObserver=function(e){var n=e.event,r=e.runner;t.handleRunnerMove(t.track.onMoveRunner(n,r))},this.handleRunnerMove=function(e){e.runner.setPosition(e.offset,e.value),e.runner===t.runnerAdditional&&(t.currentValues.currentMinValue=e.value),e.runner===t.runnerMain&&(t.currentValues.currentMaxValue=e.value),t.track.updateProgressBar(),t.observers.notifyObservers()},this.checkRunnerCloser=function(e){return Math.abs(e-t.track.getMainRunnerOffset())<Math.abs(e-t.track.getAdditionalRunnerOffset())?t.runnerMain:t.runnerAdditional},this.handleBarClick=function(e){var n=(t.parameters.isVertical?e.clientY:e.clientX)-t.bar.getPosition()-t.runnerMain.getWidth()/2;t.handleRunnerMove(t.track.offsetProcessing(n,t.checkRunnerCloser(n)))},this.init=function(){t.bar.init(t.parameters.isVertical),t.progressBar.init(t.parameters.isVertical),t.runnerAdditional.init(t.parameters.isVertical),t.runnerMain.init(t.parameters.isVertical),t.track.init(t.parameters),t.scale.init(t.parameters),t.runnerAdditional.hideRunner(),t.parameters.showLabel?(t.runnerAdditional.showLabel(),t.runnerMain.showLabel()):(t.runnerAdditional.hideLabel(),t.runnerMain.hideLabel()),t.parameters.isRange?t.runnerAdditional.showRunner():t.runnerAdditional.hideRunner(),t.runnerAdditional.setPosition(-t.runnerAdditional.getWidth()/2,t.parameters.minValue),t.runnerMain.setPosition(t.bar.getDimension()-t.runnerMain.getWidth()/2,t.parameters.maxValue),t.renewRunners()},this.appendToNode=function(e){e.appendChild(t.bar.elem).appendChild(t.progressBar.elem),t.runnerMain.appendToNode(e),t.runnerAdditional.appendToNode(e),t.scale.marks.map((function(t){e.appendChild(t.elem)})),t.scale.moveMarks(),t.bar.elem.onclick=t.handleBarClick},this.bar=new a.default(e.isVertical),this.progressBar=new c.default(e.isVertical),this.currentValues={currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.observers=new i.default,this.parameters=e,this.scale=new o.default(e,this.onClickScaleObserver),this.runnerAdditional=new u.default(e.isVertical,this.onMoveRunnerObserver),this.runnerMain=new u.default(e.isVertical,this.onMoveRunnerObserver),this.track=new l.default({runnerMain:this.runnerMain,runnerAdditional:this.runnerAdditional,progressBar:this.progressBar,bar:this.bar,parameters:this.parameters})}return e.prototype.renewRunners=function(){this.handleRunnerMove(this.track.offsetProcessing(this.track.convertOffsetToValue(this.currentValues.currentMaxValue),this.runnerMain)),this.handleRunnerMove(this.track.offsetProcessing(this.track.convertOffsetToValue(this.currentValues.currentMinValue),this.runnerAdditional))},e}()},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n(1),s=function(e,t){var n=this;this.handleMarkClick=function(){n.observers.notifyObserversData(n.value)},this.getPosition=function(){return n.isVertical?n.elem.getBoundingClientRect().top:n.elem.getBoundingClientRect().left},this.setPosition=function(e,t){n.elem.innerHTML=t+"",n.value=t,n.isVertical?(n.elem.style.left="50%",n.elem.style.top=e+"%",n.elem.style.marginTop=-n.getDimension()/2+"px",n.elem.style.marginLeft="-45px"):(n.elem.style.top="50%",n.elem.style.left=e+"%",n.elem.style.marginLeft=-n.getDimension()/2+"px",n.elem.style.marginTop="15px")},this.getDimension=function(){return n.isVertical?n.elem.getBoundingClientRect().height:n.elem.getBoundingClientRect().width},this.init=function(e){n.isVertical=e,n.isVertical?n.elem.classList.add("slider__mark_position_vertical"):n.elem.classList.remove("slider__mark_position_vertical")},this.elem=Object(r.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.observers.addObserver(t),this.elem.onclick=this.handleMarkClick};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(r.default)("slider__button"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,n){t.elem.innerHTML=n+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(r.default)("slider__button-label"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=function(){function e(e){var t=this;this.onMoveRunner=function(e,n){var r=(t.parameters.isVertical?e.clientY:e.clientX)-t.scale.getPosition()-t.runnerAdditional.getWidth()/2;return t.offsetProcessing(r,n)},this.checkRunnerOffset=function(e,n){var r=t.parameters.step*t.scale.getDimension()/(t.parameters.maxValue-t.parameters.minValue),i=r/1.5>t.runnerMain.getWidth()?r/1.5:t.runnerMain.getWidth();return n===t.runnerAdditional?e>t.runnerMain.getPosition()-t.scale.getPosition()-i&&(e=t.runnerMain.getPosition()-t.scale.getPosition()-i):n===t.runnerMain&&e<t.runnerAdditional.getPosition()-t.scale.getPosition()+i&&(e=t.runnerAdditional.getPosition()-t.scale.getPosition()+i),e},this.roundOffsetButt=function(e){var n=t.parameters.minValue+(e+t.runnerMain.getWidth()/2)*(t.parameters.maxValue-t.parameters.minValue)/t.scale.getDimension(),r=t.round(n,t.parameters.step);t.parameters.isFloat&&(r=parseFloat(r.toFixed(2)));var i=t.convertOffsetToValue(r);return i<-t.runnerMain.getWidth()/2&&(i=-t.runnerMain.getWidth()/2,r=t.parameters.minValue),i>t.scale.getDimension()-t.runnerMain.getWidth()/2&&(i=t.scale.getDimension()-t.runnerMain.getWidth()/2,r=t.parameters.maxValue),[i,r]},this.convertOffsetToValue=function(e){return(e-t.parameters.minValue)/(t.parameters.maxValue-t.parameters.minValue)*t.scale.getDimension()-t.runnerMain.getWidth()/2},this.round=function(e,n){var r=Math.trunc(e/n),i=+(e-r*n).toFixed(2);return e<0?Math.abs(i)<n/2?r*n:(r-1)*n:e<=t.parameters.minValue?t.parameters.minValue:e>=t.parameters.maxValue?t.parameters.maxValue:i<n/2?r*n:(r+1)*n},this.getMainRunnerOffset=function(){var e=t.runnerMain.getPosition()-t.scale.getPosition()+t.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return t.parameters.isRange?t.runnerAdditional.getPosition()-t.scale.getPosition()+t.runnerMain.getWidth()/2:0},this.updateProgressBar=function(){t.progressBar.init(t.parameters.isVertical),t.progressBar.setPosition(t.getAdditionalRunnerOffset()),t.progressBar.setDimension(t.getMainRunnerOffset()-t.getAdditionalRunnerOffset())},this.init=function(e){t.parameters=e},this.scale=e.bar,this.runnerMain=e.runnerMain,this.runnerAdditional=e.runnerAdditional,this.progressBar=e.progressBar,this.parameters=e.parameters}return e.prototype.offsetProcessing=function(e,t){var n,r;return r=this.checkRunnerOffset(e,t),{runner:t,offset:r=(n=this.roundOffsetButt(r))[0],value:n[1]}},e}();t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(0),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.init=function(e){t.isVertical=e},this.elem=Object(r.default)("slider__scale-filling"),this.isVertical=e};t.default=i},function(e,t,n){"use strict";n.r(t);var r=n(1),i=function(){function e(e){this.currentValues=e,this.observers=new r.default}return e.prototype.setCurrentMinValue=function(e){this.currentValues.currentMinValue!==e&&(this.currentValues.currentMinValue=e,this.observers.notifyObservers())},e.prototype.setCurrentMaxValue=function(e){this.currentValues.currentMaxValue!==e&&(this.currentValues.currentMaxValue=e,this.observers.notifyObservers())},e}();t.default=i},function(e,t,n){var r={"./Controller/Controller.ts":7,"./Controller/blocks/parsingDigits/ParsingDigits.ts":3,"./Model/Model.ts":14,"./View/View.ts":8,"./View/blocks/bar/Bar.ts":4,"./View/blocks/button/Button.ts":10,"./View/blocks/createElem/createElem.ts":0,"./View/blocks/label/Label.ts":11,"./View/blocks/mark/Mark.ts":9,"./View/blocks/progressBar/ProgressBar.ts":13,"./View/blocks/runner/Runner.ts":6,"./View/blocks/scale/Scale.ts":5,"./View/blocks/track/Track.ts":12,"./makeObservableObject/MakeObservableObject.ts":1,"./slider.ts":16,"./style.scss":17,"./types.ts":2};function i(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=s,e.exports=i,i.id=15},function(e,t,n){"use strict";n.r(t);var r,i,s,a=n(7),o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};r=jQuery,i={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1},s={init:function(e){if(!r(this).data("slider")){var t=o({},i),n=new a.default(r.extend(t,e));r(this).data("slider",n),n.appendToNode(r(this))}},update:function(e){r(this).data("slider").updateConfig(e)},getConfig:function(){return r(this).data("slider").getConfig()},setValues:function(e){r(this).data("slider").setValues(e.currentMinValue,e.currentMaxValue)},inputsAttach:function(e){var t=r(this).data("slider");t.addObserver((function(){e.minValueInput.val(t.getValues().currentMinValue),e.maxValueInput.val(t.getValues().currentMaxValue),e.maxValue.val(t.getConfig().maxValue),e.minValue.val(t.getConfig().minValue),e.step.val(t.getConfig().step)}))}},r.fn.omfgslider=function(e){return s[e]?s[e].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof e&&e?void r.error("Метод "+e+" не найден в плагине jQuery.omfgslider"):s.init.apply(this,arguments)}},function(e,t,n){},,function(e,t,n){"use strict";n.r(t);var r;n.p;(r=n(15)).keys().forEach(r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,