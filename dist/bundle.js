!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t,i){},function(e,t,i){"use strict";i.r(t);i.p,i(0);var n=function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<i;t++)for(var s=arguments[t],a=0,l=s.length;a<l;a++,o++)n[o]=s[a];return n},o=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.map((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t++){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(){n(this.observers).map((function(e){return e()}))},e}();var s=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t},a=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__scale_position_vertical"):t.elem.classList.remove("slider__scale_position_vertical")},this.elem=s("slider__scale"),this.isVertical=e},l=function(){var e=this;this.init=function(t,i,n,o){void 0===o&&(o=!1),e.mark1.innerHTML=t+"",e.mark4.innerHTML=i+"",o?(e.mark2.innerHTML=(t+(i-t)/3).toFixed(2),e.mark3.innerHTML=(t+2*(i-t)/3).toFixed(2)):(e.mark2.innerHTML=t+Math.round((i-t)/3)+"",e.mark3.innerHTML=t+Math.round(2*(i-t)/3)+""),n?(e.mark1.classList.remove("slider__graduation-mark_offset_left"),e.mark1.classList.add("slider__graduation-mark_offset_top"),e.mark4.classList.remove("slider__graduation-mark_offset_right"),e.mark4.classList.add("slider__graduation-mark_offset_bottom"),e.gradElem.classList.add("slider__graduation_position_vertical")):(e.mark1.classList.add("slider__graduation-mark_offset_left"),e.mark1.classList.remove("slider__graduation-mark_offset_top"),e.mark4.classList.add("slider__graduation-mark_offset_right"),e.mark4.classList.remove("slider__graduation-mark_offset_bottom"),e.gradElem.classList.remove("slider__graduation_position_vertical"))},this.gradElem=s("slider__graduation"),this.mark1=s("slider__graduation-mark"),this.mark2=s("slider__graduation-mark"),this.mark3=s("slider__graduation-mark"),this.mark4=s("slider__graduation-mark"),this.gradElem.appendChild(this.mark1),this.gradElem.appendChild(this.mark2),this.gradElem.appendChild(this.mark3),this.gradElem.appendChild(this.mark4)},r=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=s("slider__button"),this.isVertical=e},u=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,i){t.elem.innerHTML=i+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.init=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=s("slider__button-label"),this.isVertical=e},c=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.init=function(e){t.isVertical=e},this.elem=s("slider__scale-filling"),this.isVertical=e},d=function(e,t,i,n,s,d,m){var h=this;void 0===e&&(e=0),void 0===t&&(t=1e3),void 0===i&&(i=1),void 0===n&&(n=!1),void 0===s&&(s=!1),void 0===d&&(d=!1),void 0===m&&(m=!1),this.getStart=function(){return h.isRange?h.button1.getPosition()-h.scale.getPosition()+h.button1.getWidth()/2:0},this.getEnd=function(){return h.button2.getPosition()-h.scale.getPosition()+h.button2.getWidth()/2},this.updateElems=function(){h.scaleFilling.init(h.isVertical),h.scaleFilling.setPosition(h.getStart()),h.scaleFilling.setDimension(h.getEnd()-h.getStart()),h.isRange||(h.curMinValue=h.minValue),h.observers.notifyObservers()},this.round=function(e,t){var i=Math.floor(e/t),n=e%t;return e<0?Math.abs(n)>t/2?i*t:(i+1)*t:n<t/2?i*t:(i+1)*t},this.roundOffsetButt=function(e){var t=h.minValue+(e+h.button2.getWidth()/2)*(h.maxValue-h.minValue)/h.scale.getDimension(),i=h.round(t,h.step);return h.isFloat&&(i=parseFloat(i.toFixed(2))),i<h.minValue?i=h.minValue:i>h.maxValue&&(i=h.maxValue),[h.offsetValueConv(i),i]},this.offsetValueConv=function(e){return(e-h.minValue)/(h.maxValue-h.minValue)*h.scale.getDimension()-h.button2.getWidth()/2},this.butt1Move=function(e,t){h.button1.setPosition(e),h.label1.setPosition(e+h.button1.getWidth()/2,t),t<h.minValue&&(t=h.minValue),h.curMinValue=t,h.updateElems()},this.butt1OffsetCheck=function(e){var t;e<-h.button1.getWidth()/2&&(e=-h.button1.getWidth()/2,t=h.minValue);var i=h.step*h.scale.getDimension()/(h.maxValue-h.minValue),n=i/1.5>h.button1.getWidth()?i/1.5:h.button1.getWidth();return e>h.button2.getPosition()-h.scale.getPosition()-n&&(e=h.button2.getPosition()-h.scale.getPosition()-n),[e,t]},this.onMouseMove1=function(e){var t,i,n,o,s=(h.isVertical?e.clientY:e.clientX)-h.scale.getPosition()-h.button2.getWidth()/2;o=(t=h.butt1OffsetCheck(s))[0],(n=t[1])||(o=(i=h.roundOffsetButt(o))[0],n=i[1]),h.butt1Move(o,n)},this.onMouseUp1=function(){document.removeEventListener("mouseup",h.onMouseUp1),document.removeEventListener("mousemove",h.onMouseMove1)},this.butt2Move=function(e,t){h.button2.setPosition(e),h.label2.setPosition(e+h.button2.getWidth()/2,t),t<h.minValue?t=h.minValue:t>h.maxValue&&(t=h.maxValue),h.curMaxValue=t,h.updateElems()},this.butt2OffsetCheck=function(e){var t;h.isRange||e<-h.button2.getWidth()/2&&(e=-h.button2.getWidth()/2,t=h.minValue),e>h.scale.getDimension()-h.button2.getWidth()/2&&(e=h.scale.getDimension()-h.button2.getWidth()/2,t=h.maxValue);var i=h.step*h.scale.getDimension()/(h.maxValue-h.minValue),n=i/1.5>h.button1.getWidth()?i/1.5:h.button1.getWidth();return e<h.button1.getPosition()-h.scale.getPosition()+n&&(e=h.button1.getPosition()-h.scale.getPosition()+n),[e,t]},this.onMouseMove2=function(e){var t,i,n,o,s=(h.isVertical?e.clientY:e.clientX)-h.scale.getPosition()-h.button2.getWidth()/2;o=(t=h.butt2OffsetCheck(s))[0],(n=t[1])||(o=(i=h.roundOffsetButt(o))[0],n=i[1]),h.butt2Move(o,n)},this.onMouseUp2=function(){document.removeEventListener("mouseup",h.onMouseUp2),document.removeEventListener("mousemove",h.onMouseMove2)},this.butt1CloserCheck=function(e){return Math.abs(e-h.button1.getPosition()-h.button1.getWidth()/2)<Math.abs(e-h.button2.getPosition()-h.button2.getWidth()/2)},this.scaleOnclick=function(e){if(h.isRange){var t=h.isVertical?e.clientY:e.clientX;h.butt1CloserCheck(t)?h.onMouseMove1(e):h.onMouseMove2(e)}else h.onMouseMove2(e)},this.interMarkHandler=function(e){var t,i,n,o=(e-h.minValue)/(h.maxValue-h.minValue)*h.scale.getDimension();if(i=(t=h.roundOffsetButt(o-h.button2.getWidth()/2))[0],n=t[1],h.isRange){var s=o+h.scale.getPosition();h.butt1CloserCheck(s)?h.butt1Move(i,n):h.butt2Move(i,n)}else h.butt2Move(i,n)},this.mark1Onclick=function(){var e=-h.button2.getWidth()/2,t=h.minValue;h.isRange?h.butt1Move(e,t):h.butt2Move(e,t)},this.mark4Onclick=function(){var e=h.scale.getDimension()-h.button2.getWidth()/2;h.butt2Move(e,h.maxValue)},this.mark2Onclick=function(){var e=h.isFloat?parseFloat(h.graduation.mark2.innerHTML):parseInt(h.graduation.mark2.innerHTML);h.interMarkHandler(e)},this.mark3Onclick=function(){var e=h.isFloat?parseFloat(h.graduation.mark3.innerHTML):parseInt(h.graduation.mark3.innerHTML);h.interMarkHandler(e)},this.checkValues=function(){"number"!=typeof h.maxValue&&console.error("Maxvalue should be a number"),"number"!=typeof h.minValue&&console.error("Maxvalue should be a number"),"number"!=typeof h.step&&console.error("Step should be a number"),"boolean"!=typeof h.isRange&&console.error("isRange should be a boolean"),"boolean"!=typeof h.isVertical&&console.error("isVertical should be a boolean"),"boolean"!=typeof h.showLabel&&console.error("ShowLabel should be a boolean"),h.step>h.maxValue-h.minValue&&(h.step=h.maxValue-h.minValue,console.error("Step is setted to the max"))},this.init=function(){h.scale.init(h.isVertical),h.scaleFilling.init(h.isVertical),h.graduation.init(h.minValue,h.maxValue,h.isVertical,h.isFloat),h.button1.init(h.isVertical),h.button2.init(h.isVertical),h.label1.init(h.isVertical),h.label2.init(h.isVertical),h.button1.elem.style.display="none",h.label1.elem.style.display="none",h.checkValues(),h.showLabel?(h.label1.elem.style.display="block",h.label2.elem.style.display="block"):(h.label1.elem.style.display="none",h.label2.elem.style.display="none"),h.isRange?h.button1.elem.style.display="block":(h.button1.elem.style.display="none",h.label1.elem.style.display="none"),h.button1.setPosition(-h.button1.getWidth()/2),h.button2.setPosition(h.scale.getDimension()-h.button2.getWidth()/2),h.label1.setPosition(h.getStart(),h.minValue),h.label2.setPosition(h.getEnd(),h.maxValue),h.isVertical?h.graduation.gradElem.style.height=h.scale.getDimension()+"px":h.graduation.gradElem.style.height="20px",h.updateElems()},this.append=function(e){e.appendChild(h.scale.elem).appendChild(h.scaleFilling.elem),e.appendChild(h.button1.elem),e.appendChild(h.label1.elem),e.appendChild(h.graduation.gradElem),e.appendChild(h.button2.elem),e.appendChild(h.label2.elem),h.scale.elem.onclick=h.scaleOnclick,h.graduation.mark1.onclick=h.mark1Onclick,h.graduation.mark2.onclick=h.mark2Onclick,h.graduation.mark3.onclick=h.mark3Onclick,h.graduation.mark4.onclick=h.mark4Onclick,h.button1.elem.onmousedown=function(e){e.preventDefault(),document.addEventListener("mousemove",h.onMouseMove1),document.addEventListener("mouseup",h.onMouseUp1)},h.button2.elem.onmousedown=function(e){e.preventDefault(),document.addEventListener("mousemove",h.onMouseMove2),document.addEventListener("mouseup",h.onMouseUp2)}},this.scale=new a(s),this.button1=new r(s),this.button2=new r(s),this.label1=new u(s),this.label2=new u(s),this.scaleFilling=new c(s),this.graduation=new l,this.minValue=e,this.maxValue=t,this.curMinValue=e,this.curMaxValue=t,this.step=i,this.isRange=n,this.isVertical=s,this.showLabel=d,this.isFloat=m,this.observers=new o,this.checkValues()},m=function(){function e(e,t){void 0===e&&(e=0),void 0===t&&(t=1e3),this.curMinValue=e,this.curMaxValue=t,this.observers=new o}return e.prototype.setCurMinValue=function(e){this.curMinValue!=e&&(this.curMinValue=e,this.observers.notifyObservers())},e.prototype.setCurMaxValue=function(e){this.curMaxValue!=e&&(this.curMaxValue=e,this.observers.notifyObservers())},e}(),h=function(e,t,i,n,s,a,l){var r=this;void 0===e&&(e=0),void 0===t&&(t=1e3),void 0===i&&(i=1),void 0===n&&(n=!1),void 0===s&&(s=!1),void 0===a&&(a=!1),void 0===l&&(l=!1),this.append=function(e){r.view.append(e.get(0)),r.view.init()},this.update=function(e){Object.keys(e).map((function(t){void 0!==r.view[t]&&(r.view[t]=e[t])})),r.view.init(),r.view.butt1Move(r.view.butt1OffsetCheck(r.view.offsetValueConv(r.model.curMinValue))[0],r.model.curMinValue),r.view.butt2Move(r.view.butt2OffsetCheck(r.view.offsetValueConv(r.model.curMaxValue))[0],r.model.curMaxValue)},this.getValues=function(){return[r.model.curMinValue,r.model.curMaxValue]},this.setValues=function(e,t){e&&r.model.setCurMinValue(e),t&&r.model.setCurMaxValue(t)},this.getConfig=function(){return{minValue:r.view.minValue,maxValue:r.view.maxValue,step:r.view.step,isRange:r.view.isRange,isVertical:r.view.isVertical,showLabel:r.view.showLabel,isFloat:r.view.isFloat}},this.addObserver=function(e){r.observers.addObserver(e)},this.view=new d(e,t,i,n,s,a,l),this.model=new m(e,t),this.observers=new o,this.view.observers.addObserver((function(){r.model.curMinValue=r.view.curMinValue,r.model.curMaxValue=r.view.curMaxValue,r.observers.notifyObservers()})),this.model.observers.addObserver((function(){var e=r.model.curMinValue,t=r.model.curMaxValue;r.view.butt1Move(r.view.offsetValueConv(e),e),r.view.butt2Move(r.view.offsetValueConv(t),t),r.observers.notifyObservers()}))};!function(e){const t={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!1,isFloat:!1},i={init:function(i){if(!e(this).data("slider")){const n=JSON.parse(JSON.stringify(t)),o=new h(...Object.values(e.extend(n,i)));e(this).data("slider",o),o.append(e(this))}},update:function(t){e(this).data("slider").update(t)},getConfig:function(){return e(this).data("slider").getConfig()},setValues:function(t){e(this).data("slider").setValues(t.curMinValue,t.curMaxValue)},inputsAttach:function(t){const i=e(this).data("slider");i.addObserver(()=>{t.minValueIn.val(i.getValues()[0]),t.maxValueIn.val(i.getValues()[1])})}};e.fn.omfgslider=function(t){return i[t]?i[t].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof t&&t?void e.error(`Метод ${t} не найден в плагине jQuery.omfgslider`):i.init.apply(this,arguments)}}(jQuery)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,