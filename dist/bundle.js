!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=18)}([function(e,t,r){"use strict";r.r(t);var n=function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)n[i]=s[a];return n},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.forEach((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t+=1){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(e,t){n(this.observers).map((function(r){return r(e,t)}))},e}();t.default=i},function(e,t,r){"use strict";r.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,r){"use strict";r.r(t),r.d(t,"defaultParameters",(function(){return n}));var n={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1}},function(e,t,r){"use strict";r.r(t);var n=r(8),i=r(9),s=r(0),a=function(e,t){var r=this;this.getPosition=function(){return r.knob.getPosition()},this.setPosition=function(e,t){r.tooltip.setPosition(e+r.knob.getWidth()/2,t),r.knob.setPosition(e)},this.update=function(e){r.knob.update(e),r.tooltip.update(e)},this.getWidth=function(){return r.knob.getWidth()},this.hideRunner=function(){r.knob.elem.style.display="none",r.tooltip.elem.style.display="none"},this.hideLabel=function(){r.tooltip.elem.style.display="none"},this.showLabel=function(){r.tooltip.elem.style.display="block"},this.showRunner=function(){r.knob.elem.style.display="block"},this.appendToNode=function(e){[r.knob.elem,r.tooltip.elem].forEach((function(t){e.appendChild(t),t.onmousedown=r.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",r.handleRunnerMouseMove),document.addEventListener("mouseup",r.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){r.observers.notifyObservers("MovingRunner",{event:e,runner:r})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",r.handleRunnerMouseUp),document.removeEventListener("mousemove",r.handleRunnerMouseMove)},this.isVertical=e,this.knob=new n.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r(5),s=r(13),a=r(0),o=function(e,t){var r=this;void 0===e&&(e=n.defaultParameters),this.update=function(e){r.observers.notifyObservers("UpdatingConfig",e),r.observers.notifyObservers("GettingConfig")},this.setValues=function(e){r.observers.notifyObservers("ChangingCurrentValueFromPanel",e)},this.renew=function(){r.observers.notifyObservers("GettingConfig"),r.observers.notifyObservers("GettingValues")},this.init=function(e,t){r.observers.addObserver(r.view.observeControllerFromView),r.observers.addObserver(r.model.observeControllerFromModel),r.observers.notifyObservers("AppendingToNode",e.get(0)),r.observers.notifyObservers("UpdatingConfig",t)},this.handleViewChangingValue=function(e,t){"ChangingCurrentValueFromView"===e&&r.observers.notifyObservers("ChangingCurrentValueFromView",t),"SendingConfig"===e&&r.observers.notifyObservers("SendingConfig",t)},this.handleModelSendingValues=function(e,t){"SendingCurrentValues"===e&&(r.observers.notifyObservers("SendingCurrentValues",t),r.observers.notifyObservers("GettingValues")),"SendingCurrentValuesForTracking"===e&&r.observers.notifyObservers("SendingCurrentValuesForTracking",t)},this.view=new i.default(e,this.handleViewChangingValue),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.handleModelSendingValues),this.observers=new a.default,this.init(t,e)};t.default=o},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r(0),s=r(6),a=function(){return(a=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},o=function(e,t){switch(t){case"step":return e.parameters.maxValue%1!=0||e.parameters.minValue%1!=0;case"maxValue":return e.parameters.step%1!=0||e.parameters.minValue%1!=0;case"minValue":return e.parameters.step%1!=0||e.parameters.maxValue%1!=0;default:return!1}},u=function(e,t){var r=this;void 0===e&&(e=n.defaultParameters),this.update=function(e){var t=r.validateConfig(e);r.parameters=t,r.observers.notifyObservers("UpdatingConfig",r.parameters)},this.handleTrackValueChanging=function(e,t){"ChangingCurrentValueFromTrack"===e&&r.observers.notifyObservers("ChangingCurrentValueFromView",t)},this.observeControllerFromView=function(e,t){"SendingCurrentValues"===e&&r.observers.notifyObservers("SendingCurrentValues",t),"UpdatingConfig"===e&&r.update(t),"GettingConfig"===e&&r.observers.notifyObservers("SendingConfig",r.parameters),"AppendingToNode"===e&&r.observers.notifyObservers("AppendingToNode",t)},this.init=function(e){r.observers.addObserver(e),r.observers.addObserver(r.track.observeViewFromTrack),r.observers.notifyObservers("UpdatingConfig",r.parameters)},this.validateConfig=function(e){var t=Object.keys(e).reduce((function(t,n){switch(n){case"step":t.step=r.checkStep(e.step);break;case"maxValue":t.maxValue=r.checkMaxValue(e.maxValue);break;case"minValue":t.minValue=r.checkMinValue(e.minValue);break;case"isRange":"toggle"===e.isRange&&(!0===r.parameters.isRange?t.isRange=!1:t.isRange=!0);break;case"isVertical":"toggle"===e.isVertical&&(!0===r.parameters.isVertical?t.isVertical=!1:t.isVertical=!0);break;case"showLabel":"toggle"===e.showLabel&&(!0===r.parameters.showLabel?t.showLabel=!1:t.showLabel=!0)}return t}),{});return a(a({},r.parameters),t)},this.checkStep=function(e){return!e||e>(r.parameters.maxValue-r.parameters.minValue)/2?r.parameters.step:(e%1!=0?r.parameters.isFloat=!0:o(r,"step")||(r.parameters.isFloat=!1),e)},this.checkMaxValue=function(e){return Number.isNaN(e)||e<=r.parameters.minValue?r.parameters.maxValue:(e%1!=0?r.parameters.isFloat=!0:o(r,"maxValue")||(r.parameters.isFloat=!1),e)},this.checkMinValue=function(e){return Number.isNaN(e)||e>=r.parameters.maxValue?r.parameters.minValue:(e%1!=0?r.parameters.isFloat=!0:o(r,"minValue")||(r.parameters.isFloat=!1),e)},this.observers=new i.default,this.track=new s.default(e,this.handleTrackValueChanging),this.parameters=e,this.init(t)};t.default=u},function(e,t,r){"use strict";r.r(t);var n=r(7),i=r(3),s=r(10),a=r(12),o=r(0),u=function(){function e(e,t){var r=this;this.update=function(e){r.parameters=e,r.bar.update(r.parameters.isVertical),r.progressBar.update(r.parameters.isVertical),r.runnerAdditional.update(r.parameters.isVertical),r.runnerMain.update(r.parameters.isVertical),r.scale.update(r.parameters),r.runnerAdditional.hideRunner(),r.parameters.showLabel?(r.runnerAdditional.showLabel(),r.runnerMain.showLabel()):(r.runnerAdditional.hideLabel(),r.runnerMain.hideLabel()),r.parameters.isRange?r.runnerAdditional.showRunner():r.runnerAdditional.hideRunner(),r.runnerAdditional.setPosition(-r.runnerAdditional.getWidth()/2,r.parameters.minValue),r.runnerMain.setPosition(r.bar.getDimension()-r.runnerMain.getWidth()/2,r.parameters.maxValue)},this.observeViewFromTrack=function(e,t){"SendingCurrentValues"===e&&r.renewRunners(t),"UpdatingConfig"===e&&r.update(t),"AppendingToNode"===e&&r.appendToNode(t)},this.appendToNode=function(e){e.appendChild(r.bar.elem).appendChild(r.progressBar.elem),r.runnerMain.appendToNode(e),r.runnerAdditional.appendToNode(e),r.scale.marks.forEach((function(t){e.appendChild(t.elem)})),r.scale.moveMarks()},this.convertOffsetToValue=function(e){return(e-r.parameters.minValue)*r.bar.getDimension()/(r.parameters.maxValue-r.parameters.minValue)-r.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=r.runnerMain.getPosition()-r.bar.getPosition()+r.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return r.parameters.isRange?r.runnerAdditional.getPosition()-r.bar.getPosition()+r.runnerMain.getWidth()/2:0},this.handleRunnerMove=function(e,t){var n=t.event,i=t.runner;"MovingRunner"===e&&r.moveRunner(r.processRunnerMouseEvent(n,i))},this.moveRunner=function(e){e.runner.setPosition(e.offset,e.value),e.runner===r.runnerAdditional&&r.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMinValue:e.value}),e.runner===r.runnerMain&&r.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMaxValue:e.value}),r.updateProgressBar()},this.processRunnerMouseEvent=function(e,t){var n=(r.parameters.isVertical?e.clientY:e.clientX)-r.bar.getPosition()-r.runnerAdditional.getWidth()/2;return r.processRunnerOffset(n,t)},this.processRunnerOffset=function(e,t){var n,i;return i=r.checkRunnerOffset(e,t),{runner:t,offset:i=(n=r.roundOffsetRunner(i))[0],value:n[1]}},this.checkRunnerOffset=function(e,t){var n=r.parameters.step*r.bar.getDimension()/(r.parameters.maxValue-r.parameters.minValue),i=n/1.5>r.runnerMain.getWidth()?n/1.5:r.runnerMain.getWidth(),s=e;return t===r.runnerAdditional?e>r.runnerMain.getPosition()-r.bar.getPosition()-i&&(s=r.runnerMain.getPosition()-r.bar.getPosition()-i):t===r.runnerMain&&e<r.runnerAdditional.getPosition()-r.bar.getPosition()+i&&(s=r.runnerAdditional.getPosition()-r.bar.getPosition()+i),s},this.roundOffsetRunner=function(e){var t=r.parameters.minValue+(e+r.runnerMain.getWidth()/2)*(r.parameters.maxValue-r.parameters.minValue)/r.bar.getDimension(),n=r.round(t,r.parameters.step);r.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=r.convertOffsetToValue(n);return i<-r.runnerMain.getWidth()/2&&(i=-r.runnerMain.getWidth()/2,n=r.parameters.minValue),i>r.bar.getDimension()-r.runnerMain.getWidth()/2&&(i=r.bar.getDimension()-r.runnerMain.getWidth()/2,n=r.parameters.maxValue),[i,n]},this.round=function(e,t){var n=Math.trunc(e/t),i=+(e-n*t).toFixed(2);return e<0?Math.abs(i)<t/2?n*t:(n-1)*t:e<=r.parameters.minValue?r.parameters.minValue:e>=r.parameters.maxValue?r.parameters.maxValue:i<t/2?n*t:(n+1)*t},this.handleScaleClick=function(e,t){if("ClickOnScale"===e){var n=r.convertOffsetToValue(t),i=void 0;i=r.parameters.isRange?r.checkRunnerCloser(n):r.runnerMain,r.moveRunner(r.processRunnerOffset(n,i))}},this.checkRunnerCloser=function(e){return Math.abs(e-r.getMainRunnerOffset())<Math.abs(e-r.getAdditionalRunnerOffset())?r.runnerMain:r.runnerAdditional},this.handleBarClick=function(e,t){if("ClickOnBar"===e){var n=(r.parameters.isVertical?t.clientY:t.clientX)-r.bar.getPosition()-r.runnerMain.getWidth()/2;r.moveRunner(r.processRunnerOffset(n,r.checkRunnerCloser(n)))}},this.updateProgressBar=function(){r.progressBar.update(r.parameters.isVertical),r.progressBar.setPosition(r.getAdditionalRunnerOffset()),r.progressBar.setDimension(r.getMainRunnerOffset()-r.getAdditionalRunnerOffset())},this.parameters=e,this.runnerMain=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.runnerAdditional=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.progressBar=new a.default(this.parameters.isVertical),this.bar=new n.default(this.parameters.isVertical,this.handleBarClick),this.scale=new s.default(this.parameters,this.handleScaleClick),this.observers=new o.default,this.observers.addObserver(t)}return e.prototype.renewRunners=function(e){this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMaxValue),this.runnerMain)),this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMinValue),this.runnerAdditional))},e}();t.default=u},function(e,t,r){"use strict";r.r(t);var n=r(1),i=r(0),s=function(e,t){var r=this;this.getPosition=function(){return r.isVertical?r.elem.getBoundingClientRect().top:r.elem.getBoundingClientRect().left},this.getDimension=function(){return r.isVertical?r.elem.getBoundingClientRect().height:r.elem.getBoundingClientRect().width},this.update=function(e){r.isVertical=e,r.isVertical?r.elem.classList.add("slider__bar_position_vertical"):r.elem.classList.remove("slider__bar_position_vertical")},this.init=function(e){r.elem.onclick=r.handleBarClick,r.observers.addObserver(e)},this.handleBarClick=function(e){r.observers.notifyObservers("ClickOnBar",e)},this.elem=Object(n.default)("slider__bar"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(n.default)("slider__button"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,r){t.elem.innerHTML=r+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(n.default)("slider__button-label"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(11),i=r(0),s=function(e,t){var r=this;this.update=function(e){r.parameters=e,r.moveMarks()},this.moveMarks=function(){r.marks.forEach((function(e,t){if(e.update(r.parameters.isVertical),0===t)e.setPosition(0,r.parameters.minValue);else if(t===r.marks.length-1)e.setPosition(100,r.parameters.maxValue);else{var n=r.round(r.parameters.minValue+(r.parameters.maxValue-r.parameters.minValue)*t/(r.marks.length-1));r.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=(n-r.parameters.minValue)/(r.parameters.maxValue-r.parameters.minValue);e.setPosition(100*i,n)}}))},this.init=function(e){r.moveMarks(),r.createMarks(),r.observers.addObserver(e)},this.handleScaleClick=function(e,t){"ClickOnMark"===e&&r.observers.notifyObservers("ClickOnScale",t)},this.createMarks=function(){for(var e=0;e<5;e+=1){var t=new n.default(r.parameters.isVertical,r.handleScaleClick);r.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/r.parameters.step),n=+(e-t*r.parameters.step).toFixed(2);return e<0?Math.abs(n)<r.parameters.step/2?t*r.parameters.step:(t-1)*r.parameters.step:n<r.parameters.step/2?t*r.parameters.step:(t+1)*r.parameters.step},this.parameters=e,this.marks=[],this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=r(0),s=function(e,t){var r=this;this.getPosition=function(){return r.isVertical?r.elem.getBoundingClientRect().top:r.elem.getBoundingClientRect().left},this.setPosition=function(e,t){r.elem.innerHTML=t+"",r.value=t,r.isVertical?(r.elem.style.left="50%",r.elem.style.top=e+"%",r.elem.style.marginTop=-r.getDimension()/2+"px",r.elem.style.marginLeft="-45px"):(r.elem.style.top="50%",r.elem.style.left=e+"%",r.elem.style.marginLeft=-r.getDimension()/2+"px",r.elem.style.marginTop="15px")},this.getDimension=function(){return r.isVertical?r.elem.getBoundingClientRect().height:r.elem.getBoundingClientRect().width},this.update=function(e){r.isVertical=e,r.isVertical?r.elem.classList.add("slider__mark_position_vertical"):r.elem.classList.remove("slider__mark_position_vertical")},this.init=function(e){r.elem.onclick=r.handleMarkClick,r.observers.addObserver(e)},this.handleMarkClick=function(){r.observers.notifyObservers("ClickOnMark",r.value)},this.elem=Object(n.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.update=function(e){t.isVertical=e},this.elem=Object(n.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e,t){var r=this;this.setCurrentValues=function(e,t){var n=e.currentMaxValue||0===e.currentMaxValue,i=e.currentMinValue||0===e.currentMinValue;n&&e.currentMaxValue!==r.currentValues.currentMaxValue&&(r.currentValues.currentMaxValue=e.currentMaxValue),i&&e.currentMinValue!==r.currentValues.currentMinValue&&(r.currentValues.currentMinValue=e.currentMinValue),"fromPanel"===t&&r.observers.notifyObservers("SendingCurrentValues",r.currentValues)},this.observeControllerFromModel=function(e,t){"UpdatingConfig"===e&&r.observers.notifyObservers("SendingCurrentValues",r.currentValues),"ChangingCurrentValueFromView"===e&&(r.setCurrentValues(t,"fromView"),r.observers.notifyObservers("SendingCurrentValuesForTracking",r.currentValues)),"ChangingCurrentValueFromPanel"===e&&r.setCurrentValues(t,"fromPanel"),"GettingValues"===e&&r.observers.notifyObservers("SendingCurrentValuesForTracking",r.currentValues)},this.currentValues=e,this.observers=new n.default,this.observers.addObserver(t)};t.default=i},function(e,t,r){var n={"./Controller/Controller.ts":4,"./Model/Model.ts":13,"./View/View.ts":5,"./View/blocks/Bar/Bar.ts":7,"./View/blocks/Knob/Knob.ts":8,"./View/blocks/ProgressBar/ProgressBar.ts":12,"./View/blocks/Runner/Runner.ts":3,"./View/blocks/Scale/Mark/Mark.ts":11,"./View/blocks/Scale/Scale.ts":10,"./View/blocks/Tooltip/Tooltip.ts":9,"./View/blocks/Track/Track.ts":6,"./View/blocks/createElem/createElem.ts":1,"./makeObservableObject/MakeObservableObject.ts":0,"./slider.ts":15,"./style.scss":16,"./types.ts":2};function i(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=s,e.exports=i,i.id=14},function(e,t,r){"use strict";r.r(t);var n,i,s=r(2),a=r(4),o=function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};n=jQuery,i={init:function(e){if(!n(this).data("slider")){var t=o({},s.defaultParameters),r=new a.default(n.extend(t,e),n(this));n(this).data("slider",r)}},update:function(e){n(this).data("slider").update(e)},renew:function(){return n(this).data("slider").renew()},setValues:function(e){n(this).data("slider").setValues(e)},inputsAttach:function(e){n(this).data("slider").observers.addObserver((function(t,r){"SendingCurrentValuesForTracking"===t&&(e.minValueInput.val(r.currentMinValue),e.maxValueInput.val(r.currentMaxValue)),"SendingConfig"===t&&(e.maxValue.val(r.maxValue),e.minValue.val(r.minValue),e.step.val(r.step))}))}},n.fn.omfgslider=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return i[e]?i[e].apply(this,t):"object"!=typeof e&&e?(n.error("Метод "+e+" не найден в плагине jQuery.omfgslider"),null):i.init.apply(this,[e])}},function(e,t,r){},,function(e,t,r){"use strict";r.r(t);var n;r.p;(n=r(14)).keys().forEach(n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,