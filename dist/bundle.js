!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";r.r(t);var n=function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var s=arguments[t],a=0,o=s.length;a<o;a++,i++)n[i]=s[a];return n},i=function(){function e(){this.observers=[]}return e.prototype.addObserver=function(e){if("function"!=typeof e)throw new Error("observer must be a function");this.observers.forEach((function(t){if(t===e)throw new Error("observer already in the list")})),this.observers.push(e)},e.prototype.removeObserver=function(e){for(var t=0;t<this.observers.length;t+=1){if(this.observers[t]===e)return void this.observers.splice(t,1)}throw new Error("could not find observer in list of observers")},e.prototype.notifyObservers=function(e,t){n(this.observers).map((function(r){return r(e,t)}))},e}();t.default=i},function(e,t,r){"use strict";r.r(t),t.default=function(e){var t=document.createElement("div");return t.ondragstart=function(){return!1},t.classList.add(e),t}},function(e,t,r){"use strict";r.r(t),r.d(t,"defaultParameters",(function(){return n}));var n={minValue:0,maxValue:1e3,step:1,isRange:!1,isVertical:!1,showLabel:!0,isFloat:!1}},function(e,t,r){"use strict";r.r(t);var n=r(8),i=r(9),s=r(0),a=function(e,t){var r=this;this.getPosition=function(){return r.knob.getPosition()},this.setPosition=function(e,t){r.tooltip.setPosition(e+r.knob.getWidth()/2,t),r.knob.setPosition(e)},this.update=function(e){r.knob.update(e),r.tooltip.update(e)},this.getWidth=function(){return r.knob.getWidth()},this.hideRunner=function(){r.knob.elem.style.display="none",r.tooltip.elem.style.display="none"},this.hideLabel=function(){r.tooltip.elem.style.display="none"},this.showLabel=function(){r.tooltip.elem.style.display="block"},this.showRunner=function(){r.knob.elem.style.display="block"},this.appendToNode=function(e){[r.knob.elem,r.tooltip.elem].forEach((function(t){e.appendChild(t),t.onmousedown=r.handleRunnerMouseDown}))},this.handleRunnerMouseDown=function(e){e.preventDefault(),document.addEventListener("mousemove",r.handleRunnerMouseMove),document.addEventListener("mouseup",r.handleRunnerMouseUp)},this.handleRunnerMouseMove=function(e){r.observers.notifyObservers("MovingRunner",{event:e,runner:r})},this.handleRunnerMouseUp=function(){document.removeEventListener("mouseup",r.handleRunnerMouseUp),document.removeEventListener("mousemove",r.handleRunnerMouseMove)},this.isVertical=e,this.knob=new n.default(e),this.tooltip=new i.default(e),this.observers=new s.default,this.observers.addObserver(t)};t.default=a},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r(5),s=r(13),a=r(0),o=function(e,t){var r=this;void 0===e&&(e=n.defaultParameters),this.update=function(e){r.observers.notifyObservers("UpdatingConfig",e),r.observers.notifyObservers("GettingConfig")},this.setValues=function(e){r.observers.notifyObservers("ChangingCurrentValueFromPanel",e)},this.renew=function(){r.observers.notifyObservers("GettingConfig"),r.observers.notifyObservers("GettingValues")},this.init=function(e){r.observers.addObserver(r.view.observeControllerFromView),r.observers.addObserver(r.model.observeControllerFromModel),r.observers.notifyObservers("AppendingToNode",e.get(0))},this.handleViewChangingValue=function(e,t){"ChangingCurrentValueFromView"===e&&r.observers.notifyObservers("ChangingCurrentValueFromView",t),"SendingConfig"===e&&r.observers.notifyObservers("SendingConfig",t)},this.handleModelSendingValues=function(e,t){"SendingCurrentValues"===e&&(r.observers.notifyObservers("SendingCurrentValues",t),r.observers.notifyObservers("GettingValues")),"SendingCurrentValuesForTracking"===e&&r.observers.notifyObservers("SendingCurrentValuesForTracking",t)},this.view=new i.default(e,this.handleViewChangingValue),this.model=new s.default({currentMinValue:e.minValue,currentMaxValue:e.maxValue},this.handleModelSendingValues),this.observers=new a.default,this.init(t)};t.default=o},function(e,t,r){"use strict";r.r(t);var n=r(2),i=r(0),s=r(6),a=function(e,t){switch(t){case"step":return e.parameters.maxValue%1!=0||e.parameters.minValue%1!=0;case"maxValue":return e.parameters.step%1!=0||e.parameters.minValue%1!=0;case"minValue":return e.parameters.step%1!=0||e.parameters.maxValue%1!=0;default:return!1}},o=function(e,t){var r=this;void 0===e&&(e=n.defaultParameters),this.update=function(e){var t=r.validateConfig(e);r.parameters=t,r.observers.notifyObservers("UpdatingConfig",r.parameters)},this.handleTrackValueChanging=function(e,t){"ChangingCurrentValueFromTrack"===e&&r.observers.notifyObservers("ChangingCurrentValueFromView",t)},this.observeControllerFromView=function(e,t){"SendingCurrentValues"===e&&r.observers.notifyObservers("SendingCurrentValues",t),"UpdatingConfig"===e&&r.update(t),"GettingConfig"===e&&r.observers.notifyObservers("SendingConfig",r.parameters),"AppendingToNode"===e&&r.observers.notifyObservers("AppendingToNode",t)},this.init=function(e){r.observers.addObserver(e),r.observers.addObserver(r.track.observeViewFromTrack)},this.validateConfig=function(e){var t=Object.keys(e)[0],n=r.parameters;switch(t){case"step":n.step=r.checkStep(e.step);break;case"maxValue":n.maxValue=r.checkMaxValue(e.maxValue);break;case"minValue":n.minValue=r.checkMinValue(e.minValue);break;case"isRange":"toggle"===e.isRange&&(!0===r.parameters.isRange?n.isRange=!1:n.isRange=!0);break;case"isVertical":"toggle"===e.isVertical&&(!0===r.parameters.isVertical?n.isVertical=!1:n.isVertical=!0);break;case"showLabel":"toggle"===e.showLabel&&(!0===r.parameters.showLabel?n.showLabel=!1:n.showLabel=!0)}return n},this.checkStep=function(e){return!e||e>(r.parameters.maxValue-r.parameters.minValue)/2?r.parameters.step:(e%1!=0?r.parameters.isFloat=!0:a(r,"step")||(r.parameters.isFloat=!1),e)},this.checkMaxValue=function(e){return Number.isNaN(e)||e<=r.parameters.minValue?r.parameters.maxValue:(e%1!=0?r.parameters.isFloat=!0:a(r,"maxValue")||(r.parameters.isFloat=!1),e)},this.checkMinValue=function(e){return Number.isNaN(e)||e>=r.parameters.maxValue?r.parameters.minValue:(e%1!=0?r.parameters.isFloat=!0:a(r,"minValue")||(r.parameters.isFloat=!1),e)},this.observers=new i.default,this.track=new s.default(e,this.handleTrackValueChanging),this.parameters=e,this.init(t)};t.default=o},function(e,t,r){"use strict";r.r(t);var n=r(7),i=r(3),s=r(10),a=r(12),o=r(0),u=function(){function e(e,t){var r=this;this.update=function(e){r.parameters=e,r.bar.update(r.parameters.isVertical),r.progressBar.update(r.parameters.isVertical),r.runnerAdditional.update(r.parameters.isVertical),r.runnerMain.update(r.parameters.isVertical),r.scale.update(r.parameters),r.runnerAdditional.hideRunner(),r.parameters.showLabel?(r.runnerAdditional.showLabel(),r.runnerMain.showLabel()):(r.runnerAdditional.hideLabel(),r.runnerMain.hideLabel()),r.parameters.isRange?r.runnerAdditional.showRunner():r.runnerAdditional.hideRunner(),r.runnerAdditional.setPosition(-r.runnerAdditional.getWidth()/2,r.parameters.minValue),r.runnerMain.setPosition(r.bar.getDimension()-r.runnerMain.getWidth()/2,r.parameters.maxValue)},this.observeViewFromTrack=function(e,t){"SendingCurrentValues"===e&&r.renewRunners(t),"UpdatingConfig"===e&&r.update(t),"AppendingToNode"===e&&r.appendToNode(t)},this.appendToNode=function(e){e.appendChild(r.bar.elem).appendChild(r.progressBar.elem),r.runnerMain.appendToNode(e),r.runnerAdditional.appendToNode(e),r.scale.marks.forEach((function(t){e.appendChild(t.elem)})),r.scale.moveMarks(),r.update(r.parameters),r.updateProgressBar()},this.convertOffsetToValue=function(e){return(e-r.parameters.minValue)*r.bar.getDimension()/(r.parameters.maxValue-r.parameters.minValue)-r.runnerMain.getWidth()/2},this.getMainRunnerOffset=function(){var e=r.runnerMain.getPosition()-r.bar.getPosition()+r.runnerMain.getWidth()/2;return e<0?0:e},this.getAdditionalRunnerOffset=function(){return r.parameters.isRange?r.runnerAdditional.getPosition()-r.bar.getPosition()+r.runnerMain.getWidth()/2:0},this.handleRunnerMove=function(e,t){var n=t.event,i=t.runner;"MovingRunner"===e&&r.moveRunner(r.processRunnerMouseEvent(n,i))},this.moveRunner=function(e){e.runner.setPosition(e.offset,e.value),e.runner===r.runnerAdditional&&r.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMinValue:e.value}),e.runner===r.runnerMain&&r.observers.notifyObservers("ChangingCurrentValueFromTrack",{currentMaxValue:e.value}),r.updateProgressBar()},this.processRunnerMouseEvent=function(e,t){var n=(r.parameters.isVertical?e.clientY:e.clientX)-r.bar.getPosition()-r.runnerAdditional.getWidth()/2;return r.processRunnerOffset(n,t)},this.processRunnerOffset=function(e,t){var n,i;return i=r.checkRunnerOffset(e,t),{runner:t,offset:i=(n=r.roundOffsetRunner(i))[0],value:n[1]}},this.checkRunnerOffset=function(e,t){var n=r.parameters.step*r.bar.getDimension()/(r.parameters.maxValue-r.parameters.minValue),i=n/1.5>r.runnerMain.getWidth()?n/1.5:r.runnerMain.getWidth(),s=e;return t===r.runnerAdditional?e>r.runnerMain.getPosition()-r.bar.getPosition()-i&&(s=r.runnerMain.getPosition()-r.bar.getPosition()-i):t===r.runnerMain&&e<r.runnerAdditional.getPosition()-r.bar.getPosition()+i&&(s=r.runnerAdditional.getPosition()-r.bar.getPosition()+i),s},this.roundOffsetRunner=function(e){var t=r.parameters.minValue+(e+r.runnerMain.getWidth()/2)*(r.parameters.maxValue-r.parameters.minValue)/r.bar.getDimension(),n=r.round(t,r.parameters.step);r.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=r.convertOffsetToValue(n);return i<-r.runnerMain.getWidth()/2&&(i=-r.runnerMain.getWidth()/2,n=r.parameters.minValue),i>r.bar.getDimension()-r.runnerMain.getWidth()/2&&(i=r.bar.getDimension()-r.runnerMain.getWidth()/2,n=r.parameters.maxValue),[i,n]},this.round=function(e,t){var n=Math.trunc(e/t),i=+(e-n*t).toFixed(2);return e<0?Math.abs(i)<t/2?n*t:(n-1)*t:e<=r.parameters.minValue?r.parameters.minValue:e>=r.parameters.maxValue?r.parameters.maxValue:i<t/2?n*t:(n+1)*t},this.handleScaleClick=function(e,t){if("ClickOnScale"===e){var n=r.convertOffsetToValue(t),i=void 0;i=r.parameters.isRange?r.checkRunnerCloser(n):r.runnerMain,r.moveRunner(r.processRunnerOffset(n,i))}},this.checkRunnerCloser=function(e){return Math.abs(e-r.getMainRunnerOffset())<Math.abs(e-r.getAdditionalRunnerOffset())?r.runnerMain:r.runnerAdditional},this.handleBarClick=function(e,t){if("ClickOnBar"===e){var n=(r.parameters.isVertical?t.clientY:t.clientX)-r.bar.getPosition()-r.runnerMain.getWidth()/2;r.moveRunner(r.processRunnerOffset(n,r.checkRunnerCloser(n)))}},this.updateProgressBar=function(){r.progressBar.update(r.parameters.isVertical),r.progressBar.setPosition(r.getAdditionalRunnerOffset()),r.progressBar.setDimension(r.getMainRunnerOffset()-r.getAdditionalRunnerOffset())},this.parameters=e,this.runnerMain=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.runnerAdditional=new i.default(this.parameters.isVertical,this.handleRunnerMove),this.progressBar=new a.default(this.parameters.isVertical),this.bar=new n.default(this.parameters.isVertical,this.handleBarClick),this.scale=new s.default(this.parameters,this.handleScaleClick),this.observers=new o.default,this.observers.addObserver(t)}return e.prototype.renewRunners=function(e){this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMaxValue),this.runnerMain)),this.moveRunner(this.processRunnerOffset(this.convertOffsetToValue(e.currentMinValue),this.runnerAdditional))},e}();t.default=u},function(e,t,r){"use strict";r.r(t);var n=r(1),i=r(0),s=function(e,t){var r=this;this.getPosition=function(){return r.isVertical?r.elem.getBoundingClientRect().top:r.elem.getBoundingClientRect().left},this.getDimension=function(){return r.isVertical?r.elem.getBoundingClientRect().height:r.elem.getBoundingClientRect().width},this.update=function(e){r.isVertical=e,r.isVertical?r.elem.classList.add("slider__bar_position_vertical"):r.elem.classList.remove("slider__bar_position_vertical")},this.init=function(e){r.elem.onclick=r.handleBarClick,r.observers.addObserver(e)},this.handleBarClick=function(e){r.observers.notifyObservers("ClickOnBar",e)},this.elem=Object(n.default)("slider__bar"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.getWidth=function(){return t.elem.getBoundingClientRect().width},this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e){t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e+"px"):(t.elem.style.top="50%",t.elem.style.left=e+"px")},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button_position_vertical"):t.elem.classList.remove("slider__button_position_vertical")},this.elem=Object(n.default)("slider__button"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.getPosition=function(){return t.isVertical?t.elem.getBoundingClientRect().top:t.elem.getBoundingClientRect().left},this.setPosition=function(e,r){t.elem.innerHTML=r+"",t.isVertical?(t.elem.style.left="50%",t.elem.style.top=e-t.getDimension()/2+"px"):(t.elem.style.top="50%",t.elem.style.left=e-t.getDimension()/2+"px")},this.getDimension=function(){return t.isVertical?t.elem.getBoundingClientRect().height:t.elem.getBoundingClientRect().width},this.update=function(e){t.isVertical=e,t.isVertical?t.elem.classList.add("slider__button-label_position_vertical"):t.elem.classList.remove("slider__button-label_position_vertical")},this.elem=Object(n.default)("slider__button-label"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(11),i=r(0),s=function(e,t){var r=this;this.update=function(e){r.parameters=e,r.moveMarks()},this.moveMarks=function(){r.marks.forEach((function(e,t){if(e.update(r.parameters.isVertical),0===t)e.setPosition(0,r.parameters.minValue);else if(t===r.marks.length-1)e.setPosition(100,r.parameters.maxValue);else{var n=r.round(r.parameters.minValue+(r.parameters.maxValue-r.parameters.minValue)*t/(r.marks.length-1));r.parameters.isFloat&&(n=parseFloat(n.toFixed(2)));var i=(n-r.parameters.minValue)/(r.parameters.maxValue-r.parameters.minValue);e.setPosition(100*i,n)}}))},this.init=function(e){r.moveMarks(),r.createMarks(),r.observers.addObserver(e)},this.handleScaleClick=function(e,t){"ClickOnMark"===e&&r.observers.notifyObservers("ClickOnScale",t)},this.createMarks=function(){for(var e=0;e<5;e+=1){var t=new n.default(r.parameters.isVertical,r.handleScaleClick);r.marks.push(t)}},this.round=function(e){var t=Math.trunc(e/r.parameters.step),n=+(e-t*r.parameters.step).toFixed(2);return e<0?Math.abs(n)<r.parameters.step/2?t*r.parameters.step:(t-1)*r.parameters.step:n<r.parameters.step/2?t*r.parameters.step:(t+1)*r.parameters.step},this.parameters=e,this.marks=[],this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=r(0),s=function(e,t){var r=this;this.getPosition=function(){return r.isVertical?r.elem.getBoundingClientRect().top:r.elem.getBoundingClientRect().left},this.setPosition=function(e,t){r.elem.innerHTML=t+"",r.value=t,r.isVertical?(r.elem.style.left="50%",r.elem.style.top=e+"%",r.elem.style.marginTop=-r.getDimension()/2+"px",r.elem.style.marginLeft="-45px"):(r.elem.style.top="50%",r.elem.style.left=e+"%",r.elem.style.marginLeft=-r.getDimension()/2+"px",r.elem.style.marginTop="15px")},this.getDimension=function(){return r.isVertical?r.elem.getBoundingClientRect().height:r.elem.getBoundingClientRect().width},this.update=function(e){r.isVertical=e,r.isVertical?r.elem.classList.add("slider__mark_position_vertical"):r.elem.classList.remove("slider__mark_position_vertical")},this.init=function(e){r.elem.onclick=r.handleMarkClick,r.observers.addObserver(e)},this.handleMarkClick=function(){r.observers.notifyObservers("ClickOnMark",r.value)},this.elem=Object(n.default)("slider__mark"),this.isVertical=e,this.observers=new i.default,this.init(t)};t.default=s},function(e,t,r){"use strict";r.r(t);var n=r(1),i=function(e){var t=this;this.setPosition=function(e){t.isVertical?(t.elem.style.left="0",t.elem.style.width="100%",t.elem.style.top=e+"px"):(t.elem.style.top="0",t.elem.style.height="100%",t.elem.style.left=e+"px")},this.setDimension=function(e){t.isVertical?t.elem.style.height=e+"px":t.elem.style.width=e+"px"},this.update=function(e){t.isVertical=e},this.elem=Object(n.default)("slider__progress-bar"),this.isVertical=e};t.default=i},function(e,t,r){"use strict";r.r(t);var n=r(0),i=function(e,t){var r=this;this.setCurrentValues=function(e,t){var n=e.currentMaxValue||0===e.currentMaxValue,i=e.currentMinValue||0===e.currentMinValue;n&&e.currentMaxValue!==r.currentValues.currentMaxValue&&(r.currentValues.currentMaxValue=e.currentMaxValue),i&&e.currentMinValue!==r.currentValues.currentMinValue&&(r.currentValues.currentMinValue=e.currentMinValue),"fromPanel"===t&&r.observers.notifyObservers("SendingCurrentValues",r.currentValues)},this.observeControllerFromModel=function(e,t){"UpdatingConfig"===e&&r.observers.notifyObservers("SendingCurrentValues",r.currentValues),"ChangingCurrentValueFromView"===e&&(r.setCurrentValues(t,"fromView"),r.observers.notifyObservers("SendingCurrentValuesForTracking",r.currentValues)),"ChangingCurrentValueFromPanel"===e&&r.setCurrentValues(t,"fromPanel"),"GettingValues"===e&&r.observers.notifyObservers("SendingCurrentValuesForTracking",r.currentValues)},this.currentValues=e,this.observers=new n.default,this.observers.addObserver(t)};t.default=i},function(e,t,r){function n(e){e.keys().forEach(e)}n(r(15)),n(r(18))},function(e,t,r){var n={"./Controller/Controller.ts":4,"./Model/Model.ts":13,"./View/View.ts":5,"./View/blocks/Bar/Bar.ts":7,"./View/blocks/Knob/Knob.ts":8,"./View/blocks/ProgressBar/ProgressBar.ts":12,"./View/blocks/Runner/Runner.ts":3,"./View/blocks/Scale/Mark/Mark.ts":11,"./View/blocks/Scale/Scale.ts":10,"./View/blocks/Tooltip/Tooltip.ts":9,"./View/blocks/Track/Track.ts":6,"./View/blocks/createElem/createElem.ts":1,"./makeObservableObject/MakeObservableObject.ts":0,"./slider.ts":16,"./style.scss":17,"./types.ts":2};function i(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=s,e.exports=i,i.id=15},function(e,t,r){"use strict";r.r(t);var n,i,s=r(2),a=r(4),o=function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};n=jQuery,i={init:function(e){if(!n(this).data("slider")){var t=o({},s.defaultParameters),r=new a.default(n.extend(t,e),n(this));n(this).data("slider",r)}},update:function(e){n(this).data("slider").update(e)},renew:function(){return n(this).data("slider").renew()},setValues:function(e){n(this).data("slider").setValues(e)},inputsAttach:function(e){n(this).data("slider").observers.addObserver((function(t,r){"SendingCurrentValuesForTracking"===t&&(e.minValueInput.val(r.currentMinValue),e.maxValueInput.val(r.currentMaxValue)),"SendingConfig"===t&&(e.maxValue.val(r.maxValue),e.minValue.val(r.minValue),e.step.val(r.step))}))}},n.fn.omfgslider=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return i[e]?i[e].apply(this,t):"object"!=typeof e&&e?(n.error("Метод "+e+" не найден в плагине jQuery.omfgslider"),null):i.init.apply(this,[e])}},function(e,t,r){},function(e,t,r){var n={"./blocks/Panel/panel.scss":19,"./index.scss":20};function i(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=s,e.exports=i,i.id=18},function(e,t,r){},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL3R5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvUnVubmVyL1J1bm5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL0NvbnRyb2xsZXIvQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1RyYWNrL1RyYWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvQmFyL0Jhci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL0tub2IvS25vYi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1Rvb2x0aXAvVG9vbHRpcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGx1Z2luL1ZpZXcvYmxvY2tzL1NjYWxlL1NjYWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvU2NhbGUvTWFyay9NYXJrLnRzIiwid2VicGFjazovLy8uL3NyYy9wbHVnaW4vVmlldy9ibG9ja3MvUHJvZ3Jlc3NCYXIvUHJvZ3Jlc3NCYXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9Nb2RlbC9Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL1xcLmQpXFwuKGpzfHRzfHNjc3MpJC8iLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsdWdpbi9zbGlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlbW8tcGFnZSBzeW5jIFxcLnNjc3MkLyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRoaXMiLCJvYnNlcnZlcnMiLCJhZGRPYnNlcnZlciIsImZuIiwiRXJyb3IiLCJmb3JFYWNoIiwib2JzZXJ2ZXIiLCJwdXNoIiwicmVtb3ZlT2JzZXJ2ZXIiLCJsZW5ndGgiLCJzcGxpY2UiLCJub3RpZnlPYnNlcnZlcnMiLCJldmVudE5hbWUiLCJkYXRhIiwibWFwIiwiY2xhc3NOYW1lIiwiZWxlbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm9uZHJhZ3N0YXJ0IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGVmYXVsdFBhcmFtZXRlcnMiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwic3RlcCIsImlzUmFuZ2UiLCJpc1ZlcnRpY2FsIiwic2hvd0xhYmVsIiwiaXNGbG9hdCIsIm1vdmVPYnNlcnZlciIsImdldFBvc2l0aW9uIiwia25vYiIsInNldFBvc2l0aW9uIiwib2Zmc2V0IiwidG9vbHRpcCIsImdldFdpZHRoIiwidXBkYXRlIiwiaGlkZVJ1bm5lciIsInN0eWxlIiwiZGlzcGxheSIsImhpZGVMYWJlbCIsInNob3dSdW5uZXIiLCJhcHBlbmRUb05vZGUiLCJlbnRyeSIsImFwcGVuZENoaWxkIiwib25tb3VzZWRvd24iLCJoYW5kbGVSdW5uZXJNb3VzZURvd24iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVJ1bm5lck1vdXNlTW92ZSIsImhhbmRsZVJ1bm5lck1vdXNlVXAiLCJydW5uZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGFyYW1ldGVycyIsInNldFZhbHVlcyIsImN1cnJlbnRWYWx1ZXMiLCJyZW5ldyIsImluaXQiLCJ2aWV3Iiwib2JzZXJ2ZUNvbnRyb2xsZXJGcm9tVmlldyIsIm1vZGVsIiwib2JzZXJ2ZUNvbnRyb2xsZXJGcm9tTW9kZWwiLCJoYW5kbGVWaWV3Q2hhbmdpbmdWYWx1ZSIsImhhbmRsZU1vZGVsU2VuZGluZ1ZhbHVlcyIsImN1cnJlbnRNaW5WYWx1ZSIsImN1cnJlbnRNYXhWYWx1ZSIsImlzT3RoZXJzVmFsdWVzRmxvYXQiLCJpdGVtIiwicGFyYW1ldGVyIiwiY2hlY2tlZFBhcmFtZXRlcnMiLCJ2YWxpZGF0ZUNvbmZpZyIsImhhbmRsZVRyYWNrVmFsdWVDaGFuZ2luZyIsInRyYWNrIiwib2JzZXJ2ZVZpZXdGcm9tVHJhY2siLCJrZXlzIiwiY2hlY2tTdGVwIiwiY2hlY2tNYXhWYWx1ZSIsImNoZWNrTWluVmFsdWUiLCJOdW1iZXIiLCJpc05hTiIsImJhciIsInByb2dyZXNzQmFyIiwicnVubmVyQWRkaXRpb25hbCIsInJ1bm5lck1haW4iLCJzY2FsZSIsImdldERpbWVuc2lvbiIsInJlbmV3UnVubmVycyIsIm1hcmtzIiwibWFyayIsIm1vdmVNYXJrcyIsInVwZGF0ZVByb2dyZXNzQmFyIiwiY29udmVydE9mZnNldFRvVmFsdWUiLCJnZXRNYWluUnVubmVyT2Zmc2V0IiwiZ2V0QWRkaXRpb25hbFJ1bm5lck9mZnNldCIsImhhbmRsZVJ1bm5lck1vdmUiLCJtb3ZlUnVubmVyIiwicHJvY2Vzc1J1bm5lck1vdXNlRXZlbnQiLCJvYmoiLCJldmVudE1tIiwiY2xpZW50WSIsImNsaWVudFgiLCJwcm9jZXNzUnVubmVyT2Zmc2V0Iiwicm91bmRPZmZzZXQiLCJjaGVja1J1bm5lck9mZnNldCIsInJvdW5kT2Zmc2V0UnVubmVyIiwic3RlcFdpZHRoIiwibWluT2Zmc2V0IiwibmV3T2Zmc2V0IiwiY3VycmVudE9mZnNldCIsImN1cnJlbnRWYWx1ZSIsInJvdW5kVmFsdWUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwid2hvbGUiLCJNYXRoIiwidHJ1bmMiLCJyZW1pbmRlciIsImFicyIsImhhbmRsZVNjYWxlQ2xpY2siLCJjaGVja1J1bm5lckNsb3NlciIsImhhbmRsZUJhckNsaWNrIiwic2V0RGltZW5zaW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwibGVmdCIsImhlaWdodCIsIndpZHRoIiwicmVtb3ZlIiwib25jbGljayIsImlubmVySFRNTCIsIm9wdGlvbnMiLCJpbmRleCIsImNyZWF0ZU1hcmtzIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImhhbmRsZU1hcmtDbGljayIsImRpbWVuc2lvbiIsInNldEN1cnJlbnRWYWx1ZXMiLCJzb3VyY2VPZkNoYW5naW5nIiwiaXNDdXJyZW50TWF4VmFsdWVSZWFsIiwiaXNDdXJyZW50TWluVmFsdWVSZWFsIiwiaW1wb3J0QWxsIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJpZCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsImUiLCJjb2RlIiwicmVzb2x2ZSIsIiQiLCJtZXRob2RzIiwialF1ZXJ5Iiwib3B0IiwibmV3Q29uZmlnIiwic2xpZGVyIiwiZXh0ZW5kIiwiaW5wdXRzQXR0YWNoIiwibWluVmFsdWVJbnB1dCIsInZhbCIsIm1heFZhbHVlSW5wdXQiLCJvbWZnc2xpZGVyIiwibWV0aG9kIiwiYXBwbHkiLCJhcmdzIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxH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OUYsS0FBSzBHLE1BQU1ySyxLQUFNLENBQUNvSyxNLGtDQ2pEdkMsSUFBSXRKLEVBQU0sQ0FDVCw0QkFBNkIsR0FDN0IsZUFBZ0IsSUFJakIsU0FBU21JLEVBQWVDLEdBQ3ZCLElBQUlDLEVBQUtDLEVBQXNCRixHQUMvQixPQUFPdEwsRUFBb0J1TCxHQUU1QixTQUFTQyxFQUFzQkYsR0FDOUIsSUFBSXRMLEVBQW9CYSxFQUFFcUMsRUFBS29JLEdBQU0sQ0FDcEMsSUFBSUcsRUFBSSxJQUFJakosTUFBTSx1QkFBeUI4SSxFQUFNLEtBRWpELE1BREFHLEVBQUVDLEtBQU8sbUJBQ0hELEVBRVAsT0FBT3ZJLEVBQUlvSSxHQUVaRCxFQUFlckUsS0FBTyxXQUNyQixPQUFPbEcsT0FBT2tHLEtBQUs5RCxJQUVwQm1JLEVBQWVNLFFBQVVILEVBQ3pCckwsRUFBT0QsUUFBVW1MLEVBQ2pCQSxFQUFlRSxHQUFLLEkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE0KTtcbiIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmNsYXNzIE1ha2VPYnNlcnZhYmxlT2JqZWN0IHtcclxuICBvYnNlcnZlcnM6IEFycmF5PHR5cGVzLkZ1bmN0aW9uQ2FsbGJhY2tEYXRhPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgYWRkT2JzZXJ2ZXIoZm46IHR5cGVzLk9ic2VydmVyRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvYnNlcnZlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIHRoaXMub2JzZXJ2ZXJzLmZvckVhY2goKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgIGlmIChvYnNlcnZlciA9PT0gZm4pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29ic2VydmVyIGFscmVhZHkgaW4gdGhlIGxpc3QnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5wdXNoKGZuKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZU9ic2VydmVyKGZuOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnNbaV07XHJcbiAgICAgIGlmIChvYnNlcnZlciA9PT0gZm4pIHtcclxuICAgICAgICB0aGlzLm9ic2VydmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIG9ic2VydmVyIGluIGxpc3Qgb2Ygb2JzZXJ2ZXJzJyk7XHJcbiAgfVxyXG5cclxuICBub3RpZnlPYnNlcnZlcnMoZXZlbnROYW1lPzogc3RyaW5nLCBkYXRhPzogYW55KTogdm9pZCB7XHJcbiAgICBjb25zdCBvYnNlcnZlcnNTbmFwc2hvdCA9IFsuLi50aGlzLm9ic2VydmVyc107XHJcbiAgICBvYnNlcnZlcnNTbmFwc2hvdC5tYXAoKG9ic2VydmVyKSA9PiBvYnNlcnZlcihldmVudE5hbWUsIGRhdGEpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1ha2VPYnNlcnZhYmxlT2JqZWN0O1xyXG4iLCJmdW5jdGlvbiBjcmVhdGVFbGVtKGNsYXNzTmFtZTogc3RyaW5nKSA6SFRNTEVsZW1lbnQge1xyXG4gIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBlbGVtLm9uZHJhZ3N0YXJ0ID0gKCkgPT4gZmFsc2U7XHJcbiAgZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgcmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVsZW07XHJcbiIsImltcG9ydCBSdW5uZXIgZnJvbSAnLi9WaWV3L2Jsb2Nrcy9SdW5uZXIvUnVubmVyJztcclxuXHJcbmV4cG9ydCB0eXBlIEZ1bmN0aW9uQ2FsbGJhY2tEYXRhID0gKGRhdGE6IGFueSwgZXZlbnROYW1lPzogc3RyaW5nKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IHR5cGUgT2JzZXJ2ZXJGdW5jdGlvbiA9IChldmVudE5hbWU6IHN0cmluZywgZGF0YT86IGFueSwpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgdHlwZSBjb25maWdVcGRhdGVEYXRhID0ge1xyXG4gIFtpbmRleDogc3RyaW5nXTogbnVtYmVyfHN0cmluZ3xib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBJbnB1dHNPYmplY3QgPSB7XHJcbiAgW2luZGV4OiBzdHJpbmddOiBKUXVlcnk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJ1bm5lck1vdmVEYXRhID0ge1xyXG4gIHJ1bm5lcjogUnVubmVyLFxyXG4gIG9mZnNldDogbnVtYmVyLFxyXG4gIHZhbHVlOiBudW1iZXIsXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEN1cnJlbnRWYWx1ZXMgPSB7XHJcbiAgY3VycmVudE1pblZhbHVlOiBudW1iZXIsXHJcbiAgY3VycmVudE1heFZhbHVlOiBudW1iZXIsXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJ1bm5lck9ic2VydmVyRGF0YSA9IHtcclxuICBldmVudDogTW91c2VFdmVudCxcclxuICBydW5uZXI6IFJ1bm5lcixcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUGFyYW1ldGVycyA9IHtcclxuICBtaW5WYWx1ZTogbnVtYmVyLFxyXG4gIG1heFZhbHVlOiBudW1iZXIsXHJcbiAgc3RlcDogbnVtYmVyLFxyXG4gIGlzUmFuZ2U6IGJvb2xlYW4sXHJcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbixcclxuICBzaG93TGFiZWw6IGJvb2xlYW4sXHJcbiAgaXNGbG9hdDogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSYXdQYXJhbWV0ZXJzID0ge1xyXG4gIG1pblZhbHVlOiBudW1iZXIsXHJcbiAgbWF4VmFsdWU6IG51bWJlcixcclxuICBzdGVwOiBudW1iZXIsXHJcbiAgaXNSYW5nZTogc3RyaW5nLFxyXG4gIGlzVmVydGljYWw6IHN0cmluZyxcclxuICBzaG93TGFiZWw6IHN0cmluZyxcclxuICBpc0Zsb2F0OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQYXJhbWV0ZXJzID0ge1xyXG4gIG1pblZhbHVlOiAwLFxyXG4gIG1heFZhbHVlOiAxMDAwLFxyXG4gIHN0ZXA6IDEsXHJcbiAgaXNSYW5nZTogZmFsc2UsXHJcbiAgaXNWZXJ0aWNhbDogZmFsc2UsXHJcbiAgc2hvd0xhYmVsOiB0cnVlLFxyXG4gIGlzRmxvYXQ6IGZhbHNlXHJcbn07XHJcbiIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uLy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IEtub2IgZnJvbSAnLi4vS25vYi9Lbm9iJztcclxuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vVG9vbHRpcC9Ub29sdGlwJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIFJ1bm5lciB7XHJcbiAga25vYjogS25vYjtcclxuXHJcbiAgdG9vbHRpcDogVG9vbHRpcDtcclxuXHJcbiAgaXNWZXJ0aWNhbDogYm9vbGVhbjtcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IoaXNWZXJ0aWNhbDogYm9vbGVhbiwgbW92ZU9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgdGhpcy5rbm9iID0gbmV3IEtub2IoaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnRvb2x0aXAgPSBuZXcgVG9vbHRpcChpc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihtb3ZlT2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9zaXRpb24gPSAoKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB0aGlzLmtub2IuZ2V0UG9zaXRpb24oKTtcclxuICB9XHJcblxyXG4gIHNldFBvc2l0aW9uID0gKG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnRvb2x0aXAuc2V0UG9zaXRpb24ob2Zmc2V0ICsgdGhpcy5rbm9iLmdldFdpZHRoKCkgLyAyLCB2YWx1ZSk7XHJcbiAgICB0aGlzLmtub2Iuc2V0UG9zaXRpb24ob2Zmc2V0KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSA9IChpc1ZlcnRpY2FsOiBib29sZWFuKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmtub2IudXBkYXRlKGlzVmVydGljYWwpO1xyXG4gICAgdGhpcy50b29sdGlwLnVwZGF0ZShpc1ZlcnRpY2FsKTtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5rbm9iLmdldFdpZHRoKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlUnVubmVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5rbm9iLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHRoaXMudG9vbHRpcC5lbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgfVxyXG5cclxuICBoaWRlTGFiZWwgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnRvb2x0aXAuZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2hvd0xhYmVsID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy50b29sdGlwLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgfVxyXG5cclxuICBzaG93UnVubmVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5rbm9iLmVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgfVxyXG5cclxuICBhcHBlbmRUb05vZGUgPSAoZW50cnk6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICBbdGhpcy5rbm9iLmVsZW0sIHRoaXMudG9vbHRpcC5lbGVtXS5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVudHJ5LmFwcGVuZENoaWxkKGVsZW0pO1xyXG4gICAgICBlbGVtLm9ubW91c2Vkb3duID0gdGhpcy5oYW5kbGVSdW5uZXJNb3VzZURvd247IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVSdW5uZXJNb3VzZURvd24gPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZVJ1bm5lck1vdXNlTW92ZSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSdW5uZXJNb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlUnVubmVyTW91c2VNb3ZlID0gKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ01vdmluZ1J1bm5lcicsIHsgZXZlbnQ6IGV2ZW50LCBydW5uZXI6IHRoaXMgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVJ1bm5lck1vdXNlVXAgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSdW5uZXJNb3VzZVVwKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlUnVubmVyTW91c2VNb3ZlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJ1bm5lcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgVmlldyBmcm9tICcuLi9WaWV3L1ZpZXcnO1xyXG5pbXBvcnQgTW9kZWwgZnJvbSAnLi4vTW9kZWwvTW9kZWwnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5cclxuY2xhc3MgQ29udHJvbGxlciB7XHJcbiAgcHJpdmF0ZSB2aWV3OiBWaWV3O1xyXG5cclxuICBwcml2YXRlIG1vZGVsOiBNb2RlbDtcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHR5cGVzLmRlZmF1bHRQYXJhbWV0ZXJzLCBlbnRyeTogSlF1ZXJ5KSB7XHJcbiAgICB0aGlzLnZpZXcgPSBuZXcgVmlldyhwYXJhbWV0ZXJzLCB0aGlzLmhhbmRsZVZpZXdDaGFuZ2luZ1ZhbHVlKTtcclxuICAgIHRoaXMubW9kZWwgPSBuZXcgTW9kZWwoe1xyXG4gICAgICBjdXJyZW50TWluVmFsdWU6IHBhcmFtZXRlcnMubWluVmFsdWUsXHJcbiAgICAgIGN1cnJlbnRNYXhWYWx1ZTogcGFyYW1ldGVycy5tYXhWYWx1ZVxyXG4gICAgfSwgdGhpcy5oYW5kbGVNb2RlbFNlbmRpbmdWYWx1ZXMpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChlbnRyeSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAocGFyYW1ldGVyczogdHlwZXMuUmF3UGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdVcGRhdGluZ0NvbmZpZycsIHBhcmFtZXRlcnMpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdHZXR0aW5nQ29uZmlnJyk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZXMgPSAoY3VycmVudFZhbHVlczogdHlwZXMuQ3VycmVudFZhbHVlcyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21QYW5lbCcsIGN1cnJlbnRWYWx1ZXMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZXcgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0dldHRpbmdDb25maWcnKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnR2V0dGluZ1ZhbHVlcycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKGVudHJ5OiBKUXVlcnkpOnZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy52aWV3Lm9ic2VydmVDb250cm9sbGVyRnJvbVZpZXcpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy5tb2RlbC5vYnNlcnZlQ29udHJvbGxlckZyb21Nb2RlbCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0FwcGVuZGluZ1RvTm9kZScsIGVudHJ5LmdldCgwKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVZpZXdDaGFuZ2luZ1ZhbHVlID0gKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3Jykge1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0NoYW5naW5nQ3VycmVudFZhbHVlRnJvbVZpZXcnLCBkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDb25maWcnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0NvbmZpZycsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVNb2RlbFNlbmRpbmdWYWx1ZXMgPSAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdTZW5kaW5nQ3VycmVudFZhbHVlcycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIGRhdGEpO1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0dldHRpbmdWYWx1ZXMnKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDdXJyZW50VmFsdWVzRm9yVHJhY2tpbmcnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5pbXBvcnQgVHJhY2sgZnJvbSAnLi9ibG9ja3MvVHJhY2svVHJhY2snO1xyXG5cclxuY29uc3QgaXNPdGhlcnNWYWx1ZXNGbG9hdCA9IChpdGVtOiBWaWV3LCBwYXJhbWV0ZXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIHN3aXRjaCAocGFyYW1ldGVyKSB7XHJcbiAgICBjYXNlICdzdGVwJzpcclxuICAgICAgcmV0dXJuIChpdGVtLnBhcmFtZXRlcnMubWF4VmFsdWUgJSAxICE9PSAwIHx8IGl0ZW0ucGFyYW1ldGVycy5taW5WYWx1ZSAlIDEgIT09IDApO1xyXG4gICAgY2FzZSAnbWF4VmFsdWUnOlxyXG4gICAgICByZXR1cm4gKGl0ZW0ucGFyYW1ldGVycy5zdGVwICUgMSAhPT0gMCB8fCBpdGVtLnBhcmFtZXRlcnMubWluVmFsdWUgJSAxICE9PSAwKTtcclxuICAgIGNhc2UgJ21pblZhbHVlJzpcclxuICAgICAgcmV0dXJuIChpdGVtLnBhcmFtZXRlcnMuc3RlcCAlIDEgIT09IDAgfHwgaXRlbS5wYXJhbWV0ZXJzLm1heFZhbHVlICUgMSAhPT0gMCk7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuY2xhc3MgVmlldyB7XHJcbiAgcGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycztcclxuXHJcbiAgb2JzZXJ2ZXJzOiBNYWtlT2JzZXJ2YWJsZU9iamVjdDtcclxuXHJcbiAgcHJpdmF0ZSB0cmFjazogVHJhY2s7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB0eXBlcy5kZWZhdWx0UGFyYW1ldGVycywgb2JzZXJ2ZXI6IHR5cGVzLk9ic2VydmVyRnVuY3Rpb24pIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLnRyYWNrID0gbmV3IFRyYWNrKHBhcmFtZXRlcnMsIHRoaXMuaGFuZGxlVHJhY2tWYWx1ZUNoYW5naW5nKTtcclxuICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICB0aGlzLmluaXQob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKHBhcmFtZXRlcnM6IHR5cGVzLlJhd1BhcmFtZXRlcnMpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IGNoZWNrZWRQYXJhbWV0ZXJzID0gdGhpcy52YWxpZGF0ZUNvbmZpZyhwYXJhbWV0ZXJzKTtcclxuICAgIHRoaXMucGFyYW1ldGVycyA9IGNoZWNrZWRQYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdVcGRhdGluZ0NvbmZpZycsIHRoaXMucGFyYW1ldGVycyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVUcmFja1ZhbHVlQ2hhbmdpbmcgPSAoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21UcmFjaycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3JywgZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlQ29udHJvbGxlckZyb21WaWV3ID0gKGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdTZW5kaW5nQ3VycmVudFZhbHVlcycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIGRhdGEpO1xyXG4gICAgfSBpZiAoZXZlbnROYW1lID09PSAnVXBkYXRpbmdDb25maWcnKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlKGRhdGEpO1xyXG4gICAgfSBpZiAoZXZlbnROYW1lID09PSAnR2V0dGluZ0NvbmZpZycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ29uZmlnJywgdGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0FwcGVuZGluZ1RvTm9kZScpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdBcHBlbmRpbmdUb05vZGUnLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IChvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIodGhpcy50cmFjay5vYnNlcnZlVmlld0Zyb21UcmFjayk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlQ29uZmlnID0gKHBhcmFtZXRlcnM6IHR5cGVzLlJhd1BhcmFtZXRlcnMpOiB0eXBlcy5QYXJhbWV0ZXJzID0+IHtcclxuICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpWzBdO1xyXG4gICAgY29uc3QgY2hlY2tlZFBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICBjYXNlICdzdGVwJzpcclxuICAgICAgICBjaGVja2VkUGFyYW1ldGVycy5zdGVwID0gdGhpcy5jaGVja1N0ZXAocGFyYW1ldGVycy5zdGVwKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWF4VmFsdWUnOlxyXG4gICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLm1heFZhbHVlID0gdGhpcy5jaGVja01heFZhbHVlKHBhcmFtZXRlcnMubWF4VmFsdWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdtaW5WYWx1ZSc6XHJcbiAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMubWluVmFsdWUgPSB0aGlzLmNoZWNrTWluVmFsdWUocGFyYW1ldGVycy5taW5WYWx1ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2lzUmFuZ2UnOlxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmlzUmFuZ2UgPT09ICd0b2dnbGUnKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMuaXNSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hlY2tlZFBhcmFtZXRlcnMuaXNSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdpc1ZlcnRpY2FsJzpcclxuICAgICAgICBpZiAocGFyYW1ldGVycy5pc1ZlcnRpY2FsID09PSAndG9nZ2xlJykge1xyXG4gICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLmlzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLmlzVmVydGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnc2hvd0xhYmVsJzpcclxuICAgICAgICBpZiAocGFyYW1ldGVycy5zaG93TGFiZWwgPT09ICd0b2dnbGUnKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLnNob3dMYWJlbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjaGVja2VkUGFyYW1ldGVycy5zaG93TGFiZWwgPSBmYWxzZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrZWRQYXJhbWV0ZXJzLnNob3dMYWJlbCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaGVja2VkUGFyYW1ldGVycztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tTdGVwID0gKHN0ZXA6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoIXN0ZXAgfHwgc3RlcCA+ICh0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUgLSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpIC8gMikge1xyXG4gICAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJzLnN0ZXA7XHJcbiAgICB9XHJcbiAgICBpZiAoc3RlcCAlIDEgIT09IDApIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmICghaXNPdGhlcnNWYWx1ZXNGbG9hdCh0aGlzLCAnc3RlcCcpKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0ZXA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTWF4VmFsdWUgPSAobWF4VmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1heFZhbHVlKSB8fCBtYXhWYWx1ZSA8PSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWF4VmFsdWUgJSAxICE9PSAwKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoIWlzT3RoZXJzVmFsdWVzRmxvYXQodGhpcywgJ21heFZhbHVlJykpIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWF4VmFsdWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTWluVmFsdWUgPSAobWluVmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKG1pblZhbHVlKSB8fCBtaW5WYWx1ZSA+PSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWluVmFsdWUgJSAxICE9PSAwKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVycy5pc0Zsb2F0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoIWlzT3RoZXJzVmFsdWVzRmxvYXQodGhpcywgJ21pblZhbHVlJykpIHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWluVmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBCYXIgZnJvbSAnLi4vQmFyL0Jhcic7XHJcbmltcG9ydCBSdW5uZXIgZnJvbSAnLi4vUnVubmVyL1J1bm5lcic7XHJcbmltcG9ydCBTY2FsZSBmcm9tICcuLi9TY2FsZS9TY2FsZSc7XHJcbmltcG9ydCBQcm9ncmVzc0JhciBmcm9tICcuLi9Qcm9ncmVzc0Jhci9Qcm9ncmVzc0Jhcic7XHJcbmltcG9ydCBNYWtlT2JzZXJ2YWJsZU9iamVjdCBmcm9tICcuLi8uLi8uLi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdCc7XHJcblxyXG5jbGFzcyBUcmFjayB7XHJcbiAgcGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycztcclxuXHJcbiAgcHJpdmF0ZSBydW5uZXJNYWluOiBSdW5uZXI7XHJcblxyXG4gIHByaXZhdGUgcnVubmVyQWRkaXRpb25hbDogUnVubmVyO1xyXG5cclxuICBwcml2YXRlIHByb2dyZXNzQmFyOiBQcm9ncmVzc0JhcjtcclxuXHJcbiAgcHJpdmF0ZSBiYXI6IEJhcjtcclxuXHJcbiAgcHJpdmF0ZSBzY2FsZTogU2NhbGU7XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IHR5cGVzLlBhcmFtZXRlcnMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5ydW5uZXJNYWluID0gbmV3IFJ1bm5lcih0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVSdW5uZXJNb3ZlKTtcclxuICAgIHRoaXMucnVubmVyQWRkaXRpb25hbCA9IG5ldyBSdW5uZXIodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwsIHRoaXMuaGFuZGxlUnVubmVyTW92ZSk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyID0gbmV3IFByb2dyZXNzQmFyKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMuYmFyID0gbmV3IEJhcih0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVCYXJDbGljayk7XHJcbiAgICB0aGlzLnNjYWxlID0gbmV3IFNjYWxlKHRoaXMucGFyYW1ldGVycywgdGhpcy5oYW5kbGVTY2FsZUNsaWNrKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzID0gbmV3IE1ha2VPYnNlcnZhYmxlT2JqZWN0KCk7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAocGFyYW1ldGVyczogdHlwZXMuUGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcclxuICAgIHRoaXMuYmFyLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCk7XHJcbiAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwudXBkYXRlKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgIHRoaXMucnVubmVyTWFpbi51cGRhdGUodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwpO1xyXG4gICAgdGhpcy5zY2FsZS51cGRhdGUodGhpcy5wYXJhbWV0ZXJzKTtcclxuICAgIHRoaXMucnVubmVyQWRkaXRpb25hbC5oaWRlUnVubmVyKCk7XHJcblxyXG4gICAgaWYgKHRoaXMucGFyYW1ldGVycy5zaG93TGFiZWwpIHtcclxuICAgICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNob3dMYWJlbCgpO1xyXG4gICAgICB0aGlzLnJ1bm5lck1haW4uc2hvd0xhYmVsKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuaGlkZUxhYmVsKCk7XHJcbiAgICAgIHRoaXMucnVubmVyTWFpbi5oaWRlTGFiZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UpIHtcclxuICAgICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNob3dSdW5uZXIoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucnVubmVyQWRkaXRpb25hbC5oaWRlUnVubmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ydW5uZXJBZGRpdGlvbmFsLnNldFBvc2l0aW9uKFxyXG4gICAgICAtdGhpcy5ydW5uZXJBZGRpdGlvbmFsLmdldFdpZHRoKCkgLyAyLFxyXG4gICAgICB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWVcclxuICAgICk7XHJcbiAgICB0aGlzLnJ1bm5lck1haW4uc2V0UG9zaXRpb24oXHJcbiAgICAgIHRoaXMuYmFyLmdldERpbWVuc2lvbigpIC0gdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyLFxyXG4gICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWVcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlVmlld0Zyb21UcmFjayA9IChldmVudE5hbWU6IHN0cmluZywgZGF0YT86IGFueSk6IHZvaWQgPT4ge1xyXG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDdXJyZW50VmFsdWVzJykge1xyXG4gICAgICB0aGlzLnJlbmV3UnVubmVycyhkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1VwZGF0aW5nQ29uZmlnJykge1xyXG4gICAgICB0aGlzLnVwZGF0ZShkYXRhKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0FwcGVuZGluZ1RvTm9kZScpIHtcclxuICAgICAgdGhpcy5hcHBlbmRUb05vZGUoZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhcHBlbmRUb05vZGUgPSAoZW50cnk6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICBlbnRyeS5hcHBlbmRDaGlsZCh0aGlzLmJhci5lbGVtKS5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzQmFyLmVsZW0pO1xyXG4gICAgdGhpcy5ydW5uZXJNYWluLmFwcGVuZFRvTm9kZShlbnRyeSk7XHJcbiAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuYXBwZW5kVG9Ob2RlKGVudHJ5KTtcclxuXHJcbiAgICB0aGlzLnNjYWxlLm1hcmtzLmZvckVhY2goKG1hcmspID0+IHtcclxuICAgICAgZW50cnkuYXBwZW5kQ2hpbGQobWFyay5lbGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2NhbGUubW92ZU1hcmtzKCk7XHJcbiAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhcmFtZXRlcnMpO1xyXG4gICAgdGhpcy51cGRhdGVQcm9ncmVzc0JhcigpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5ld1J1bm5lcnMoY3VycmVudFZhbHVlczogdHlwZXMuQ3VycmVudFZhbHVlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5tb3ZlUnVubmVyKFxyXG4gICAgICB0aGlzLnByb2Nlc3NSdW5uZXJPZmZzZXQoXHJcbiAgICAgICAgdGhpcy5jb252ZXJ0T2Zmc2V0VG9WYWx1ZShjdXJyZW50VmFsdWVzLmN1cnJlbnRNYXhWYWx1ZSksXHJcbiAgICAgICAgdGhpcy5ydW5uZXJNYWluXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICB0aGlzLm1vdmVSdW5uZXIoXHJcbiAgICAgIHRoaXMucHJvY2Vzc1J1bm5lck9mZnNldChcclxuICAgICAgICB0aGlzLmNvbnZlcnRPZmZzZXRUb1ZhbHVlKGN1cnJlbnRWYWx1ZXMuY3VycmVudE1pblZhbHVlKSxcclxuICAgICAgICB0aGlzLnJ1bm5lckFkZGl0aW9uYWxcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydE9mZnNldFRvVmFsdWUgPSAodmFsdWU6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gKCgodmFsdWUgLSB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpICogdGhpcy5iYXIuZ2V0RGltZW5zaW9uKCkpXHJcbiAgICAgIC8gKHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZSAtIHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZSlcclxuICAgICAgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRNYWluUnVubmVyT2Zmc2V0ID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnJ1bm5lck1haW4uZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKClcclxuICAgICAgKyB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICByZXR1cm4gb2Zmc2V0IDwgMCA/IDAgOiBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQgPSAoKTogbnVtYmVyID0+IHtcclxuICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuaXNSYW5nZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5ydW5uZXJBZGRpdGlvbmFsLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgKyB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZVJ1bm5lck1vdmUgPSAoZXZlbnROYW1lOiBzdHJpbmcsXHJcbiAgICB7IGV2ZW50LCBydW5uZXIgfTogdHlwZXMuUnVubmVyT2JzZXJ2ZXJEYXRhKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoZXZlbnROYW1lID09PSAnTW92aW5nUnVubmVyJykge1xyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyTW91c2VFdmVudChldmVudCwgcnVubmVyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1vdmVSdW5uZXIgPSAob2JqOiB0eXBlcy5SdW5uZXJNb3ZlRGF0YSk6IHZvaWQgPT4ge1xyXG4gICAgb2JqLnJ1bm5lci5zZXRQb3NpdGlvbihvYmoub2Zmc2V0LCBvYmoudmFsdWUpO1xyXG5cclxuICAgIGlmIChvYmoucnVubmVyID09PSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21UcmFjaycsIHsgY3VycmVudE1pblZhbHVlOiBvYmoudmFsdWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9iai5ydW5uZXIgPT09IHRoaXMucnVubmVyTWFpbikge1xyXG4gICAgICB0aGlzLm9ic2VydmVycy5ub3RpZnlPYnNlcnZlcnMoJ0NoYW5naW5nQ3VycmVudFZhbHVlRnJvbVRyYWNrJywgeyBjdXJyZW50TWF4VmFsdWU6IG9iai52YWx1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVwZGF0ZVByb2dyZXNzQmFyKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NSdW5uZXJNb3VzZUV2ZW50ID0gKGV2ZW50TW06IE1vdXNlRXZlbnQsIHJ1bm5lcjogUnVubmVyKTogdHlwZXMuUnVubmVyTW92ZURhdGEgPT4ge1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsID8gZXZlbnRNbS5jbGllbnRZIDogZXZlbnRNbS5jbGllbnRYO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29vcmRpbmF0ZSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgLSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0V2lkdGgoKSAvIDI7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc1J1bm5lck9mZnNldChvZmZzZXQsIHJ1bm5lcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NSdW5uZXJPZmZzZXQgPSAob2Zmc2V0OiBudW1iZXIsIHJ1bm5lcjogUnVubmVyKTogdHlwZXMuUnVubmVyTW92ZURhdGEgPT4ge1xyXG4gICAgbGV0IHJvdW5kVmFsdWUgPSAwO1xyXG4gICAgbGV0IHJvdW5kT2Zmc2V0O1xyXG4gICAgcm91bmRPZmZzZXQgPSB0aGlzLmNoZWNrUnVubmVyT2Zmc2V0KG9mZnNldCwgcnVubmVyKTtcclxuICAgIFtyb3VuZE9mZnNldCwgcm91bmRWYWx1ZV0gPSB0aGlzLnJvdW5kT2Zmc2V0UnVubmVyKHJvdW5kT2Zmc2V0KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBydW5uZXI6IHJ1bm5lcixcclxuICAgICAgb2Zmc2V0OiByb3VuZE9mZnNldCxcclxuICAgICAgdmFsdWU6IHJvdW5kVmFsdWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrUnVubmVyT2Zmc2V0ID0gKG9mZnNldDogbnVtYmVyLCBydW5uZXI6IFJ1bm5lcik6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCBzdGVwV2lkdGggPSAodGhpcy5wYXJhbWV0ZXJzLnN0ZXAgKiB0aGlzLmJhci5nZXREaW1lbnNpb24oKSlcclxuICAgICAgLyAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKTtcclxuICAgIGNvbnN0IG1pbk9mZnNldCA9IHN0ZXBXaWR0aCAvIDEuNSA+IHRoaXMucnVubmVyTWFpbi5nZXRXaWR0aCgpXHJcbiAgICAgID8gc3RlcFdpZHRoIC8gMS41XHJcbiAgICAgIDogdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCk7XHJcbiAgICBsZXQgbmV3T2Zmc2V0ID0gb2Zmc2V0O1xyXG5cclxuICAgIGlmIChydW5uZXIgPT09IHRoaXMucnVubmVyQWRkaXRpb25hbCkge1xyXG4gICAgICBpZiAob2Zmc2V0ID4gdGhpcy5ydW5uZXJNYWluLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpIC0gbWluT2Zmc2V0KSB7XHJcbiAgICAgICAgbmV3T2Zmc2V0ID0gdGhpcy5ydW5uZXJNYWluLmdldFBvc2l0aW9uKCkgLSB0aGlzLmJhci5nZXRQb3NpdGlvbigpIC0gbWluT2Zmc2V0O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHJ1bm5lciA9PT0gdGhpcy5ydW5uZXJNYWluKSB7XHJcbiAgICAgIGlmIChvZmZzZXQgPCB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgKyBtaW5PZmZzZXQpIHtcclxuICAgICAgICBuZXdPZmZzZXQgPSB0aGlzLnJ1bm5lckFkZGl0aW9uYWwuZ2V0UG9zaXRpb24oKSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgKyBtaW5PZmZzZXQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3T2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByb3VuZE9mZnNldFJ1bm5lciA9IChjdXJyZW50T2Zmc2V0OiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMucGFyYW1ldGVycy5taW5WYWx1ZVxyXG4gICAgICArICgoY3VycmVudE9mZnNldCArIHRoaXMucnVubmVyTWFpbi5nZXRXaWR0aCgpIC8gMilcclxuICAgICAgKiAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSlcclxuICAgICAgLyB0aGlzLmJhci5nZXREaW1lbnNpb24oKTtcclxuICAgIGxldCByb3VuZFZhbHVlID0gdGhpcy5yb3VuZChjdXJyZW50VmFsdWUsIHRoaXMucGFyYW1ldGVycy5zdGVwKTtcclxuXHJcbiAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzRmxvYXQpIHtcclxuICAgICAgcm91bmRWYWx1ZSA9IHBhcnNlRmxvYXQocm91bmRWYWx1ZS50b0ZpeGVkKDIpKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcm91bmRPZmZzZXQgPSB0aGlzLmNvbnZlcnRPZmZzZXRUb1ZhbHVlKHJvdW5kVmFsdWUpO1xyXG5cclxuICAgIGlmIChyb3VuZE9mZnNldCA8IC10aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDIpIHtcclxuICAgICAgcm91bmRPZmZzZXQgPSAtdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyO1xyXG4gICAgICByb3VuZFZhbHVlID0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyb3VuZE9mZnNldCA+IHRoaXMuYmFyLmdldERpbWVuc2lvbigpIC0gdGhpcy5ydW5uZXJNYWluLmdldFdpZHRoKCkgLyAyKSB7XHJcbiAgICAgIHJvdW5kT2Zmc2V0ID0gdGhpcy5iYXIuZ2V0RGltZW5zaW9uKCkgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcbiAgICAgIHJvdW5kVmFsdWUgPSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFtyb3VuZE9mZnNldCwgcm91bmRWYWx1ZV07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJvdW5kID0gKHZhbHVlOiBudW1iZXIsIHN0ZXA6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBjb25zdCB3aG9sZSA9IE1hdGgudHJ1bmModmFsdWUgLyBzdGVwKTtcclxuICAgIGNvbnN0IHJlbWluZGVyID0gKyh2YWx1ZSAtIHdob2xlICogc3RlcCkudG9GaXhlZCgyKTtcclxuXHJcbiAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFicyhyZW1pbmRlcikgPCBzdGVwIC8gMiA/IHdob2xlICogc3RlcCA6ICh3aG9sZSAtIDEpICogc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsdWUgPD0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWU7XHJcbiAgICB9IGlmICh2YWx1ZSA+PSB0aGlzLnBhcmFtZXRlcnMubWF4VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5tYXhWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVtaW5kZXIgPCBzdGVwIC8gMiA/IHdob2xlICogc3RlcCA6ICh3aG9sZSArIDEpICogc3RlcDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlU2NhbGVDbGljayA9IChldmVudE5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKGV2ZW50TmFtZSA9PT0gJ0NsaWNrT25TY2FsZScpIHtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jb252ZXJ0T2Zmc2V0VG9WYWx1ZSh2YWx1ZSk7XHJcbiAgICAgIGxldCBydW5uZXI7XHJcblxyXG4gICAgICBpZiAodGhpcy5wYXJhbWV0ZXJzLmlzUmFuZ2UpIHtcclxuICAgICAgICBydW5uZXIgPSB0aGlzLmNoZWNrUnVubmVyQ2xvc2VyKG9mZnNldCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcnVubmVyID0gdGhpcy5ydW5uZXJNYWluO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyT2Zmc2V0KG9mZnNldCwgcnVubmVyKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrUnVubmVyQ2xvc2VyID0gKG9mZnNldDogbnVtYmVyKTogUnVubmVyID0+IHtcclxuICAgIGlmIChNYXRoLmFicyhvZmZzZXQgLSB0aGlzLmdldE1haW5SdW5uZXJPZmZzZXQoKSlcclxuICAgICAgPCBNYXRoLmFicyhvZmZzZXQgLSB0aGlzLmdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQoKSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucnVubmVyTWFpbjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ydW5uZXJBZGRpdGlvbmFsO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVCYXJDbGljayA9IChldmVudE5hbWU6IHN0cmluZywgZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdDbGlja09uQmFyJykge1xyXG4gICAgICBjb25zdCBjb29yZGluYXRlID0gdGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwgPyBldmVudC5jbGllbnRZIDogZXZlbnQuY2xpZW50WDtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gY29vcmRpbmF0ZSAtIHRoaXMuYmFyLmdldFBvc2l0aW9uKCkgLSB0aGlzLnJ1bm5lck1haW4uZ2V0V2lkdGgoKSAvIDI7XHJcblxyXG4gICAgICB0aGlzLm1vdmVSdW5uZXIodGhpcy5wcm9jZXNzUnVubmVyT2Zmc2V0KG9mZnNldCwgdGhpcy5jaGVja1J1bm5lckNsb3NlcihvZmZzZXQpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVByb2dyZXNzQmFyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wcm9ncmVzc0Jhci51cGRhdGUodGhpcy5wYXJhbWV0ZXJzLmlzVmVydGljYWwpO1xyXG4gICAgdGhpcy5wcm9ncmVzc0Jhci5zZXRQb3NpdGlvbih0aGlzLmdldEFkZGl0aW9uYWxSdW5uZXJPZmZzZXQoKSk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyLnNldERpbWVuc2lvbih0aGlzLmdldE1haW5SdW5uZXJPZmZzZXQoKSAtIHRoaXMuZ2V0QWRkaXRpb25hbFJ1bm5lck9mZnNldCgpKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRyYWNrO1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBjcmVhdGVFbGVtIGZyb20gJy4uL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbSc7XHJcbmltcG9ydCBNYWtlT2JzZXJ2YWJsZU9iamVjdCBmcm9tICcuLi8uLi8uLi9tYWtlT2JzZXJ2YWJsZU9iamVjdC9NYWtlT2JzZXJ2YWJsZU9iamVjdCc7XHJcblxyXG5jbGFzcyBCYXIge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICBvYnNlcnZlcnM6IE1ha2VPYnNlcnZhYmxlT2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuLCBvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbikge1xyXG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbSgnc2xpZGVyX19iYXInKTtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgICB0aGlzLm9ic2VydmVycyA9IG5ldyBNYWtlT2JzZXJ2YWJsZU9iamVjdCgpO1xyXG4gICAgdGhpcy5pbml0KG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICB9XHJcblxyXG4gIGdldERpbWVuc2lvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19iYXJfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2Jhcl9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKG9ic2VydmVyOiB0eXBlcy5GdW5jdGlvbkNhbGxiYWNrRGF0YSk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5lbGVtLm9uY2xpY2sgPSB0aGlzLmhhbmRsZUJhckNsaWNrO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVCYXJDbGljayA9IChldmVudDogTW91c2VFdmVudCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdDbGlja09uQmFyJywgZXZlbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFyO1xyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbSBmcm9tICcuLi9jcmVhdGVFbGVtL2NyZWF0ZUVsZW0nO1xyXG5cclxuY2xhc3MgS25vYiB7XHJcbiAgZWxlbTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGlzVmVydGljYWw6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlzVmVydGljYWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW0oJ3NsaWRlcl9fYnV0dG9uJyk7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gIH1cclxuXHJcbiAgZ2V0V2lkdGggPSAoKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgfVxyXG5cclxuICBzZXRQb3NpdGlvbiA9IChvZmZzZXQ6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gb2Zmc2V0ICsgJ3B4JztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS50b3AgPSAnNTAlJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmxlZnQgPSBvZmZzZXQgKyAncHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19idXR0b25fcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2J1dHRvbl9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgS25vYjtcclxuIiwiaW1wb3J0IGNyZWF0ZUVsZW0gZnJvbSAnLi4vY3JlYXRlRWxlbS9jcmVhdGVFbGVtJztcclxuXHJcbmNsYXNzIFRvb2x0aXAge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtKCdzbGlkZXJfX2J1dHRvbi1sYWJlbCcpO1xyXG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuICB9XHJcblxyXG4gIGdldFBvc2l0aW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICB9XHJcblxyXG4gIHNldFBvc2l0aW9uID0gKG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLmVsZW0uaW5uZXJIVE1MID0gdmFsdWUgKyAnJztcclxuXHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5sZWZ0ID0gJzUwJSc7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS50b3AgPSBvZmZzZXQgLSB0aGlzLmdldERpbWVuc2lvbigpIC8gMiArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gJzUwJSc7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5sZWZ0ID0gb2Zmc2V0IC0gdGhpcy5nZXREaW1lbnNpb24oKSAvIDIgKyAncHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGltZW5zaW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAoaXNWZXJ0aWNhbDogYm9vbGVhbik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuXHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX2J1dHRvbi1sYWJlbF9wb3NpdGlvbl92ZXJ0aWNhbCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlcl9fYnV0dG9uLWxhYmVsX3Bvc2l0aW9uX3ZlcnRpY2FsJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sdGlwO1xyXG4iLCJpbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuLi8uLi8uLi90eXBlcyc7XHJcbmltcG9ydCBNYXJrIGZyb20gJy4vTWFyay9NYXJrJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIFNjYWxlIHtcclxuICBwYXJhbWV0ZXJzOiB0eXBlcy5QYXJhbWV0ZXJzO1xyXG5cclxuICBtYXJrczogQXJyYXk8TWFyaz47XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IHR5cGVzLlBhcmFtZXRlcnMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgdGhpcy5tYXJrcyA9IFtdO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAob3B0aW9uczogdHlwZXMuUGFyYW1ldGVycyk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJzID0gb3B0aW9ucztcclxuICAgIHRoaXMubW92ZU1hcmtzKCk7XHJcbiAgfVxyXG5cclxuICBtb3ZlTWFya3MgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm1hcmtzLmZvckVhY2goKG1hcmssIGluZGV4KSA9PiB7XHJcbiAgICAgIG1hcmsudXBkYXRlKHRoaXMucGFyYW1ldGVycy5pc1ZlcnRpY2FsKTtcclxuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgbWFyay5zZXRQb3NpdGlvbigwLCB0aGlzLnBhcmFtZXRlcnMubWluVmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSB0aGlzLm1hcmtzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBtYXJrLnNldFBvc2l0aW9uKDEwMCwgdGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcm91bmRWYWx1ZSA9IHRoaXMucm91bmQodGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlXHJcbiAgICAgICAgICArICgodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKSAqIGluZGV4KVxyXG4gICAgICAgICAgLyAodGhpcy5tYXJrcy5sZW5ndGggLSAxKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtZXRlcnMuaXNGbG9hdCkge1xyXG4gICAgICAgICAgcm91bmRWYWx1ZSA9IHBhcnNlRmxvYXQocm91bmRWYWx1ZS50b0ZpeGVkKDIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChyb3VuZFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKVxyXG4gICAgICAgICAgLyAodGhpcy5wYXJhbWV0ZXJzLm1heFZhbHVlIC0gdGhpcy5wYXJhbWV0ZXJzLm1pblZhbHVlKTtcclxuICAgICAgICBtYXJrLnNldFBvc2l0aW9uKG9mZnNldCAqIDEwMCwgcm91bmRWYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm1vdmVNYXJrcygpO1xyXG4gICAgdGhpcy5jcmVhdGVNYXJrcygpO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMuYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVTY2FsZUNsaWNrID0gKGV2ZW50TmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoZXZlbnROYW1lID09PSAnQ2xpY2tPbk1hcmsnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnQ2xpY2tPblNjYWxlJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVNYXJrcyA9ICgpOiB2b2lkID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSArPSAxKSB7XHJcbiAgICAgIGNvbnN0IG1hcmsgPSBuZXcgTWFyayh0aGlzLnBhcmFtZXRlcnMuaXNWZXJ0aWNhbCwgdGhpcy5oYW5kbGVTY2FsZUNsaWNrKTtcclxuICAgICAgdGhpcy5tYXJrcy5wdXNoKG1hcmspO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByb3VuZCA9ICh2YWx1ZTogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICAgIGNvbnN0IHdob2xlID0gTWF0aC50cnVuYyh2YWx1ZSAvIHRoaXMucGFyYW1ldGVycy5zdGVwKTtcclxuXHJcbiAgICBjb25zdCByZW1pbmRlciA9ICsodmFsdWUgLSB3aG9sZSAqIHRoaXMucGFyYW1ldGVycy5zdGVwKS50b0ZpeGVkKDIpO1xyXG4gICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnMocmVtaW5kZXIpIDwgdGhpcy5wYXJhbWV0ZXJzLnN0ZXAgLyAyXHJcbiAgICAgICAgPyB3aG9sZSAqIHRoaXMucGFyYW1ldGVycy5zdGVwXHJcbiAgICAgICAgOiAod2hvbGUgLSAxKSAqIHRoaXMucGFyYW1ldGVycy5zdGVwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZW1pbmRlciA8IHRoaXMucGFyYW1ldGVycy5zdGVwIC8gMlxyXG4gICAgICA/IHdob2xlICogdGhpcy5wYXJhbWV0ZXJzLnN0ZXBcclxuICAgICAgOiAod2hvbGUgKyAxKSAqIHRoaXMucGFyYW1ldGVycy5zdGVwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2NhbGU7XHJcbiIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW0gZnJvbSAnLi4vLi4vY3JlYXRlRWxlbS9jcmVhdGVFbGVtJztcclxuaW1wb3J0IE1ha2VPYnNlcnZhYmxlT2JqZWN0IGZyb20gJy4uLy4uLy4uLy4uL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0JztcclxuXHJcbmNsYXNzIE1hcmsge1xyXG4gIGVsZW06IEhUTUxFbGVtZW50O1xyXG5cclxuICBpc1ZlcnRpY2FsOiBib29sZWFuO1xyXG5cclxuICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICBvYnNlcnZlcnM6IE1ha2VPYnNlcnZhYmxlT2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpc1ZlcnRpY2FsOiBib29sZWFuLCBvYnNlcnZlcjogdHlwZXMuT2JzZXJ2ZXJGdW5jdGlvbikge1xyXG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbSgnc2xpZGVyX19tYXJrJyk7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMuaW5pdChvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBnZXRQb3NpdGlvbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgfVxyXG5cclxuICBzZXRQb3NpdGlvbiA9IChvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHZhbHVlICsgJyc7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gb2Zmc2V0ICsgJyUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubWFyZ2luVG9wID0gLXRoaXMuZ2V0RGltZW5zaW9uKCkgLyAyICsgJ3B4JztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLm1hcmdpbkxlZnQgPSAnLTQ1cHgnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9IG9mZnNldCArICclJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLm1hcmdpbkxlZnQgPSAtdGhpcy5nZXREaW1lbnNpb24oKSAvIDIgKyAncHgnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubWFyZ2luVG9wID0gJzE1cHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGltZW5zaW9uID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUgPSAoaXNWZXJ0aWNhbDogYm9vbGVhbik6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuXHJcbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX21hcmtfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX21hcmtfcG9zaXRpb25fdmVydGljYWwnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCA9IChvYnNlcnZlcjogdHlwZXMuRnVuY3Rpb25DYWxsYmFja0RhdGEpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuZWxlbS5vbmNsaWNrID0gdGhpcy5oYW5kbGVNYXJrQ2xpY2s7XHJcbiAgICB0aGlzLm9ic2VydmVycy5hZGRPYnNlcnZlcihvYnNlcnZlcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZU1hcmtDbGljayA9ICgpOiB2b2lkID0+IHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnQ2xpY2tPbk1hcmsnLCB0aGlzLnZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hcms7XHJcbiIsImltcG9ydCBjcmVhdGVFbGVtIGZyb20gJy4uL2NyZWF0ZUVsZW0vY3JlYXRlRWxlbSc7XHJcblxyXG5jbGFzcyBQcm9ncmVzc0JhciB7XHJcbiAgZWxlbTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGlzVmVydGljYWw6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlzVmVydGljYWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW0oJ3NsaWRlcl9fcHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICB0aGlzLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xyXG4gIH1cclxuXHJcbiAgc2V0UG9zaXRpb24gPSAob2Zmc2V0OiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmxlZnQgPSAnMCc7XHJcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLnRvcCA9IG9mZnNldCArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUudG9wID0gJzAnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUubGVmdCA9IG9mZnNldCArICdweCc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXREaW1lbnNpb24gPSAoZGltZW5zaW9uOiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgIGlmICh0aGlzLmlzVmVydGljYWwpIHtcclxuICAgICAgdGhpcy5lbGVtLnN0eWxlLmhlaWdodCA9IGRpbWVuc2lvbiArICdweCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uc3R5bGUud2lkdGggPSBkaW1lbnNpb24gKyAncHgnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlID0gKGlzVmVydGljYWw6IGJvb2xlYW4pOiB2b2lkID0+IHtcclxuICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9ncmVzc0JhcjtcclxuIiwiaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgTWFrZU9ic2VydmFibGVPYmplY3QgZnJvbSAnLi4vbWFrZU9ic2VydmFibGVPYmplY3QvTWFrZU9ic2VydmFibGVPYmplY3QnO1xyXG5cclxuY2xhc3MgTW9kZWwge1xyXG4gIGN1cnJlbnRWYWx1ZXM6IHR5cGVzLkN1cnJlbnRWYWx1ZXM7XHJcblxyXG4gIG9ic2VydmVyczogTWFrZU9ic2VydmFibGVPYmplY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGN1cnJlbnRWYWx1ZXM6IHR5cGVzLkN1cnJlbnRWYWx1ZXMsIG9ic2VydmVyOiB0eXBlcy5PYnNlcnZlckZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZXMgPSBjdXJyZW50VmFsdWVzO1xyXG4gICAgdGhpcy5vYnNlcnZlcnMgPSBuZXcgTWFrZU9ic2VydmFibGVPYmplY3QoKTtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLmFkZE9ic2VydmVyKG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIHNldEN1cnJlbnRWYWx1ZXMgPSAoZGF0YTogdHlwZXMuQ3VycmVudFZhbHVlcywgc291cmNlT2ZDaGFuZ2luZz86IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgaXNDdXJyZW50TWF4VmFsdWVSZWFsID0gZGF0YS5jdXJyZW50TWF4VmFsdWUgfHwgZGF0YS5jdXJyZW50TWF4VmFsdWUgPT09IDA7XHJcbiAgICBjb25zdCBpc0N1cnJlbnRNaW5WYWx1ZVJlYWwgPSBkYXRhLmN1cnJlbnRNaW5WYWx1ZSB8fCBkYXRhLmN1cnJlbnRNaW5WYWx1ZSA9PT0gMDtcclxuICAgIGlmIChpc0N1cnJlbnRNYXhWYWx1ZVJlYWwgJiYgZGF0YS5jdXJyZW50TWF4VmFsdWUgIT09IHRoaXMuY3VycmVudFZhbHVlcy5jdXJyZW50TWF4VmFsdWUpIHtcclxuICAgICAgdGhpcy5jdXJyZW50VmFsdWVzLmN1cnJlbnRNYXhWYWx1ZSA9IGRhdGEuY3VycmVudE1heFZhbHVlO1xyXG4gICAgfSBpZiAoaXNDdXJyZW50TWluVmFsdWVSZWFsICYmIGRhdGEuY3VycmVudE1pblZhbHVlICE9PSB0aGlzLmN1cnJlbnRWYWx1ZXMuY3VycmVudE1pblZhbHVlKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFZhbHVlcy5jdXJyZW50TWluVmFsdWUgPSBkYXRhLmN1cnJlbnRNaW5WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc291cmNlT2ZDaGFuZ2luZyA9PT0gJ2Zyb21QYW5lbCcpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvYnNlcnZlQ29udHJvbGxlckZyb21Nb2RlbCA9IChldmVudE5hbWU6IHN0cmluZywgZGF0YT86IHR5cGVzLkN1cnJlbnRWYWx1ZXMpOiB2b2lkID0+IHtcclxuICAgIGlmIChldmVudE5hbWUgPT09ICdVcGRhdGluZ0NvbmZpZycpIHtcclxuICAgICAgdGhpcy5vYnNlcnZlcnMubm90aWZ5T2JzZXJ2ZXJzKCdTZW5kaW5nQ3VycmVudFZhbHVlcycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9IGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21WaWV3Jykge1xyXG4gICAgICB0aGlzLnNldEN1cnJlbnRWYWx1ZXMoZGF0YSwgJ2Zyb21WaWV3Jyk7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9IGlmIChldmVudE5hbWUgPT09ICdDaGFuZ2luZ0N1cnJlbnRWYWx1ZUZyb21QYW5lbCcpIHtcclxuICAgICAgdGhpcy5zZXRDdXJyZW50VmFsdWVzKGRhdGEsICdmcm9tUGFuZWwnKTtcclxuICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ0dldHRpbmdWYWx1ZXMnKSB7XHJcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLm5vdGlmeU9ic2VydmVycygnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycsIHRoaXMuY3VycmVudFZhbHVlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2RlbDtcclxuIiwiZnVuY3Rpb24gaW1wb3J0QWxsKHI6IF9fV2VicGFja01vZHVsZUFwaS5SZXF1aXJlQ29udGV4dCkge1xyXG4gIHIua2V5cygpLmZvckVhY2gocik7XHJcbn1cclxuXHJcbmltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4vcGx1Z2luJywgdHJ1ZSwgLyg/PCFcXC5kKVxcLihqc3x0c3xzY3NzKSQvaSkpO1xyXG5pbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuL2RlbW8tcGFnZScsIHRydWUsIC9cXC5zY3NzJC9pKSk7XHJcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9Db250cm9sbGVyL0NvbnRyb2xsZXIudHNcIjogNCxcblx0XCIuL01vZGVsL01vZGVsLnRzXCI6IDEzLFxuXHRcIi4vVmlldy9WaWV3LnRzXCI6IDUsXG5cdFwiLi9WaWV3L2Jsb2Nrcy9CYXIvQmFyLnRzXCI6IDcsXG5cdFwiLi9WaWV3L2Jsb2Nrcy9Lbm9iL0tub2IudHNcIjogOCxcblx0XCIuL1ZpZXcvYmxvY2tzL1Byb2dyZXNzQmFyL1Byb2dyZXNzQmFyLnRzXCI6IDEyLFxuXHRcIi4vVmlldy9ibG9ja3MvUnVubmVyL1J1bm5lci50c1wiOiAzLFxuXHRcIi4vVmlldy9ibG9ja3MvU2NhbGUvTWFyay9NYXJrLnRzXCI6IDExLFxuXHRcIi4vVmlldy9ibG9ja3MvU2NhbGUvU2NhbGUudHNcIjogMTAsXG5cdFwiLi9WaWV3L2Jsb2Nrcy9Ub29sdGlwL1Rvb2x0aXAudHNcIjogOSxcblx0XCIuL1ZpZXcvYmxvY2tzL1RyYWNrL1RyYWNrLnRzXCI6IDYsXG5cdFwiLi9WaWV3L2Jsb2Nrcy9jcmVhdGVFbGVtL2NyZWF0ZUVsZW0udHNcIjogMSxcblx0XCIuL21ha2VPYnNlcnZhYmxlT2JqZWN0L01ha2VPYnNlcnZhYmxlT2JqZWN0LnRzXCI6IDAsXG5cdFwiLi9zbGlkZXIudHNcIjogMTYsXG5cdFwiLi9zdHlsZS5zY3NzXCI6IDE3LFxuXHRcIi4vdHlwZXMudHNcIjogMlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE1OyIsIi8qIGdsb2JhbCBqUXVlcnkgKi9cclxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlci9Db250cm9sbGVyJztcclxuXHJcbihmdW5jdGlvbiBwbHVnaW5XcmFwcGVyKCQpIHtcclxuICBjb25zdCBtZXRob2RzOiBNZXRob2RzID0ge1xyXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdChvcHQ6IHR5cGVzLlBhcmFtZXRlcnMpIHtcclxuICAgICAgaWYgKCEkKHRoaXMpLmRhdGEoJ3NsaWRlcicpKSB7XHJcbiAgICAgICAgY29uc3QgbmV3Q29uZmlnID0geyAuLi50eXBlcy5kZWZhdWx0UGFyYW1ldGVycyB9O1xyXG4gICAgICAgIGNvbnN0IHNsaWRlciA9IG5ldyBDb250cm9sbGVyKCQuZXh0ZW5kKG5ld0NvbmZpZywgb3B0KSwgJCh0aGlzKSk7XHJcbiAgICAgICAgJCh0aGlzKS5kYXRhKCdzbGlkZXInLCBzbGlkZXIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9wdDogdHlwZXMuUGFyYW1ldGVycykge1xyXG4gICAgICBjb25zdCBzbGlkZXIgPSAkKHRoaXMpLmRhdGEoJ3NsaWRlcicpO1xyXG4gICAgICBzbGlkZXIudXBkYXRlKG9wdCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbmV3OiBmdW5jdGlvbiByZW5ldygpIHtcclxuICAgICAgY29uc3Qgc2xpZGVyID0gJCh0aGlzKS5kYXRhKCdzbGlkZXInKTtcclxuICAgICAgcmV0dXJuIHNsaWRlci5yZW5ldygpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRWYWx1ZXM6IGZ1bmN0aW9uIHNldFZhbHVlcyhvcHQ6IHR5cGVzLkN1cnJlbnRWYWx1ZXMpIHtcclxuICAgICAgY29uc3Qgc2xpZGVyID0gJCh0aGlzKS5kYXRhKCdzbGlkZXInKTtcclxuICAgICAgc2xpZGVyLnNldFZhbHVlcyhvcHQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBpbnB1dHNBdHRhY2g6IGZ1bmN0aW9uIGlucHV0c0F0dGFjaChvcHQ6IHR5cGVzLklucHV0c09iamVjdCkge1xyXG4gICAgICBjb25zdCBzbGlkZXIgPSAkKHRoaXMpLmRhdGEoJ3NsaWRlcicpO1xyXG4gICAgICBzbGlkZXIub2JzZXJ2ZXJzLmFkZE9ic2VydmVyKChldmVudE5hbWU/OiBzdHJpbmcsIGRhdGE/OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnU2VuZGluZ0N1cnJlbnRWYWx1ZXNGb3JUcmFja2luZycpIHtcclxuICAgICAgICAgIG9wdC5taW5WYWx1ZUlucHV0LnZhbChkYXRhLmN1cnJlbnRNaW5WYWx1ZSk7XHJcbiAgICAgICAgICBvcHQubWF4VmFsdWVJbnB1dC52YWwoZGF0YS5jdXJyZW50TWF4VmFsdWUpO1xyXG4gICAgICAgIH0gaWYgKGV2ZW50TmFtZSA9PT0gJ1NlbmRpbmdDb25maWcnKSB7XHJcbiAgICAgICAgICBvcHQubWF4VmFsdWUudmFsKGRhdGEubWF4VmFsdWUpO1xyXG4gICAgICAgICAgb3B0Lm1pblZhbHVlLnZhbChkYXRhLm1pblZhbHVlKTtcclxuICAgICAgICAgIG9wdC5zdGVwLnZhbChkYXRhLnN0ZXApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJC5mbi5vbWZnc2xpZGVyID0gZnVuY3Rpb24gcHJvY2Vzc01ldGhvZChtZXRob2Q6IHN0cmluZywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxyXG4gICAgLi4uYXJnczogQXJyYXk8dHlwZXMuY29uZmlnVXBkYXRlRGF0YT4pIHtcclxuICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHtcclxuICAgICAgcmV0dXJuIG1ldGhvZHNbbWV0aG9kXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH0gaWYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpIHtcclxuICAgICAgcmV0dXJuIG1ldGhvZHMuaW5pdC5hcHBseSh0aGlzLCBbbWV0aG9kXSk7XHJcbiAgICB9XHJcbiAgICAkLmVycm9yKGDQnNC10YLQvtC0ICR7bWV0aG9kfSDQvdC1INC90LDQudC00LXQvSDQsiDQv9C70LDQs9C40L3QtSBqUXVlcnkub21mZ3NsaWRlcmApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfTtcclxufShqUXVlcnkpKTtcclxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2Jsb2Nrcy9QYW5lbC9wYW5lbC5zY3NzXCI6IDE5LFxuXHRcIi4vaW5kZXguc2Nzc1wiOiAyMFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE4OyJdLCJzb3VyY2VSb290IjoiIn0=